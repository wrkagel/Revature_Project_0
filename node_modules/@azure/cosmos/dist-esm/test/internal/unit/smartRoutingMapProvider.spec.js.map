{"version":3,"file":"smartRoutingMapProvider.spec.js","sourceRoot":"","sources":["../../../../test/internal/unit/smartRoutingMapProvider.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { ClientContext } from \"../../../src/ClientContext\";\nimport { PartitionKeyRangeCache, QueryRange, SmartRoutingMapProvider } from \"../../../src/routing\";\nimport { MockedClientContext } from \"../../public/common/MockClientContext\";\n\ndescribe(\"Smart Routing Map Provider OverlappingRanges\", function() {\n  const containerLink = \"dbs/7JZZAA==/colls/7JZZAOS-JQA=/\";\n\n  const partitionKeyRanges = [\n    { id: \"0\", minInclusive: \"\", maxExclusive: \"05C1C9CD673398\" },\n    {\n      id: \"1\",\n      minInclusive: \"05C1C9CD673398\",\n      maxExclusive: \"05C1D9CD673398\"\n    },\n    {\n      id: \"2\",\n      minInclusive: \"05C1D9CD673398\",\n      maxExclusive: \"05C1E399CD6732\"\n    },\n    {\n      id: \"3\",\n      minInclusive: \"05C1E399CD6732\",\n      maxExclusive: \"05C1E9CD673398\"\n    },\n    { id: \"4\", minInclusive: \"05C1E9CD673398\", maxExclusive: \"FF\" }\n  ];\n\n  const mockedClientContext: ClientContext = new MockedClientContext(partitionKeyRanges) as any;\n  const smartRoutingMapProvider = new SmartRoutingMapProvider(mockedClientContext);\n  const partitionKeyRangeCache = new PartitionKeyRangeCache(mockedClientContext);\n\n  // Validates the results\n  // smartRoutingMapProvider.getOverlappingRanges()\n  // partitionKeyRangeCache.getOverlappingRanges() is equal\n  const assertBothProvidersResultsEqual = async (queryRanges: any): Promise<void> => {\n    let results1: any;\n    let results2: any;\n    let err1: any;\n    let err2: any;\n    results1 = results2 = null;\n    err1 = err2 = null;\n    try {\n      results1 = await smartRoutingMapProvider.getOverlappingRanges(containerLink, queryRanges);\n    } catch (err) {\n      err1 = err;\n    }\n    try {\n      results2 = await partitionKeyRangeCache.getOverlappingRanges(containerLink, queryRanges);\n    } catch (err) {\n      err2 = err;\n    }\n    assert.equal(err1, err2);\n    assert.deepEqual(results1, results2);\n  };\n\n  // Validates the results\n  // provider.getOverlappingRanges() is as expected\n  const validateProviderOverlappingRanges = async function(\n    provider: SmartRoutingMapProvider,\n    queryRanges: any,\n    expectedResults: any,\n    errorExpected?: any\n  ): Promise<void> {\n    errorExpected = errorExpected || false;\n    try {\n      const results = await provider.getOverlappingRanges(containerLink, queryRanges);\n      assert.deepEqual(results, expectedResults);\n    } catch (err) {\n      if (errorExpected) {\n        assert.notEqual(err, undefined);\n        return;\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  // validates that the results of\n  // smartRoutingMapProvider.getOverlappingRanges() is as expected\n  const validateSmartOverlappingRanges = async function(\n    queryRanges: any,\n    expectedResults: any,\n    errorExpected: any\n  ): Promise<void> {\n    await validateProviderOverlappingRanges(\n      smartRoutingMapProvider,\n      queryRanges,\n      expectedResults,\n      errorExpected\n    );\n  };\n\n  // validates that the results of\n  // partitionKeyRangeCache.getOverlappingRanges() is as expected\n  const validatePartitionKeyRangeCacheOverlappingRanges = async function(\n    queryRanges: any,\n    expectedResults: any,\n    errorExpected: any\n  ): Promise<void> {\n    await validateProviderOverlappingRanges(\n      partitionKeyRangeCache as any,\n      queryRanges,\n      expectedResults,\n      errorExpected\n    );\n  };\n\n  // Validates the results\n  // smartRoutingMapProvider.getOverlappingRanges()\n  // partitionKeyRangeCache.getOverlappingRanges() is as expected\n  const validateOverlappingRanges = async function(\n    queryRanges: any,\n    expectedResults: any,\n    errorExpected?: any\n  ): Promise<void> {\n    errorExpected = errorExpected || false;\n    await validateSmartOverlappingRanges(queryRanges, expectedResults, errorExpected);\n    await validatePartitionKeyRangeCacheOverlappingRanges(\n      queryRanges,\n      expectedResults,\n      errorExpected\n    );\n  };\n\n  // Validates the results\n  // provider.getOverlappingRanges() is the same on both queryRanges1, queryRanges2\n  const assertProviderOverlappingRangesAreEqual = async function(\n    provider: SmartRoutingMapProvider,\n    queryRanges1: any,\n    queryRanges2: any\n  ): Promise<void> {\n    let results1: any;\n    let results2: any;\n    let err1: any;\n    let err2: any;\n    try {\n      results1 = await provider.getOverlappingRanges(containerLink, queryRanges1);\n    } catch (err) {\n      err1 = err;\n    }\n    try {\n      results2 = await provider.getOverlappingRanges(containerLink, queryRanges2);\n    } catch (err) {\n      err2 = err;\n    }\n    assert.equal(err1, err2);\n    assert.deepEqual(results1, results2);\n  };\n\n  // Validates the results of both\n  // smartRoutingMapProvider.getOverlappingRanges()\n  // partitionKeyRangeCache.getOverlappingRanges() is the same for both queryRanges1, queryRanges2\n  const assertOverlappingRangesAreEqual = async function(\n    queryRanges1: any,\n    queryRanges2: any\n  ): Promise<void> {\n    await assertProviderOverlappingRangesAreEqual(\n      smartRoutingMapProvider,\n      queryRanges1,\n      queryRanges2\n    );\n    await assertProviderOverlappingRangesAreEqual(\n      partitionKeyRangeCache as any,\n      queryRanges1,\n      queryRanges2\n    );\n    await assertBothProvidersResultsEqual(queryRanges1);\n  };\n\n  describe(\"Test Full Range\", function() {\n    it('query ranges: [\"\", \"\"FF)', function() {\n      // query range is the whole partition key range\n      const pkRange = new QueryRange(\"\", \"FF\", true, false);\n      return validateOverlappingRanges([pkRange], partitionKeyRanges);\n    });\n\n    it('query ranges: (\"\", \"\"FF)', function() {\n      // query range is the whole partition key range\n      const pkRange = new QueryRange(\"\", \"FF\", false, false);\n      return validateOverlappingRanges([pkRange], partitionKeyRanges);\n    });\n  });\n\n  describe(\"Test Empty Range\", function() {\n    it(\"empty query range list\", async function() {\n      // query range list is empty\n      await validateOverlappingRanges([], []);\n    });\n\n    it('query ranges: (\"\", \"\"]', async function() {\n      // validate the overlaping partition key ranges results for empty ranges is empty\n      await validateOverlappingRanges([new QueryRange(\"\", \"\", false, true)], []);\n    });\n\n    it('query ranges: (\"\", \"\")', async function() {\n      // validate the overlaping partition key ranges results for empty ranges is empty\n      await validateOverlappingRanges([new QueryRange(\"\", \"\", false, false)], []);\n    });\n\n    it('query ranges: [\"\", \"\")', async function() {\n      // validate the overlaping partition key ranges results for empty ranges is empty\n      await validateOverlappingRanges([new QueryRange(\"\", \"\", true, false)], []);\n    });\n  });\n\n  describe(\"Error Handling: Bad Overlapping Query Range\", function() {\n    it(\"overlapping query ranges (in a point)\", async function() {\n      const r1 = new QueryRange(\"\", \"AA\", true, true);\n      const r2 = new QueryRange(\"AA\", \"FF\", true, false);\n      await validateSmartOverlappingRanges([r1, r2], undefined, true);\n    });\n\n    it(\"overlapping query ranges (in a range)\", async function() {\n      const r1 = new QueryRange(\"\", \"AB\", true, false);\n      const r2 = new QueryRange(\"AA\", \"FA\", true, false);\n      await validateSmartOverlappingRanges([r1, r2], undefined, true);\n    });\n\n    it(\"not sorted query ranges\", async function() {\n      const r1 = new QueryRange(\"AB\", \"AC\", true, false);\n      const r2 = new QueryRange(\"AA\", \"AB\", true, false);\n      await validateSmartOverlappingRanges([r1, r2], undefined, true);\n    });\n  });\n\n  it(\"Empty Ranges are thrown away\", async function() {\n    const e1 = new QueryRange(\"\", \"\", true, false);\n    const r1 = new QueryRange(\"\", \"AB\", true, false);\n    const e2 = new QueryRange(\"AB\", \"AB\", true, false);\n    const r2 = new QueryRange(\"AB\", \"AC\", true, false);\n    const e3 = new QueryRange(\"AC\", \"AC\", true, false);\n    const e4 = new QueryRange(\"AD\", \"AD\", true, false);\n    await assertOverlappingRangesAreEqual([e1, r1, e2, r2, e3, e4], [r1, r2]);\n  });\n\n  it(\"Single Query Range\", async function() {\n    const r = new QueryRange(\"AB\", \"AC\", true, false);\n    await assertBothProvidersResultsEqual([r]);\n  });\n\n  it(\"Multiple Query Ranges\", async function() {\n    const ranges = [\n      new QueryRange(\"0000000040\", \"0000000045\", true, false),\n      new QueryRange(\"0000000045\", \"0000000046\", true, false),\n      new QueryRange(\"0000000046\", \"0000000050\", true, false)\n    ];\n    await assertBothProvidersResultsEqual(ranges);\n  });\n\n  it(\"Single Boundary Case Query Range\", async function() {\n    const ranges = [new QueryRange(\"05C1C9CD673398\", \"05C1D9CD673398\", true, false)];\n    await validateOverlappingRanges(ranges, partitionKeyRanges.slice(1, 2));\n  });\n\n  it(\"Two Adjacent Boundary Case Query Ranges\", async function() {\n    const ranges = [\n      // partitionKeyRanges[1]\n      new QueryRange(\"05C1C9CD673398\", \"05C1D9CD673398\", true, false),\n      // partitionKeyRanges[2]\n      new QueryRange(\"05C1D9CD673398\", \"05C1D9CD673399\", true, false)\n    ];\n    await validateOverlappingRanges(ranges, partitionKeyRanges.slice(1, 3));\n  });\n\n  it(\"Two Ranges in one partition key range\", async function() {\n    const ranges = [\n      // two ranges fall in the same partition key range\n      new QueryRange(\"05C1C9CD673400\", \"05C1C9CD673401\", true, false),\n      new QueryRange(\"05C1C9CD673402\", \"05C1C9CD673403\", true, false)\n    ];\n    await validateOverlappingRanges(ranges, partitionKeyRanges.slice(1, 2));\n  });\n\n  it(\"Complex\", async function() {\n    const ranges = [\n      // all are covered by partitionKeyRanges[1]\n      new QueryRange(\"05C1C9CD673398\", \"05C1D9CD673391\", true, false),\n      new QueryRange(\"05C1D9CD673391\", \"05C1D9CD673392\", true, false),\n      new QueryRange(\"05C1D9CD673393\", \"05C1D9CD673395\", true, false),\n      new QueryRange(\"05C1D9CD673395\", \"05C1D9CD673395\", true, false),\n      // all are covered by partitionKeyRanges[4]]\n      new QueryRange(\"05C1E9CD673398\", \"05C1E9CD673401\", true, false),\n      new QueryRange(\"05C1E9CD673402\", \"05C1E9CD673403\", true, false),\n      // empty range\n      new QueryRange(\"FF\", \"FF\", true, false)\n    ];\n    await validateOverlappingRanges(ranges, [partitionKeyRanges[1], partitionKeyRanges[4]]);\n  });\n});\n"]}