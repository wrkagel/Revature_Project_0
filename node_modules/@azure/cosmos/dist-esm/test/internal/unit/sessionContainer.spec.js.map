{"version":3,"file":"sessionContainer.spec.js","sourceRoot":"","sources":["../../../../test/internal/unit/sessionContainer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Constants, OperationType, ResourceType } from \"../../../src/common\";\nimport { CosmosHeaders } from \"../../../src/queryExecutionContext/CosmosHeaders\";\nimport { SessionContainer } from \"../../../src/session/sessionContainer\";\nimport { SessionContext } from \"../../../src/session/SessionContext\";\n\ndescribe(\"SessionContainer\", function() {\n  const collectionLink = \"dbs/testDatabase/colls/testCollection\";\n  const collectionRid = \"-EdBAKsiRLM=\";\n\n  it(\"set/get/delete\", function() {\n    const sc = new SessionContainer();\n\n    const tokenString = \"1:1#100#1=20#2=5#3=30\";\n\n    const nameBasedRequest: SessionContext = {\n      isNameBased: true,\n      resourceId: collectionRid,\n      resourceAddress: \"/\" + collectionLink + \"/\",\n      resourceType: ResourceType.item,\n      operationType: OperationType.Create\n    };\n\n    const resHeadersNameBased: CosmosHeaders = {};\n    resHeadersNameBased[Constants.HttpHeaders.OwnerFullName] = collectionLink;\n    resHeadersNameBased[Constants.HttpHeaders.OwnerId] = collectionRid;\n    resHeadersNameBased[Constants.HttpHeaders.SessionToken] = tokenString;\n\n    // Add a token and get new token, should be equal\n    sc.set(nameBasedRequest, resHeadersNameBased);\n    const originalTokenString = sc.get(nameBasedRequest);\n    assert.equal(\n      tokenString,\n      originalTokenString,\n      \"Session token string must be equal to original header on initial set\"\n    );\n\n    // Add an older token, should still equal original token\n    const tokenStringWithOlderVersion = \"1:1#99#1=19#2=4#3=29\";\n    resHeadersNameBased[Constants.HttpHeaders.SessionToken] = tokenStringWithOlderVersion;\n    sc.set(nameBasedRequest, resHeadersNameBased);\n    const sameTokenString = sc.get(nameBasedRequest);\n    assert.equal(\n      tokenString,\n      sameTokenString,\n      \"Session token string must be equal to the original higher version header\"\n    );\n\n    // Add a newer version token, should equal new token\n    const tokenStringWithNewerVersion = \"1:1#100#1=30#2=10#3=40\";\n    resHeadersNameBased[Constants.HttpHeaders.SessionToken] = tokenStringWithNewerVersion;\n    sc.set(nameBasedRequest, resHeadersNameBased);\n    const updatedTokenString = sc.get(nameBasedRequest);\n    assert.equal(\n      tokenStringWithNewerVersion,\n      updatedTokenString,\n      \"Session token string must be equal to the new higher version header\"\n    );\n\n    // Add a new partition's token, should container new and old token\n    const tokenFromAnotherPartition = \"2:1#100#1=10\";\n    resHeadersNameBased[Constants.HttpHeaders.SessionToken] = tokenFromAnotherPartition;\n    sc.set(nameBasedRequest, resHeadersNameBased);\n    const multiplePartitions = sc.get(nameBasedRequest);\n    assert(\n      multiplePartitions.includes(tokenStringWithNewerVersion),\n      \"Token string must contain token from updated request\"\n    );\n    assert(\n      multiplePartitions.includes(tokenFromAnotherPartition),\n      \"Token string must contain from new partition\"\n    );\n\n    // Add a token with has multiple partitions in it, 1 old, and 1 new. Should only keep the new one, but still contain tokens for both\n    const p2TokenWithNewerVersion = \"2:2#100#1=10#2=50\";\n    const tokenWithMultiplePartitions = `${tokenStringWithOlderVersion},${p2TokenWithNewerVersion}`;\n    resHeadersNameBased[Constants.HttpHeaders.SessionToken] = tokenWithMultiplePartitions;\n    sc.set(nameBasedRequest, resHeadersNameBased);\n    const multiplePartitions2 = sc.get(nameBasedRequest);\n    assert(\n      multiplePartitions2.includes(tokenStringWithNewerVersion),\n      \"Token string must contain token from previous request for first partition\"\n    );\n    assert(\n      multiplePartitions2.includes(p2TokenWithNewerVersion),\n      \"Token string must contain from updated token for second partition\"\n    );\n\n    // Remove tokens and get new token, should be empty\n    sc.remove(nameBasedRequest);\n    const emptyTokenString = sc.get(nameBasedRequest);\n    assert.equal(\"\", emptyTokenString, \"Session token string must be empty after removal\");\n  });\n});\n"]}