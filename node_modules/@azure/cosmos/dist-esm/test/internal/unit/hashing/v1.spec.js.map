{"version":3,"file":"v1.spec.js","sourceRoot":"","sources":["../../../../../test/internal/unit/hashing/v1.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,kBAAkB,EAAE,MAAM,kCAAkC,CAAC;AAEtE,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,iBAAiB,EAAE;QAC1B,MAAM,OAAO,GAAG;YACd;gBACE,GAAG,EAAE,cAAc;gBACnB,MAAM,EAAE,4CAA4C;aACrD;YACD;gBACE,GAAG,EAAE,SAAS;gBACd,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EACD,gHAAgH;gBAClH,MAAM,EACJ,4NAA4N;aAC/N;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,MAAM,EAAE,oBAAoB;aAC7B;YACD;gBACE,GAAG,EAAE,IAAI;gBACT,MAAM,EAAE,wBAAwB;aACjC;YACD;gBACE,GAAG,EAAE,IAAI;gBACT,MAAM,EAAE,kBAAkB;aAC3B;YACD;gBACE,GAAG,EAAE,IAAI;gBACT,MAAM,EAAE,kBAAkB;aAC3B;YACD;gBACE,GAAG,EAAE,KAAK;gBACV,MAAM,EAAE,kBAAkB;aAC3B;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,MAAM,EAAE,kBAAkB;aAC3B;YACD;gBACE,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,sBAAsB;aAC/B;YACD;gBACE,GAAG,EAAE,GAAG;gBACR,MAAM,EAAE,sBAAsB;aAC/B;YACD;gBACE,GAAG,EAAE,UAAU;gBACf,MAAM,EAAE,oCAAoC;aAC7C;YACD;gBACE,GAAG,EAAE,SAAS;gBACd,MAAM,EAAE,8BAA8B;aACvC;SACF,CAAC;QACF,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE;YAClC,EAAE,CAAC,8BAA8B,EAAE;gBACjC,MAAM,MAAM,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBACvC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport assert from \"assert\";\nimport { hashV1PartitionKey } from \"../../../../src/utils/hashing/v1\";\n\ndescribe(\"effectivePartitionKey\", function() {\n  describe(\"computes v1 key\", function() {\n    const toMatch = [\n      {\n        key: \"partitionKey\",\n        output: \"05C1E1B3D9CD2608716273756A756A706F4C667A00\"\n      },\n      {\n        key: \"redmond\",\n        output: \"05C1EFE313830C087366656E706F6500\"\n      },\n      {\n        key:\n          \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n        output:\n          \"05C1EB5921F706086262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626262626200\"\n      },\n      {\n        key: \"\",\n        output: \"05C1CF33970FF80800\"\n      },\n      {\n        key: \"aa\",\n        output: \"05C1C7B7270FE008626200\"\n      },\n      {\n        key: null,\n        output: \"05C1ED45D7475601\"\n      },\n      {\n        key: true,\n        output: \"05C1D7C5A903D803\"\n      },\n      {\n        key: false,\n        output: \"05C1DB857D857C02\"\n      },\n      {\n        key: {},\n        output: \"05C1D529E345DC00\"\n      },\n      {\n        key: 5,\n        output: \"05C1D9C1C5517C05C014\"\n      },\n      {\n        key: 5.5,\n        output: \"05C1D7A771716C05C016\"\n      },\n      {\n        key: 12313.1221,\n        output: \"05C1ED154D592E05C0C90723F50FC925D8\"\n      },\n      {\n        key: 123456789,\n        output: \"05C1D9E1A5311C05C19DB7CD8B40\"\n      }\n    ];\n    toMatch.forEach(({ key, output }) => {\n      it(\"matches expected hash output\", function() {\n        const hashed = hashV1PartitionKey(key);\n        assert.equal(hashed, output);\n      });\n    });\n  });\n});\n"]}