{"version":3,"file":"v2.spec.js","sourceRoot":"","sources":["../../../../../test/internal/unit/hashing/v2.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,kBAAkB,EAAE,MAAM,kCAAkC,CAAC;AAEtE,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,iBAAiB,EAAE;QAC1B,MAAM,OAAO,GAAG;YACd;gBACE,GAAG,EAAE,SAAS;gBACd,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EACD,gHAAgH;gBAClH,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,IAAI;gBACT,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,IAAI;gBACT,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,IAAI;gBACT,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,KAAK;gBACV,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,CAAC;gBACN,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,GAAG;gBACR,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,UAAU;gBACf,MAAM,EAAE,kCAAkC;aAC3C;YACD;gBACE,GAAG,EAAE,SAAS;gBACd,MAAM,EAAE,kCAAkC;aAC3C;SACF,CAAC;QACF,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE;YAClC,EAAE,CAAC,8BAA8B,EAAE;gBACjC,MAAM,MAAM,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBACvC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport assert from \"assert\";\nimport { hashV2PartitionKey } from \"../../../../src/utils/hashing/v2\";\n\ndescribe(\"effectivePartitionKey\", function() {\n  describe(\"computes v2 key\", function() {\n    const toMatch = [\n      {\n        key: \"redmond\",\n        output: \"22E342F38A486A088463DFF7838A5963\"\n      },\n      {\n        key:\n          \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n        output: \"0BA3E9CA8EE4C14538828D1612A4B652\"\n      },\n      {\n        key: \"\",\n        output: \"32E9366E637A71B4E710384B2F4970A0\"\n      },\n      {\n        key: \"aa\",\n        output: \"05033626483AE80D00E44FBD35362B19\"\n      },\n      {\n        key: null,\n        output: \"378867E4430E67857ACE5C908374FE16\"\n      },\n      {\n        key: true,\n        output: \"0E711127C5B5A8E4726AC6DD306A3E59\"\n      },\n      {\n        key: false,\n        output: \"2FE1BE91E90A3439635E0E9E37361EF2\"\n      },\n      {\n        key: {},\n        output: \"11622DAA78F835834610ABE56EFF5CB5\"\n      },\n      {\n        key: 5,\n        output: \"19C08621B135968252FB34B4CF66F811\"\n      },\n      {\n        key: 5.5,\n        output: \"0E2EE47829D1AF775EEFB6540FD1D0ED\"\n      },\n      {\n        key: 12313.1221,\n        output: \"27E7ECA8F2EE3E53424DE8D5220631C6\"\n      },\n      {\n        key: 123456789,\n        output: \"1F56D2538088EBA82CCF988F36E16760\"\n      }\n    ];\n    toMatch.forEach(({ key, output }) => {\n      it(\"matches expected hash output\", function() {\n        const hashed = hashV2PartitionKey(key);\n        assert.equal(hashed, output);\n      });\n    });\n  });\n});\n"]}