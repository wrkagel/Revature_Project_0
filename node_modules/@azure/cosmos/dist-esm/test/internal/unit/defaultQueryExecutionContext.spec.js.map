{"version":3,"file":"defaultQueryExecutionContext.spec.js","sourceRoot":"","sources":["../../../../test/internal/unit/defaultQueryExecutionContext.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAEL,4BAA4B,EAC7B,MAAM,oCAAoC,CAAC;AAE5C,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE5C,QAAQ,CAAC,8BAA8B,EAAE;IACvC,EAAE,CAAC,iDAAiD,EAAE,KAAK;QACzD,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,MAAM,aAAa,GAA0B,KAAK,IAAI,EAAE;YACtD,WAAW,EAAE,CAAC;YACd,OAAO;gBACL,IAAI,EAAE,GAAG;gBACT,OAAO,EAAE;oBACP,mBAAmB,EAAE,iBAAiB;iBACvC;gBACD,MAAM,EAAE;oBACN;wBACE,IAAI,EAAE,KAAK;qBACZ;iBACF;gBACD,SAAS,EAAE,CAAC;aACb,CAAC;QACJ,CAAC,CAAC;QAEF,MAAM,OAAO,GAAgB;YAC3B,WAAW,EAAE,KAAK;SACnB,CAAC;QAEF,MAAM,OAAO,GAAG,IAAI,4BAA4B,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAEzE,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,EAAE,yCAAyC,CAAC,CAAC;QAE9E,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;QAE1B,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,6FAA6F;QAE9G,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,EAAE,iCAAiC,CAAC,CAAC;QAEtE,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;QAE1B,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,6FAA6F;QAE9G,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,EAAE,kCAAkC,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK;QACpD,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,MAAM,aAAa,GAA0B,KAAK,IAAI,EAAE;YACtD,WAAW,EAAE,CAAC;YACd,OAAO;gBACL,IAAI,EAAE,GAAG;gBACT,OAAO,EAAE;oBACP,mBAAmB,EAAE,iBAAiB;iBACvC;gBACD,MAAM,EAAE;oBACN;wBACE,IAAI,EAAE,KAAK;qBACZ;iBACF;gBACD,SAAS,EAAE,CAAC;aACb,CAAC;QACJ,CAAC,CAAC;QAEF,MAAM,OAAO,GAAgB;YAC3B,WAAW,EAAE,IAAI;SAClB,CAAC;QAEF,MAAM,OAAO,GAAG,IAAI,4BAA4B,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAEzE,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,EAAE,yCAAyC,CAAC,CAAC;QAE9E,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;QAE1B,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,6FAA6F;QAE9G,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,EAAE,4CAA4C,CAAC,CAAC;QAEjF,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC;QAE1B,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,6FAA6F;QAE9G,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,EAAE,iDAAiD,CAAC,CAAC;IACxF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport {\n  FetchFunctionCallback,\n  DefaultQueryExecutionContext\n} from \"../../../src/queryExecutionContext\";\nimport { FeedOptions } from \"../../../src\";\nimport assert from \"assert\";\nimport { sleep } from \"../../../src/common\";\n\ndescribe(\"defaultQueryExecutionContext\", function() {\n  it(\"should not buffer items if bufferItems is false\", async function() {\n    let calledCount = 0;\n    const fetchFunction: FetchFunctionCallback = async () => {\n      calledCount++;\n      return {\n        code: 200,\n        headers: {\n          \"x-ms-continuation\": \"any random text\"\n        },\n        result: [\n          {\n            item: \"foo\"\n          }\n        ],\n        substatus: 0\n      };\n    };\n\n    const options: FeedOptions = {\n      bufferItems: false\n    };\n\n    const context = new DefaultQueryExecutionContext(options, fetchFunction);\n\n    assert.strictEqual(calledCount, 0, \"Nothing should be fetched at this point\");\n\n    await context.fetchMore();\n\n    await sleep(10); // small sleep to make sure we give up event loop so any other fetch functions can get called\n\n    assert.strictEqual(calledCount, 1, \"Should have only fetched 1 page\");\n\n    await context.fetchMore();\n\n    await sleep(10); // small sleep to make sure we give up event loop so any other fetch functions can get called\n\n    assert.strictEqual(calledCount, 2, \"Should have only fetched 2 pages\");\n  });\n\n  it(\"should buffer items if bufferItems is true\", async function() {\n    let calledCount = 0;\n    const fetchFunction: FetchFunctionCallback = async () => {\n      calledCount++;\n      return {\n        code: 200,\n        headers: {\n          \"x-ms-continuation\": \"any random text\"\n        },\n        result: [\n          {\n            item: \"foo\"\n          }\n        ],\n        substatus: 0\n      };\n    };\n\n    const options: FeedOptions = {\n      bufferItems: true\n    };\n\n    const context = new DefaultQueryExecutionContext(options, fetchFunction);\n\n    assert.strictEqual(calledCount, 0, \"Nothing should be fetched at this point\");\n\n    await context.fetchMore();\n\n    await sleep(10); // small sleep to make sure we give up event loop so any other fetch functions can get called\n\n    assert.strictEqual(calledCount, 2, \"Should have fetched 2 pages (one buffered)\");\n\n    await context.fetchMore();\n\n    await sleep(10); // small sleep to make sure we give up event loop so any other fetch functions can get called\n\n    assert.strictEqual(calledCount, 3, \"Should have only fetched 3 pages (one buffered)\");\n  });\n});\n"]}