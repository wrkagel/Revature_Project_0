{"version":3,"file":"sasToken.spec.js","sourceRoot":"","sources":["../../../../test/internal/unit/sasToken.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EAAE,SAAS,EAAE,eAAe,EAAE,MAAM,sCAAsC,CAAC;AAClF,OAAO,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAC;AAC7D,OAAO,EAAE,2BAA2B,EAAE,MAAM,6BAA6B,CAAC;AAG1E,QAAQ,CAAC,IAAI,CAAC,yBAAyB,EAAE;IACvC,MAAM,kBAAkB,GAAuB;QAC7C,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,EAAE;QACX,YAAY,EAAE,KAAK;QACnB,aAAa,EAAE,OAAO;QACtB,YAAY,EAAE,uBAAuB;QACrC,uBAAuB,EAAE,EAAE;QAC3B,SAAS,EAAE,IAAI,IAAI,EAAE;QACrB,UAAU,EAAE,IAAI,IAAI,EAAE;QACtB,OAAO,EAAE,CAAC;QACV,uBAAuB,EAAE,sBAAsB,CAAC,gBAAgB;QAChE,uBAAuB,EAAE,CAAC;QAC1B,oBAAoB,EAAE,sBAAsB,CAAC,mBAAmB;QAChE,oBAAoB,EAAE,CAAC;KACxB,CAAC;IAEF,EAAE,CAAC,8CAA8C,EAAE,KAAK;QACtD,MAAM,GAAG,GAAG,MAAM,2BAA2B,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;QAE7E,2FAA2F;QAC3F,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,GAAG,CAAC;QAC/C,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC;YAC9B,QAAQ;YACR,GAAG,EAAE,GAAG;YACR,gBAAgB,EAAE,EAAE,kCAAkC,EAAE,KAAK,EAAE;SAChE,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACvE,MAAM,OAAO,GAAG;YACd,EAAE,EAAE,GAAG;YACP,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,0CAA0C;YACvD,UAAU,EAAE,KAAK;SAClB,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,SAAS,KAAK,IAAI,EAAE,qDAAqD,CAAC,CAAC;QAElF,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;QACxD,MAAM,CAAC,SAAS,KAAK,GAAG,EAAE,2CAA2C,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK;QAClD,MAAM,cAAc,GAAG,IAAI,YAAY,CAAC;YACtC,QAAQ;YACR,GAAG,EAAE,eAAe;YACpB,gBAAgB,EAAE,EAAE,kCAAkC,EAAE,KAAK,EAAE;SAChE,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,MAAM,cAAc,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;QAChE,MAAM,CAAC,SAAS,KAAK,GAAG,EAAE,2CAA2C,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { CosmosClient } from \"../../../src\";\nimport { endpoint } from \"../../public/common/_testConfig\";\nimport { masterKey, userSasTokenKey } from \"../../public/common/_fakeTestSecrets\";\nimport { SasTokenPermissionKind } from \"../../../src/common\";\nimport { createAuthorizationSasToken } from \"../../../src/utils/SasToken\";\nimport { SasTokenProperties } from \"../../../src/client/SasToken/SasTokenProperties\";\n\ndescribe.skip(\"SAS Token Authorization\", function() {\n  const sasTokenProperties = <SasTokenProperties>{\n    user: \"user1\",\n    userTag: \"\",\n    databaseName: \"db1\",\n    containerName: \"coll1\",\n    resourcePath: \"/dbs/db1/colls/coll1/\",\n    partitionKeyValueRanges: [],\n    startTime: new Date(),\n    expiryTime: new Date(),\n    keyType: 0,\n    controlPlaneReaderScope: SasTokenPermissionKind.ContainerReadAny,\n    controlPlaneWriterScope: 0,\n    dataPlaneReaderScope: SasTokenPermissionKind.ContainerFullAccess,\n    dataPlaneWriterScope: 0\n  };\n\n  it(\"should connect with sas token properties set\", async function() {\n    const key = await createAuthorizationSasToken(masterKey, sasTokenProperties);\n\n    // If connecting to the Cosmos DB Emulator, disable TLS verification for your node process:\n    process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n    const client = new CosmosClient({\n      endpoint,\n      key: key,\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    });\n\n    const database = client.database(sasTokenProperties.databaseName);\n    const container = database.container(sasTokenProperties.containerName);\n    const newItem = {\n      id: \"4\",\n      category: \"fun\",\n      name: \"Cosmos DB\",\n      description: \"Complete Cosmos DB Node.js Quickstart âš¡.\",\n      isComplete: false\n    };\n\n    const item = await container.items.create(newItem);\n    assert(undefined !== item, \"Should create an item based on sas token properties\");\n\n    const dbs = await client.databases.readAll().fetchAll();\n    assert(undefined !== dbs, \"Should be able to fetch list of databases\");\n  });\n\n  it(\"should connect when a user set sas token\", async function() {\n    const sasTokenClient = new CosmosClient({\n      endpoint,\n      key: userSasTokenKey,\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    });\n\n    const dbs = await sasTokenClient.databases.readAll().fetchAll();\n    assert(undefined !== dbs, \"Should be able to fetch list of databases\");\n  });\n});\n"]}