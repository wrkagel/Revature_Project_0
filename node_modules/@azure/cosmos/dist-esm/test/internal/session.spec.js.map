{"version":3,"file":"session.spec.js","sourceRoot":"","sources":["../../../test/internal/session.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { ClientContext, Container, PluginConfig, PluginOn } from \"../../src\";\nimport { OperationType, ResourceType } from \"../../src/common\";\nimport { ConsistencyLevel } from \"../../src\";\nimport { CosmosClient } from \"../../src\";\nimport { SessionContainer } from \"../../src/session/sessionContainer\";\nimport { endpoint } from \"../public/common/_testConfig\";\nimport { masterKey } from \"../public/common/_fakeTestSecrets\";\nimport { addEntropy, getTestDatabase, removeAllDatabases } from \"../public/common/TestHelpers\";\nimport { RequestContext } from \"../../src\";\nimport { Response } from \"../../src/request/Response\";\n\ndescribe(\"New session token\", function() {\n  it(\"preserves tokens\", async function() {\n    let response: Response<any>;\n    let rqContext: RequestContext;\n    const plugins: PluginConfig[] = [\n      {\n        on: PluginOn.request,\n        plugin: async (context, next) => {\n          rqContext = context;\n          response = await next(context);\n          return response;\n        }\n      }\n    ];\n    const sessionClient = new CosmosClient({\n      endpoint,\n      key: masterKey,\n      consistencyLevel: ConsistencyLevel.Session,\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false },\n      plugins\n    });\n    const containerId = \"sessionTestColl\";\n\n    const containerDefinition = {\n      id: containerId,\n      partitionKey: { paths: [\"/id\"] }\n    };\n    const containerOptions = { offerThroughput: 25100 };\n\n    const clientContext: ClientContext = (sessionClient as any).clientContext;\n    const sessionContainer: SessionContainer = (clientContext as any).sessionContainer;\n    const database = await getTestDatabase(\"session test\", sessionClient);\n\n    const { resource: createdContainerDef } = await database.containers.create(\n      containerDefinition,\n      containerOptions\n    );\n    const container = database.container(createdContainerDef.id);\n\n    const resp = await container.items.create({ id: \"1\" });\n    await container.item(\"1\").read();\n\n    await container.item(\"1\").read();\n    const responseToken = resp.headers[\"x-ms-session-token\"];\n    const token = sessionContainer.get({\n      isNameBased: true,\n      operationType: OperationType.Create,\n      resourceAddress: container.url,\n      resourceType: ResourceType.item,\n      resourceId: \"1\"\n    });\n    assert.equal(responseToken, token);\n    assert.equal(responseToken, rqContext?.headers[\"x-ms-session-token\"]);\n  });\n});\n\n// For some reason this test does not pass against the emulator. Skipping it for now\ndescribe.skip(\"Session Token\", function(this: Suite) {\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  it(\"retries session not found successfully\", async function() {\n    const clientA = new CosmosClient({\n      endpoint,\n      key: masterKey,\n      consistencyLevel: ConsistencyLevel.Session,\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    });\n    // Create a second client with a plugin that simulates \"Session Not Found\" error\n    const clientB = new CosmosClient({\n      endpoint,\n      key: masterKey,\n      consistencyLevel: ConsistencyLevel.Session,\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false },\n      plugins: [\n        {\n          on: \"request\",\n          plugin: async (context, next) => {\n            // Simulate a \"Session Not Found\" error by manually making the client session token *way* ahead of any available session on the server\n            // This is just a way to simulate the error. Getting this to happen in practice is difficult and only usually occurs cross region where there is significant replication lag\n            if (context.headers[\"x-ms-session-token\"]) {\n              context.headers[\"x-ms-session-token\"] = \"0:0#900000#3=8600000#10=-1\";\n            }\n            const response = await next(context);\n            return response;\n          }\n        }\n      ]\n    });\n\n    const dbId = addEntropy(\"sessionTestDB\");\n    const containerId = addEntropy(\"sessionTestContainer\");\n\n    // Create Database and Container\n    const { database } = await clientA.databases.createIfNotExists({\n      id: dbId\n    });\n    const { container } = await database.containers.createIfNotExists({\n      id: containerId\n    });\n\n    // Create items using both clients so they each establish a session with the backend\n    const container2 = clientB.database(dbId).container(containerId);\n    await Promise.all([createItem(container), createItem(container2)]);\n\n    // Create an item using client\n    const id = await createItem(container);\n    const { resource, statusCode } = await container2.item(id).read();\n    console.log(statusCode, resource);\n    assert.ok(resource);\n    assert.strictEqual(statusCode, 200);\n  });\n});\n\nasync function createItem(container: Container) {\n  const {\n    resource: { id }\n  } = await container.items.create({\n    id: (Math.random() + 1).toString(36).substring(7)\n  });\n  return id;\n}\n"]}