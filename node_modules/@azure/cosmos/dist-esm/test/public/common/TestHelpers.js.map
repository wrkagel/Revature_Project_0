{"version":3,"file":"TestHelpers.js","sourceRoot":"","sources":["../../../../test/public/common/TestHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport {\n  Container,\n  CosmosClient,\n  Database,\n  DatabaseDefinition,\n  PermissionDefinition,\n  RequestOptions,\n  Response,\n  UserDefinition\n} from \"../../../src\";\nimport { ItemDefinition, ItemResponse, PermissionResponse, Resource, User } from \"../../../src\";\nimport { UserResponse } from \"../../../src\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\nimport { DatabaseRequest } from \"../../../src\";\nimport { ContainerRequest } from \"../../../src\";\n\nconst defaultClient = new CosmosClient({\n  endpoint,\n  key: masterKey,\n  connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n});\n\nexport function addEntropy(name: string): string {\n  return name + getEntropy();\n}\n\nexport function getEntropy(): string {\n  return `${Math.floor(Math.random() * 10000)}`;\n}\n\nexport async function removeAllDatabases(client: CosmosClient = defaultClient): Promise<void> {\n  try {\n    const { resources: databases } = await client.databases.readAll().fetchAll();\n    const length = databases.length;\n\n    if (length === 0) {\n      return;\n    }\n\n    await Promise.all(\n      databases.map<Promise<Response<DatabaseDefinition>>>(async (database: DatabaseDefinition) =>\n        client.database(database.id).delete()\n      )\n    );\n  } catch (err) {\n    console.log(\"An error occured\", err);\n    assert.fail(err);\n    throw err;\n  }\n}\n\nexport async function getTestDatabase(\n  testName: string,\n  client: CosmosClient = defaultClient,\n  attrs?: Partial<DatabaseRequest>\n): Promise<Database> {\n  const entropy = Math.floor(Math.random() * 10000);\n  const id = `${testName.replace(\" \", \"\").substring(0, 30)}${entropy}`;\n  await client.databases.create({ id, ...attrs });\n  return client.database(id);\n}\n\nexport async function getTestContainer(\n  testName: string,\n  client: CosmosClient = defaultClient,\n  containerDef?: ContainerRequest,\n  options?: RequestOptions\n): Promise<Container> {\n  const db = await getTestDatabase(testName, client);\n  const entropy = Math.floor(Math.random() * 10000);\n  const id = `${testName.replace(\" \", \"\").substring(0, 30)}${entropy}`;\n  await db.containers.create({ ...containerDef, ...{ id } }, options);\n  return db.container(id);\n}\n\nexport async function bulkInsertItems(\n  container: Container,\n  documents: any[]\n): Promise<Array<ItemDefinition & Resource>> {\n  return Promise.all(\n    documents.map(async (doc) => {\n      const { resource: document } = await container.items.create(doc);\n      return document;\n    })\n  );\n}\n\nexport async function bulkReadItems(\n  container: Container,\n  documents: any[],\n  partitionKeyProperty: string\n): Promise<void[]> {\n  return Promise.all(\n    documents.map(async (document) => {\n      const partitionKey = Object.prototype.hasOwnProperty.call(document, partitionKeyProperty)\n        ? document[partitionKeyProperty]\n        : undefined;\n\n      // TODO: should we block or do all requests in parallel?\n      const { resource: doc } = await container.item(document.id, partitionKey).read();\n      assert.deepStrictEqual(doc, document);\n    })\n  );\n}\n\nexport async function bulkReplaceItems(\n  container: Container,\n  documents: any[],\n  partitionKeyProperty: string\n): Promise<any[]> {\n  return Promise.all(\n    documents.map(async (document) => {\n      const partitionKey = Object.prototype.hasOwnProperty.call(document, partitionKeyProperty)\n        ? document[partitionKeyProperty]\n        : undefined;\n      const { resource: doc } = await container.item(document.id, partitionKey).replace(document);\n      const { _etag: _1, _ts: _2, ...expectedModifiedDocument } = document; // eslint-disable-line @typescript-eslint/no-unused-vars\n      const { _etag: _4, _ts: _3, ...actualModifiedDocument } = doc; // eslint-disable-line @typescript-eslint/no-unused-vars\n      assert.deepStrictEqual(expectedModifiedDocument, actualModifiedDocument);\n      return doc;\n    })\n  );\n}\n\nexport async function bulkDeleteItems(\n  container: Container,\n  documents: any[],\n  partitionKeyProperty: string\n): Promise<void> {\n  await Promise.all(\n    documents.map(async (document) => {\n      const partitionKey = Object.prototype.hasOwnProperty.call(document, partitionKeyProperty)\n        ? document[partitionKeyProperty]\n        : undefined;\n\n      await container.item(document.id, partitionKey).delete();\n    })\n  );\n}\n\nexport async function bulkQueryItemsWithPartitionKey(\n  container: Container,\n  documents: any[],\n  partitionKeyPropertyName: string\n): Promise<void> {\n  for (const document of documents) {\n    if (!Object.prototype.hasOwnProperty.call(document, partitionKeyPropertyName)) {\n      continue;\n    }\n\n    const querySpec = {\n      query: \"SELECT * FROM root r WHERE r.\" + partitionKeyPropertyName + \"=@key\",\n      parameters: [\n        {\n          name: \"@key\",\n          value: document[partitionKeyPropertyName]\n        }\n      ]\n    };\n\n    const { resources } = await container.items.query(querySpec).fetchAll();\n    assert.equal(resources.length, 1, \"Expected exactly 1 document\");\n    assert.equal(JSON.stringify(resources[0]), JSON.stringify(document));\n  }\n}\n\n// Item\nexport async function createOrUpsertItem(\n  container: Container,\n  body: unknown,\n  options: RequestOptions,\n  isUpsertTest: boolean\n): Promise<ItemResponse<any>> {\n  if (isUpsertTest) {\n    return container.items.upsert(body, options);\n  } else {\n    return container.items.create(body, options);\n  }\n}\n\nexport async function replaceOrUpsertItem(\n  container: Container,\n  body: unknown,\n  options: RequestOptions,\n  isUpsertTest: boolean\n): Promise<ItemResponse<any>> {\n  if (isUpsertTest) {\n    return container.items.upsert(body, options);\n  } else {\n    const bodyWithId = body as { id: string };\n    return container.item(bodyWithId.id, undefined).replace(body, options);\n  }\n}\n\n// User\nexport function createOrUpsertUser(\n  database: Database,\n  body: UserDefinition,\n  options: RequestOptions,\n  isUpsertTest: boolean\n): Promise<UserResponse> {\n  if (isUpsertTest) {\n    return database.users.upsert(body, options);\n  } else {\n    return database.users.create(body, options);\n  }\n}\n\nexport function createOrUpsertPermission(\n  user: User,\n  body: PermissionDefinition,\n  options: RequestOptions,\n  isUpsertTest: boolean\n): Promise<PermissionResponse> {\n  if (isUpsertTest) {\n    return user.permissions.upsert(body, options);\n  } else {\n    return user.permissions.create(body, options);\n  }\n}\n\nexport function replaceOrUpsertPermission(\n  user: User,\n  body: PermissionDefinition,\n  options: RequestOptions,\n  isUpsertTest: boolean\n): Promise<PermissionResponse> {\n  if (isUpsertTest) {\n    return user.permissions.upsert(body, options);\n  } else {\n    return user.permission(body.id).replace(body, options);\n  }\n}\n\nexport function generateDocuments(\n  docSize: number\n): {\n  id: string;\n  name: string;\n  spam: string;\n  cnt: number;\n  key: string;\n  spam2: string | number;\n  spam3: string;\n  boolVar: boolean;\n  number: number;\n}[] {\n  const docs = [];\n  for (let i = 0; i < docSize; i++) {\n    const d = {\n      id: i.toString(),\n      name: \"sample document\",\n      spam: \"eggs\" + i.toString(),\n      cnt: i,\n      key: \"value\",\n      spam2: i === 3 ? \"eggs\" + i.toString() : i,\n      spam3: `eggs${i % 3}`,\n      boolVar: i % 2 === 0,\n      number: 1.1 * i\n    };\n    docs.push(d);\n  }\n  return docs;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport async function assertThrowsAsync(test: () => Promise<any>, error?: any): Promise<string> {\n  try {\n    await test();\n  } catch (e) {\n    if (!error || e instanceof error) return \"everything is fine\";\n  }\n  throw new assert.AssertionError({\n    message: \"Missing rejection\" + (error ? \" with \" + error.name : \"\")\n  });\n}\n"]}