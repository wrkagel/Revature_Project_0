import { Container, CosmosClient, Database, PermissionDefinition, RequestOptions, UserDefinition } from "../../../src";
import { ItemDefinition, ItemResponse, PermissionResponse, Resource, User } from "../../../src";
import { UserResponse } from "../../../src";
import { DatabaseRequest } from "../../../src";
import { ContainerRequest } from "../../../src";
export declare function addEntropy(name: string): string;
export declare function getEntropy(): string;
export declare function removeAllDatabases(client?: CosmosClient): Promise<void>;
export declare function getTestDatabase(testName: string, client?: CosmosClient, attrs?: Partial<DatabaseRequest>): Promise<Database>;
export declare function getTestContainer(testName: string, client?: CosmosClient, containerDef?: ContainerRequest, options?: RequestOptions): Promise<Container>;
export declare function bulkInsertItems(container: Container, documents: any[]): Promise<Array<ItemDefinition & Resource>>;
export declare function bulkReadItems(container: Container, documents: any[], partitionKeyProperty: string): Promise<void[]>;
export declare function bulkReplaceItems(container: Container, documents: any[], partitionKeyProperty: string): Promise<any[]>;
export declare function bulkDeleteItems(container: Container, documents: any[], partitionKeyProperty: string): Promise<void>;
export declare function bulkQueryItemsWithPartitionKey(container: Container, documents: any[], partitionKeyPropertyName: string): Promise<void>;
export declare function createOrUpsertItem(container: Container, body: unknown, options: RequestOptions, isUpsertTest: boolean): Promise<ItemResponse<any>>;
export declare function replaceOrUpsertItem(container: Container, body: unknown, options: RequestOptions, isUpsertTest: boolean): Promise<ItemResponse<any>>;
export declare function createOrUpsertUser(database: Database, body: UserDefinition, options: RequestOptions, isUpsertTest: boolean): Promise<UserResponse>;
export declare function createOrUpsertPermission(user: User, body: PermissionDefinition, options: RequestOptions, isUpsertTest: boolean): Promise<PermissionResponse>;
export declare function replaceOrUpsertPermission(user: User, body: PermissionDefinition, options: RequestOptions, isUpsertTest: boolean): Promise<PermissionResponse>;
export declare function generateDocuments(docSize: number): {
    id: string;
    name: string;
    spam: string;
    cnt: number;
    key: string;
    spam2: string | number;
    spam3: string;
    boolVar: boolean;
    number: number;
}[];
export declare function assertThrowsAsync(test: () => Promise<any>, error?: any): Promise<string>;
//# sourceMappingURL=TestHelpers.d.ts.map