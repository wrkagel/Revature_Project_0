{"version":3,"file":"crossPartition.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/crossPartition.spec.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAE7B,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAGnD,OAAO,EACL,eAAe,EACf,gBAAgB,EAChB,kBAAkB,EAClB,iBAAiB,EAClB,MAAM,uBAAuB,CAAC;AAG/B,SAAS,OAAO,CAAC,GAAW;IAC1B,OAAO,UAAS,CAAM,EAAE,CAAM;QAC5B,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE;YACnB,OAAO,CAAC,CAAC;SACV;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE;YACnB,OAAO,CAAC,CAAC,CAAC;SACX;QACD,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;AACJ,CAAC;AAED,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,OAAO,CAAC,CAAC;IAEnD,QAAQ,CAAC,gBAAgB,EAAE;QACzB,MAAM,mBAAmB,GAAG,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAElD,MAAM,mBAAmB,GAAwB;YAC/C,EAAE,EAAE,kBAAkB;YACtB,cAAc,EAAE;gBACd,aAAa,EAAE;oBACb;wBACE,IAAI,EAAE,GAAG;wBACT,OAAO,EAAE;4BACP;gCACE,IAAI,EAAE,SAAS,CAAC,KAAK;gCACrB,QAAQ,EAAE,QAAQ,CAAC,MAAM;6BAC1B;4BACD;gCACE,IAAI,EAAE,SAAS,CAAC,KAAK;gCACrB,QAAQ,EAAE,QAAQ,CAAC,MAAM;6BAC1B;yBACF;qBACF;iBACF;aACF;YACD,YAAY,EAAE;gBACZ,KAAK,EAAE,CAAC,KAAK,CAAC;aACf;SACF,CAAC;QACF,MAAM,gBAAgB,GAAG,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;QAEpD,IAAI,SAAoB,CAAC;QAEzB,+BAA+B;QAC/B,4BAA4B;QAC5B,6BAA6B;QAC7B,4CAA4C;QAC5C,MAAM,CAAC,KAAK;YACV,MAAM,kBAAkB,EAAE,CAAC;YAC3B,SAAS,GAAG,MAAM,gBAAgB,CAChC,mBAAmB,EACnB,SAAS,EACT,mBAAmB,EACnB,gBAAgB,CACjB,CAAC;YACF,MAAM,eAAe,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,MAAM,eAAe,GAAG,UACtB,aAAoB,EACpB,gBAA0B,EAC1B,aAAqB;YAErB,MAAM,CAAC,KAAK,CACV,aAAa,CAAC,MAAM,EACpB,aAAa;gBACX,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,CAAC;gBAC7C,mBAAmB,CAAC,MAAM,EAC5B,mEAAmE,CACpE,CAAC;YACF,IAAI,gBAAgB,EAAE;gBACpB,MAAM,CAAC,eAAe,CACpB,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EACzC,gBAAgB,CACjB,CAAC;aACH;QACH,CAAC,CAAC;QAEF,MAAM,gBAAgB,GAAG,KAAK,WAC5B,aAAiC,EACjC,OAAY,EACZ,gBAA0B,EAC1B,aAAqB;YAErB,OAAO,CAAC,YAAY,GAAG,SAAS,CAAC;YACjC,MAAM,QAAQ,GAAG,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;YAChD,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,QAAQ,CAAC;YACxC,MAAM,CAAC,KAAK,CACV,OAAO,CAAC,MAAM,EACd,aAAa;gBACX,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,CAAC;gBAC7C,mBAAmB,CAAC,MAAM,EAC5B,2BAA2B,CAC5B,CAAC;YACF,MAAM,CAAC,KAAK,CACV,aAAa,CAAC,cAAc,EAAE,EAC9B,KAAK,EACL,yCAAyC,CAC1C,CAAC;YAEF,eAAe,CAAC,OAAO,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;YAC1D,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;QAEF,MAAM,kCAAkC,GAAG,KAAK,WAC9C,OAAY,EACZ,aAAiC,EACjC,gBAA0B,EAC1B,gBAAmC,EACnC,aAAqB,EACrB,qBAA6B;YAE7B,MAAM,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;YACzC,IAAI,6BAA6B,GAAG,CAAC,CAAC;YACtC,IAAI,kBAAkB,GAAG,CAAC,CAAC;YAC3B,IAAI,mBAAmB,GAAU,EAAE,CAAC;YACpC,MAAM,cAAc,GAClB,aAAa;gBACb,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,CAAC;gBAC7C,mBAAmB,CAAC,MAAM,CAAC;YAE7B,OAAO,aAAa,CAAC,cAAc,EAAE,EAAE;gBACrC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,MAAM,aAAa,CAAC,SAAS,EAAE,CAAC;gBAC5F,kBAAkB,EAAE,CAAC;gBACrB,MAAM,CAAC,YAAY,EAAE,sCAAsC,CAAC,CAAC;gBAE7D,IAAI,mBAAmB,CAAC,MAAM,GAAG,cAAc,EAAE;oBAC/C,MAAM;iBACP;gBACD,IAAI,OAAO,EAAE;oBACX,mBAAmB,GAAG,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBAC3D;gBACD,6BAA6B,IAAI,aAAa,CAAC;gBAC/C,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC;gBAE3B,IAAI,mBAAmB,CAAC,MAAM,GAAG,cAAc,EAAE;oBAC/C,IAAI,OAAO,EAAE;wBACX,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,QAAQ,EAAE,uCAAuC,CAAC,CAAC;qBAC7E;oBACD,MAAM,CAAC,aAAa,CAAC,cAAc,EAAE,EAAE,uCAAuC,CAAC,CAAC;iBACjF;qBAAM;oBACL,kBAAkB;oBAClB,MAAM,CAAC,KAAK,CACV,cAAc,EACd,mBAAmB,CAAC,MAAM,EAC1B,2CAA2C,CAC5C,CAAC;iBACH;aACF;YAED,IAAI,qBAAqB,EAAE;gBACzB,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,CAAC;aACzD;YAED,kBAAkB;YAClB,eAAe,CAAC,mBAAmB,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;YACtE,MAAM,CAAC,KAAK,CACV,aAAa,CAAC,cAAc,EAAE,EAC9B,KAAK,EACL,yCAAyC,CAC1C,CAAC;YACF,MAAM,CAAC,6BAA6B,GAAG,CAAC,CAAC,CAAC;YAC1C,MAAM,iBAAiB,GACrB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,aAAa,GAAG,6BAA6B,CAAC;gBACxE,6BAA6B,CAAC;YAChC,MAAM,CACJ,iBAAiB,IAAI,IAAI,EACzB,kGAAkG,CACnG,CAAC;QACJ,CAAC,CAAC;QAEF,MAAM,qBAAqB,GAAG,KAAK,WACjC,aAAiC,EACjC,gBAAuB,EACvB,cAAsB;;YAEtB,MAAM,cAAc,GAClB,cAAc;gBACd,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,CAAC;gBAC7C,mBAAmB,CAAC,MAAM,CAAC;YAC7B,MAAM,OAAO,GAAU,EAAE,CAAC;YAC1B,IAAI,SAAS,GAAG,KAAK,CAAC;;gBACtB,KAAyC,IAAA,KAAA,cAAA,aAAa,CAAC,gBAAgB,EAAE,CAAA,IAAA;oBAA9D,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,WAAA,CAAA;oBACnC,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,4CAA4C,CAAC,CAAC;oBAC7E,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;oBACvB,IAAI,OAAO,CAAC,MAAM,KAAK,cAAc,EAAE;wBACrC,SAAS,GAAG,IAAI,CAAC;qBAClB;iBACF;;;;;;;;;YACD,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,+CAA+C,CAAC,CAAC;YAC/E,eAAe,CAAC,OAAO,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;QAC7D,CAAC,CAAC;QAEF,MAAM,8BAA8B,GAAG,KAAK,WAAU,EACpD,KAAK,EACL,OAAO,EACP,gBAAgB,EAChB,aAAa,EACb,WAAW,EACX,qBAAqB,EAQtB;YACC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC;YACpC,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAC7C,aAAa,EACb,OAAO,EACP,gBAAgB,EAChB,aAAa,CACd,CAAC;YACF,IAAI,WAAW,EAAE;gBACf,MAAM,iBAAiB,GACrB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,aAAa,GAAG,WAAW,CAAC,GAAG,WAAW,CAAC;gBACvE,MAAM,CACJ,iBAAiB,IAAI,IAAI,EACzB,sGAAsG,iBAAiB;oBACrH,GAAG,EAAE,CACR,CAAC;aACH;YACD,aAAa,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,kCAAkC,CACtC,OAAO,EACP,aAAa,EACb,gBAAgB,EAChB,gBAAgB,EAChB,aAAa,EACb,qBAAqB,CACtB,CAAC;YACF,aAAa,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,qBAAqB,CAAC,aAAa,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;QAC9E,CAAC,CAAC;QAEF,EAAE,CAAC,mEAAmE,EAAE,KAAK;YAC3E,yCAAyC;YACzC,MAAM,KAAK,GAAG,sBAAsB,CAAC;YACrC,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC;aAC1B,CAAC;YAEF,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;aACR,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mEAAmE,EAAE,KAAK;YAC3E,yCAAyC;YACzC,MAAM,KAAK,GAAG,sBAAsB,CAAC;YACrC,MAAM,OAAO,GAAgB;gBAC3B,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC,CAAC;gBAC1B,cAAc,EAAE,IAAI;gBACpB,oBAAoB,EAAE,IAAI;aAC3B,CAAC;YAEF,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;aACR,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK;YAC1E,yCAAyC;YACzC,MAAM,KAAK,GAAG,sBAAsB,CAAC;YACrC,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC;aAC1B,CAAC;YAEF,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;aACR,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK;YAC1E,yCAAyC;YACzC,MAAM,KAAK,GAAG,sBAAsB,CAAC;YACrC,MAAM,OAAO,GAAgB;gBAC3B,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC;gBACzB,WAAW,EAAE,IAAI;aAClB,CAAC;YAEF,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;aACR,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yEAAyE,EAAE,KAAK;YACjF,yCAAyC;YACzC,MAAM,KAAK,GAAG,sCAAsC,CAAC;YACrD,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC;aAC1B,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBACjF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oFAAoF,EAAE,KAAK;YAC5F,yCAAyC;YACzC,MAAM,KAAK,GAAG,sCAAsC,CAAC;YACrD,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC;aAC1B,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBACjF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;gBACpC,WAAW,EAAE,EAAE;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yEAAyE,EAAE,KAAK;YACjF,yCAAyC;YACzC,MAAM,KAAK,GAAG,sCAAsC,CAAC;YACrD,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC;aAC1B,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBACjF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0EAA0E,EAAE,KAAK;YAClF,yCAAyC;YACzC,MAAM,KAAK,GAAG,sCAAsC,CAAC;YACrD,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC,CAAC;aAC3B,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBACjF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK;YACjC,yCAAyC;YACzC,MAAM,KAAK,GAAG,2CAA2C,CAAC;YAC1D,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,uCAAuC;YACvC,MAAM,8BAA8B,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK;YACzC,yCAAyC;YACzC,MAAM,KAAK,GAAG,iEAAiE,CAAC;YAChF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAEvD,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK;YAC1C,yCAAyC;YACzC,MAAM,KAAK,GAAG,4DAA4D,CAAC;YAC3E,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC;gBACzB,WAAW,EAAE,IAAI;aAClB,CAAC;YAEF,MAAM,kBAAkB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAEvD,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK;YACvD,yCAAyC;YACzC,MAAM,KAAK,GAAG,4DAA4D,CAAC;YAC3E,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAEvD,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK;YACxD,yCAAyC;YACzC,MAAM,KAAK,GAAG,4DAA4D,CAAC;YAC3E,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,EAAE;aACjB,CAAC;YAEF,MAAM,kBAAkB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAEvD,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK;YACjD,yCAAyC;YACzC,MAAM,KAAK,GAAG,sCAAsC,CAAC;YACrD,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBACjF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK;YACvC,wBAAwB;YACxB,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,sCAAsC;aAC9C,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBACjF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK;YACzC,qDAAqD;YACrD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,0CAA0C;aAClD,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBACjF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK;YAC1C,sDAAsD;YACtD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,2CAA2C;aACnD,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB;iBAC3C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACrB,GAAG,CAAC,UAAS,CAAC;gBACb,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC;iBACD,OAAO,EAAE,CAAC;YAEb,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK;YACnC,gFAAgF;YAChF,MAAM,QAAQ,GAAG,CAAC,CAAC;YACnB,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,6CAA6C,EAAE,QAAQ,CAAC;aAC5E,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB;iBAC3C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACrB,GAAG,CAAC,UAAS,CAAC;gBACb,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAEtB,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK;YACxE,gFAAgF;YAChF,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,eAAe;YACf,MAAM,CAAC,QAAQ,GAAG,mBAAmB,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;YACrE,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,6CAA6C,EAAE,QAAQ,CAAC;aAC5E,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBACjF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK;YAC5D,cAAc;YACd,MAAM,QAAQ,GAAG,CAAC,CAAC;YACnB,eAAe;YACf,MAAM,CAAC,QAAQ,GAAG,mBAAmB,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;YAErE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,6BAA6B,EAAE,QAAQ,CAAC,CAAC;YACnE,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;gBACf,sBAAsB,EAAE,CAAC;gBACzB,cAAc,EAAE,IAAI;gBACpB,WAAW,EAAE,IAAI;aAClB,CAAC;YAEF,sCAAsC;YACtC,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAE5D,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;YAC9D,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAEvC,oBAAoB;YACpB,MAAM,SAAS,GAAQ,EAAE,CAAC;YAC1B,OAAO,CAAC,OAAO,CAAC,UAAS,IAAI;gBAC3B,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;YAC5B,CAAC,CAAC,CAAC;YACH,8BAA8B;YAC9B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oBAAoB,EAAE,KAAK;YAC5B,cAAc;YACd,MAAM,QAAQ,GAAG,CAAC,CAAC;YACnB,eAAe;YACf,MAAM,CAAC,QAAQ,GAAG,mBAAmB,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;YAErE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,6BAA6B,EAAE,QAAQ,CAAC,CAAC;YACnE,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,sCAAsC;YACtC,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAE5D,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;YAC9D,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAEvC,oBAAoB;YACpB,MAAM,SAAS,GAAQ,EAAE,CAAC;YAC1B,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACvB,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;YAC5B,CAAC,CAAC,CAAC;YACH,8BAA8B;YAC9B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK;YAC9C,cAAc;YACd,MAAM,QAAQ,GAAG,CAAC,CAAC;YACnB,eAAe;YACf,MAAM,CAAC,QAAQ,GAAG,mBAAmB,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;YAErE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,6BAA6B,EAAE,QAAQ,CAAC,CAAC;YACnE,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,sCAAsC;YACtC,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAE5D,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;YAC9D,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAEvC,oBAAoB;YACpB,MAAM,SAAS,GAAQ,EAAE,CAAC;YAC1B,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACvB,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;YAC5B,CAAC,CAAC,CAAC;YACH,8BAA8B;YAC9B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK;YACzC,cAAc;YACd,MAAM,QAAQ,GAAG,CAAC,CAAC;YACnB,eAAe;YACf,MAAM,CAAC,QAAQ,GAAG,mBAAmB,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;YAErE,MAAM,SAAS,GAAiB;gBAC9B,KAAK,EAAE,6BAA6B;gBAEpC,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;aAC9C,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,sCAAsC;YACtC,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAEhE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;YAC9D,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAEvC,oBAAoB;YACpB,MAAM,SAAS,GAAQ,EAAE,CAAC;YAC1B,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACvB,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;YAC5B,CAAC,CAAC,CAAC;YACH,8BAA8B;YAC9B,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK;YACtD,oCAAoC;YACpC,MAAM,QAAQ,GAAG,CAAC,CAAC;YACnB,eAAe;YACf,MAAM,CAAC,QAAQ,GAAG,mBAAmB,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;YACrE,oCAAoC;YACpC,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,6CAA6C;gBAEpD,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;aAC9C,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB;iBAC3C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACrB,GAAG,CAAC,UAAS,CAAC;gBACb,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAEtB,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK;YACtD,yDAAyD;YACzD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,yDAAyD;gBAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;aACzC,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB;iBAC3C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACrB,MAAM,CAAC,UAAS,CAAC;gBAChB,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC,CAAC;iBACD,GAAG,CAAC,UAAS,CAAC;gBACb,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEL,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK;YACzE,iDAAiD;YACjD,oBAAoB;YACpB,MAAM,KAAK,GAAG;gBACZ,KAAK,EAAE,uCAAuC;aAC/C,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,sCAAsC;YACtC,IAAI;gBACF,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC5D,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;aAChC;YAAC,OAAO,GAAG,EAAE;gBACZ,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;aACjC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK;YACxC,yCAAyC;YACzC,MAAM,KAAK,GAAG,qCAAqC,CAAC;YACpD,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBAChF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK;YACtD,yCAAyC;YACzC,MAAM,KAAK,GAAG,wCAAwC,CAAC;YACvD,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,UAAS,CAAC;gBACnF,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK;gBACL,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK;YACxC,yCAAyC;YACzC,MAAM,KAAK,GAAG,yCAAyC,CAAC;YACxD,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAC5D,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;YAC9D,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAEzD,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,OAAO,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE;gBAC7B,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE;oBAC1B,MAAM;iBACP;gBACD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;gBACpC,KAAK,EAAE,CAAC;aACT;YAED,OAAO,KAAK,GAAG,OAAO,CAAC,MAAM,EAAE;gBAC7B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC;gBAC/B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;gBACpC,KAAK,EAAE,CAAC;aACT;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK;YACtC,MAAM,KAAK,GAAG,CAAC,CAAC;YAChB,MAAM,MAAM,GAAG,CAAC,CAAC;YAEjB,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,+BAA+B,MAAM,UAAU,KAAK,EAAE;aAC9D,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,aAAa,EAAE,CAAC;gBAChB,qBAAqB,EAAE,CAAC;aACzB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK;YACxC,MAAM,KAAK,GAAG,CAAC,CAAC;YAChB,MAAM,MAAM,GAAG,CAAC,CAAC;YAEjB,qDAAqD;YACrD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,kDAAkD,MAAM,UAAU,KAAK,EAAE;aACjF,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,aAAa,EAAE,CAAC;aACjB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,sDAAsD;QAEtD,EAAE,CAAC,2DAA2D,EAAE,KAAK;YACnE,MAAM,KAAK,GAAG,CAAC,CAAC;YAChB,MAAM,MAAM,GAAG,EAAE,CAAC;YAElB,qDAAqD;YACrD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,mDAAmD,MAAM,UAAU,KAAK,EAAE;aAClF,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB;iBAC3C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACrB,GAAG,CAAC,UAAS,CAAC;gBACb,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC;iBACD,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAEzB,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK;YAClE,MAAM,KAAK,GAAG,CAAC,CAAC;YAChB,MAAM,MAAM,GAAG,CAAC,CAAC;YAEjB,qDAAqD;YACrD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,mDAAmD,MAAM,UAAU,KAAK,EAAE;aAClF,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,mBAAmB;iBAC3C,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACrB,GAAG,CAAC,UAAS,CAAC;gBACb,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;YACjB,CAAC,CAAC;iBACD,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAEzB,uCAAuC;YACvC,MAAM,8BAA8B,CAAC;gBACnC,KAAK,EAAE,SAAS;gBAChB,OAAO;gBACP,gBAAgB,EAAE,kBAAkB;aACrC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kBAAkB,EAAE,KAAK;YAC1B,yCAAyC;YACzC,MAAM,KAAK,GAAG,sCAAsC,CAAC;YAErD,MAAM,OAAO,GAAG;gBACd,YAAY,EAAE,CAAC;aAChB,CAAC;YAEF,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAE5D,IAAI,SAAS,GAAG,IAAI,CAAC;YAErB,MAAM,aAAa,CAAC,SAAS,EAAE,CAAC;YAEhC,IAAI,SAAS,EAAE;gBACb,SAAS,GAAG,KAAK,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport * as util from \"util\";\nimport { Container, ContainerDefinition } from \"../../../src\";\nimport { DataType, IndexKind } from \"../../../src\";\nimport { SqlQuerySpec } from \"../../../src\";\nimport { QueryIterator } from \"../../../src\";\nimport {\n  bulkInsertItems,\n  getTestContainer,\n  removeAllDatabases,\n  generateDocuments\n} from \"../common/TestHelpers\";\nimport { FeedResponse, FeedOptions } from \"../../../src\";\n\nfunction compare(key: string) {\n  return function(a: any, b: any): number {\n    if (a[key] > b[key]) {\n      return 1;\n    }\n    if (a[key] < b[key]) {\n      return -1;\n    }\n    return 0;\n  };\n}\n\ndescribe(\"Cross Partition\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || \"30000\");\n\n  describe(\"Validate Query\", function() {\n    const documentDefinitions = generateDocuments(20);\n\n    const containerDefinition: ContainerDefinition = {\n      id: \"sample container\",\n      indexingPolicy: {\n        includedPaths: [\n          {\n            path: \"/\",\n            indexes: [\n              {\n                kind: IndexKind.Range,\n                dataType: DataType.Number\n              },\n              {\n                kind: IndexKind.Range,\n                dataType: DataType.String\n              }\n            ]\n          }\n        ]\n      },\n      partitionKey: {\n        paths: [\"/id\"]\n      }\n    };\n    const containerOptions = { offerThroughput: 25100 };\n\n    let container: Container;\n\n    // - removes all the databases,\n    // - creates a new database,\n    // - creates a new collecton,\n    // - bulk inserts documents to the container\n    before(async function() {\n      await removeAllDatabases();\n      container = await getTestContainer(\n        \"Validate 中文 Query\",\n        undefined,\n        containerDefinition,\n        containerOptions\n      );\n      await bulkInsertItems(container, documentDefinitions);\n    });\n\n    const validateResults = function(\n      actualResults: any[],\n      expectedOrderIds: string[],\n      expectedCount: number\n    ): void {\n      assert.equal(\n        actualResults.length,\n        expectedCount ||\n          (expectedOrderIds && expectedOrderIds.length) ||\n          documentDefinitions.length,\n        \"actual results length doesn't match with expected results length.\"\n      );\n      if (expectedOrderIds) {\n        assert.deepStrictEqual(\n          actualResults.map((doc) => doc.id || doc),\n          expectedOrderIds\n        );\n      }\n    };\n\n    const validateFetchAll = async function(\n      queryIterator: QueryIterator<any>,\n      options: any,\n      expectedOrderIds: string[],\n      expectedCount: number\n    ): Promise<FeedResponse<any>> {\n      options.continuation = undefined;\n      const response = await queryIterator.fetchAll();\n      const { resources: results } = response;\n      assert.equal(\n        results.length,\n        expectedCount ||\n          (expectedOrderIds && expectedOrderIds.length) ||\n          documentDefinitions.length,\n        \"invalid number of results\"\n      );\n      assert.equal(\n        queryIterator.hasMoreResults(),\n        false,\n        \"hasMoreResults: no more results is left\"\n      );\n\n      validateResults(results, expectedOrderIds, expectedCount);\n      return response;\n    };\n\n    const validateFetchNextAndHasMoreResults = async function(\n      options: any,\n      queryIterator: QueryIterator<any>,\n      expectedOrderIds: string[],\n      fetchAllResponse: FeedResponse<any>,\n      expectedCount: number,\n      expectedIteratorCalls: number\n    ): Promise<void> {\n      const pageSize = options[\"maxItemCount\"];\n      let totalExecuteNextRequestCharge = 0;\n      let totalIteratorCalls = 0;\n      let totalFetchedResults: any[] = [];\n      const expectedLength =\n        expectedCount ||\n        (expectedOrderIds && expectedOrderIds.length) ||\n        documentDefinitions.length;\n\n      while (queryIterator.hasMoreResults()) {\n        const { resources: results, queryMetrics, requestCharge } = await queryIterator.fetchNext();\n        totalIteratorCalls++;\n        assert(queryMetrics, \"expected response have query metrics\");\n\n        if (totalFetchedResults.length > expectedLength) {\n          break;\n        }\n        if (results) {\n          totalFetchedResults = totalFetchedResults.concat(results);\n        }\n        totalExecuteNextRequestCharge += requestCharge;\n        assert(requestCharge >= 0);\n\n        if (totalFetchedResults.length < expectedLength) {\n          if (results) {\n            assert(results.length <= pageSize, \"executeNext: invalid fetch block size\");\n          }\n          assert(queryIterator.hasMoreResults(), \"hasMoreResults expects to return true\");\n        } else {\n          // no more results\n          assert.equal(\n            expectedLength,\n            totalFetchedResults.length,\n            \"executeNext: didn't fetch all the results\"\n          );\n        }\n      }\n\n      if (expectedIteratorCalls) {\n        assert.equal(totalIteratorCalls, expectedIteratorCalls);\n      }\n\n      // no more results\n      validateResults(totalFetchedResults, expectedOrderIds, expectedCount);\n      assert.equal(\n        queryIterator.hasMoreResults(),\n        false,\n        \"hasMoreResults: no more results is left\"\n      );\n      assert(totalExecuteNextRequestCharge > 0);\n      const percentDifference =\n        Math.abs(fetchAllResponse.requestCharge - totalExecuteNextRequestCharge) /\n        totalExecuteNextRequestCharge;\n      assert(\n        percentDifference <= 0.01,\n        \"difference between fetchAll request charge and executeNext request charge should be less than 1%\"\n      );\n    };\n\n    const validateAsyncIterator = async function(\n      queryIterator: QueryIterator<any>,\n      expectedOrderIds: any[],\n      expecetedCount: number\n    ): Promise<void> {\n      const expectedLength =\n        expecetedCount ||\n        (expectedOrderIds && expectedOrderIds.length) ||\n        documentDefinitions.length;\n      const results: any[] = [];\n      let completed = false;\n      for await (const { resources: items } of queryIterator.getAsyncIterator()) {\n        assert.equal(completed, false, \"iterator called after all results returned\");\n        results.push(...items);\n        if (results.length === expectedLength) {\n          completed = true;\n        }\n      }\n      assert.equal(completed, true, \"AsyncIterator should see all expected results\");\n      validateResults(results, expectedOrderIds, expecetedCount);\n    };\n\n    const executeQueryAndValidateResults = async function({\n      query,\n      options,\n      expectedOrderIds,\n      expectedCount,\n      expectedRus,\n      expectedIteratorCalls\n    }: {\n      query: string | SqlQuerySpec;\n      options: any;\n      expectedOrderIds?: any[];\n      expectedCount?: number;\n      expectedRus?: number;\n      expectedIteratorCalls?: number;\n    }): Promise<void> {\n      options.populateQueryMetrics = true;\n      const queryIterator = container.items.query(query, options);\n      const fetchAllResponse = await validateFetchAll(\n        queryIterator,\n        options,\n        expectedOrderIds,\n        expectedCount\n      );\n      if (expectedRus) {\n        const percentDifference =\n          Math.abs(fetchAllResponse.requestCharge - expectedRus) / expectedRus;\n        assert(\n          percentDifference <= 0.05,\n          `difference between fetchAll request charge and expected request charge should be less than 5%. Got ${percentDifference *\n            100}`\n        );\n      }\n      queryIterator.reset();\n      await validateFetchNextAndHasMoreResults(\n        options,\n        queryIterator,\n        expectedOrderIds,\n        fetchAllResponse,\n        expectedCount,\n        expectedIteratorCalls\n      );\n      queryIterator.reset();\n      await validateAsyncIterator(queryIterator, expectedOrderIds, expectedCount);\n    };\n\n    it(\"Validate Parallel Query As String With maxDegreeOfParallelism = 0\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r\";\n      const options = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: 0\n      };\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options\n      });\n    });\n\n    it(\"Validate Parallel Query As String With maxDegreeOfParallelism: -1\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r\";\n      const options: FeedOptions = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: -1,\n        forceQueryPlan: true,\n        populateQueryMetrics: true\n      };\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options\n      });\n    });\n\n    it(\"Validate Parallel Query As String With maxDegreeOfParallelism: 1\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r\";\n      const options = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: 1\n      };\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options\n      });\n    });\n\n    it(\"Validate Parallel Query As String With maxDegreeOfParallelism: 3\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r\";\n      const options: FeedOptions = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: 3,\n        bufferItems: true\n      };\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options\n      });\n    });\n\n    it(\"Validate Simple OrderBy Query As String With maxDegreeOfParallelism = 0\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r order by r.spam\";\n      const options = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: 0\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"spam\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate Simple OrderBy Query As String With maxDegreeOfParallelism = 1 #nosignoff\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r order by r.spam\";\n      const options = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: 1\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"spam\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds,\n        expectedRus: 35\n      });\n    });\n\n    it(\"Validate Simple OrderBy Query As String With maxDegreeOfParallelism = 3\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r order by r.spam\";\n      const options = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: 3\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"spam\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate Simple OrderBy Query As String With maxDegreeOfParallelism = -1\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r order by r.spam\";\n      const options = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: -1\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"spam\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate DISTINCT Query\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT DISTINCT VALUE r.spam3 FROM root r\";\n      const options = {\n        maxItemCount: 2\n      };\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({ query, options, expectedCount: 3 });\n    });\n\n    it(\"Validate DISTINCT OrderBy Query\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT DISTINCT VALUE r.spam3 FROM root r order by r.spam3 DESC\";\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = [\"eggs2\", \"eggs1\", \"eggs0\"];\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate parallel DISTINCT Query\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT DISTINCT VALUE r.spam3 FROM root r order by r.spam3\";\n      const options = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: 3,\n        bufferItems: true\n      };\n\n      const expectedOrderedIds = [\"eggs0\", \"eggs1\", \"eggs2\"];\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate DISTINCT Query with maxItemCount = 1\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT DISTINCT VALUE r.spam3 FROM root r order by r.spam3\";\n      const options = {\n        maxItemCount: 1\n      };\n\n      const expectedOrderedIds = [\"eggs0\", \"eggs1\", \"eggs2\"];\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate DISTINCT Query with maxItemCount = 20\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT DISTINCT VALUE r.spam3 FROM root r order by r.spam3\";\n      const options = {\n        maxItemCount: 20\n      };\n\n      const expectedOrderedIds = [\"eggs0\", \"eggs1\", \"eggs2\"];\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate Simple OrderBy Query As String\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r order by r.spam\";\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"spam\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate Simple OrderBy Query\", async function() {\n      // simple order by query\n      const querySpec = {\n        query: \"SELECT * FROM root r order by r.spam\"\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"spam\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate OrderBy Query With ASC\", async function() {\n      // an order by query with explicit ascending ordering\n      const querySpec = {\n        query: \"SELECT * FROM root r order by r.spam ASC\"\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"spam\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate OrderBy Query With DESC\", async function() {\n      // an order by query with explicit descending ordering\n      const querySpec = {\n        query: \"SELECT * FROM root r order by r.spam DESC\"\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions\n        .sort(compare(\"spam\"))\n        .map(function(r) {\n          return r[\"id\"];\n        })\n        .reverse();\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate OrderBy with top\", async function() {\n      // an order by query with top, total existing docs more than requested top count\n      const topCount = 9;\n      const querySpec = {\n        query: util.format(\"SELECT top %d * FROM root r order by r.spam\", topCount)\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions\n        .sort(compare(\"spam\"))\n        .map(function(r) {\n          return r[\"id\"];\n        })\n        .slice(0, topCount);\n\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate OrderBy with Top Query (less results than top counts)\", async function() {\n      // an order by query with top, total existing docs less than requested top count\n      const topCount = 30;\n      // sanity check\n      assert(topCount > documentDefinitions.length, \"test setup is wrong\");\n      const querySpec = {\n        query: util.format(\"SELECT top %d * FROM root r order by r.spam\", topCount)\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"spam\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate Top Query with maxDegreeOfParallelism = 3\", async function() {\n      // a top query\n      const topCount = 6;\n      // sanity check\n      assert(topCount < documentDefinitions.length, \"test setup is wrong\");\n\n      const query = util.format(\"SELECT top %d * FROM root r\", topCount);\n      const options = {\n        maxItemCount: 2,\n        maxDegreeOfParallelism: 3,\n        forceQueryPlan: true,\n        bufferItems: true\n      };\n\n      // prepare expected behaviour verifier\n      const queryIterator = container.items.query(query, options);\n\n      const { resources: results } = await queryIterator.fetchAll();\n      assert.equal(results.length, topCount);\n\n      // select unique ids\n      const uniqueIds: any = {};\n      results.forEach(function(item) {\n        uniqueIds[item.id] = true;\n      });\n      // assert no duplicate results\n      assert.equal(results.length, Object.keys(uniqueIds).length);\n    });\n\n    it(\"Validate Top Query\", async function() {\n      // a top query\n      const topCount = 6;\n      // sanity check\n      assert(topCount < documentDefinitions.length, \"test setup is wrong\");\n\n      const query = util.format(\"SELECT top %d * FROM root r\", topCount);\n      const options = {\n        maxItemCount: 2\n      };\n\n      // prepare expected behaviour verifier\n      const queryIterator = container.items.query(query, options);\n\n      const { resources: results } = await queryIterator.fetchAll();\n      assert.equal(results.length, topCount);\n\n      // select unique ids\n      const uniqueIds: any = {};\n      results.forEach((item) => {\n        uniqueIds[item.id] = true;\n      });\n      // assert no duplicate results\n      assert.equal(results.length, Object.keys(uniqueIds).length);\n    });\n\n    it(\"Validate Top Query (with 0 topCount)\", async function() {\n      // a top query\n      const topCount = 0;\n      // sanity check\n      assert(topCount < documentDefinitions.length, \"test setup is wrong\");\n\n      const query = util.format(\"SELECT top %d * FROM root r\", topCount);\n      const options = {\n        maxItemCount: 2\n      };\n\n      // prepare expected behaviour verifier\n      const queryIterator = container.items.query(query, options);\n\n      const { resources: results } = await queryIterator.fetchAll();\n      assert.equal(results.length, topCount);\n\n      // select unique ids\n      const uniqueIds: any = {};\n      results.forEach((item) => {\n        uniqueIds[item.id] = true;\n      });\n      // assert no duplicate results\n      assert.equal(results.length, Object.keys(uniqueIds).length);\n    });\n\n    it(\"Validate Parametrized Top Query\", async function() {\n      // a top query\n      const topCount = 6;\n      // sanity check\n      assert(topCount < documentDefinitions.length, \"test setup is wrong\");\n\n      const querySpec: SqlQuerySpec = {\n        query: \"SELECT top @n * FROM root r\",\n\n        parameters: [{ name: \"@n\", value: topCount }]\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      // prepare expected behaviour verifier\n      const queryIterator = container.items.query(querySpec, options);\n\n      const { resources: results } = await queryIterator.fetchAll();\n      assert.equal(results.length, topCount);\n\n      // select unique ids\n      const uniqueIds: any = {};\n      results.forEach((item) => {\n        uniqueIds[item.id] = true;\n      });\n      // assert no duplicate results\n      assert.equal(results.length, Object.keys(uniqueIds).length);\n    });\n\n    it(\"Validate OrderBy with Parametrized Top Query\", async function() {\n      // a parametrized top order by query\n      const topCount = 9;\n      // sanity check\n      assert(topCount < documentDefinitions.length, \"test setup is wrong\");\n      // a parametrized top order by query\n      const querySpec = {\n        query: \"SELECT top @n * FROM root r order by r.spam\",\n\n        parameters: [{ name: \"@n\", value: topCount }]\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions\n        .sort(compare(\"spam\"))\n        .map(function(r) {\n          return r[\"id\"];\n        })\n        .slice(0, topCount);\n\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate OrderBy with Parametrized Predicate\", async function() {\n      // an order by query combined with parametrized predicate\n      const querySpec = {\n        query: \"SELECT * FROM root r where r.cnt > @cnt order by r.spam\",\n        parameters: [{ name: \"@cnt\", value: 5 }]\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions\n        .sort(compare(\"spam\"))\n        .filter(function(r) {\n          return r[\"cnt\"] > 5;\n        })\n        .map(function(r) {\n          return r[\"id\"];\n        });\n\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate Error Handling - Orderby where types are noncomparable\", async function() {\n      // test orderby with different order by item type\n      // an order by query\n      const query = {\n        query: \"SELECT * FROM root r order by r.spam2\"\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      // prepare expected behaviour verifier\n      try {\n        const queryIterator = container.items.query(query, options);\n        await queryIterator.fetchAll();\n      } catch (err) {\n        assert.notEqual(err, undefined);\n      }\n    });\n\n    it(\"Validate OrderBy Integer Query\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r order by r.cnt\";\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"cnt\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate OrderBy Floating Point Number Query\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r order by r.number\";\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions.sort(compare(\"number\")).map(function(r) {\n        return r[\"id\"];\n      });\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate OrderBy Boolean Query\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r order by r.boolVar\";\n      const options = {\n        maxItemCount: 2\n      };\n\n      const queryIterator = container.items.query(query, options);\n      const { resources: results } = await queryIterator.fetchAll();\n      assert.equal(results.length, documentDefinitions.length);\n\n      let index = 0;\n      while (index < results.length) {\n        if (results[index].boolVar) {\n          break;\n        }\n        assert(results[index].id % 2 === 1);\n        index++;\n      }\n\n      while (index < results.length) {\n        assert(results[index].boolVar);\n        assert(results[index].id % 2 === 0);\n        index++;\n      }\n    });\n\n    it(\"Validate simple LIMIT OFFSET\", async function() {\n      const limit = 1;\n      const offset = 7;\n\n      const querySpec = {\n        query: `SELECT * FROM root r OFFSET ${offset} LIMIT ${limit}`\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedCount: 1,\n        expectedIteratorCalls: 1\n      });\n    });\n\n    it(\"Validate filtered LIMIT OFFSET\", async function() {\n      const limit = 1;\n      const offset = 2;\n\n      // an order by query with explicit ascending ordering\n      const querySpec = {\n        query: `SELECT * FROM root r WHERE r.number > 5 OFFSET ${offset} LIMIT ${limit}`\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedCount: 1\n      });\n    });\n\n    // TODO Add test for OFFSET LIMT filtered on partition\n\n    it(\"Validate OrderBy Query With ASC and LIMIT 2 and OFFSET 10\", async function() {\n      const limit = 2;\n      const offset = 10;\n\n      // an order by query with explicit ascending ordering\n      const querySpec = {\n        query: `SELECT * FROM root r order by r.spam ASC OFFSET ${offset} LIMIT ${limit}`\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions\n        .sort(compare(\"spam\"))\n        .map(function(r) {\n          return r[\"id\"];\n        })\n        .splice(offset, limit);\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate OrderBy Query With ASC and LIMIT 0 and OFFSET 5\", async function() {\n      const limit = 5;\n      const offset = 0;\n\n      // an order by query with explicit ascending ordering\n      const querySpec = {\n        query: `SELECT * FROM root r order by r.spam ASC OFFSET ${offset} LIMIT ${limit}`\n      };\n      const options = {\n        maxItemCount: 2\n      };\n\n      const expectedOrderedIds = documentDefinitions\n        .sort(compare(\"spam\"))\n        .map(function(r) {\n          return r[\"id\"];\n        })\n        .splice(offset, limit);\n\n      // validates the results size and order\n      await executeQueryAndValidateResults({\n        query: querySpec,\n        options,\n        expectedOrderIds: expectedOrderedIds\n      });\n    });\n\n    it(\"Validate Failure\", async function() {\n      // simple order by query in string format\n      const query = \"SELECT * FROM root r order by r.spam\";\n\n      const options = {\n        maxItemCount: 2\n      };\n\n      const queryIterator = container.items.query(query, options);\n\n      let firstTime = true;\n\n      await queryIterator.fetchNext();\n\n      if (firstTime) {\n        firstTime = false;\n      }\n    });\n  });\n});\n"]}