{"version":3,"file":"changeFeed.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/changeFeed.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { RequestOptions } from \"../../../src\";\nimport { Container, ContainerDefinition } from \"../../../src\";\nimport { getTestContainer, removeAllDatabases } from \"../common/TestHelpers\";\n\ndescribe(\"Change Feed Iterator\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 20000);\n\n  // delete all databases and create sample database\n  before(async function() {\n    await removeAllDatabases();\n  });\n\n  describe(\"Newly updated items should be fetched incrementally\", function() {\n    let container: Container;\n\n    // create container and two items\n    before(async function() {\n      const containerDef: ContainerDefinition = {\n        partitionKey: {\n          paths: [\"/key\"]\n        }\n      };\n      const throughput: RequestOptions = { offerThroughput: 25100 };\n      container = await getTestContainer(\n        \"Newly updated items should be fetched incrementally\",\n        undefined,\n        containerDef,\n        throughput\n      );\n      await container.items.create({ id: \"item1\", key: \"0\" });\n      await container.items.create({ id: \"item2\", key: \"0\" });\n      await container.items.create({ id: \"item1\", key: \"1\" });\n      await container.items.create({ id: \"item2\", key: \"1\" });\n    });\n\n    it(\"should throw if used with no partition key or partition key range id\", async function() {\n      const iterator = container.items.changeFeed({ startFromBeginning: true });\n\n      try {\n        await iterator.fetchNext();\n      } catch (err) {\n        assert.equal(\n          err.message,\n          \"Container is partitioned, but no partition key or partition key range id was specified.\"\n        );\n        return;\n      }\n      assert.fail(\"Should have failed\");\n    });\n\n    it(\"should fetch updated items only\", async function() {\n      const iterator = container.items.changeFeed(\"0\", { startFromBeginning: true });\n\n      const { result: items, headers } = await iterator.fetchNext();\n      assert(headers.etag, \"change feed response should have etag header\");\n\n      assert.equal(items.length, 2, \"initial number of items should be equal 2\");\n\n      const item = items[1];\n      item.name = \"xyz\";\n\n      const { resource: replaced } = await container.items.upsert(item);\n      assert.deepEqual(replaced.name, \"xyz\", \"replaced item should be valid\");\n\n      const { result: itemsAfterUpdate } = await iterator.fetchNext();\n      assert.equal(itemsAfterUpdate.length, 1, \"initial number of items should be equal 1\");\n      assert.equal(itemsAfterUpdate[0].name, \"xyz\", \"fetched item should have 'name: xyz'\");\n      assert.equal(itemsAfterUpdate[0].id, item.id, \"fetched item should be valid\");\n\n      const { result: shouldHaveNoItems } = await iterator.fetchNext();\n      assert.equal(shouldHaveNoItems.length, 0, \"there should be 0 results\");\n      const hasMoreResults = iterator.hasMoreResults;\n      assert.equal(\n        hasMoreResults,\n        false,\n        \"hasMoreResults should be false when we read the whole page\"\n      );\n    });\n  });\n\n  describe(\"Newly created items should be fetched incrementally\", async function() {\n    let container: Container;\n\n    // create container and one item\n    before(async function() {\n      const containerDef: ContainerDefinition = {\n        partitionKey: {\n          paths: [\"/key\"]\n        }\n      };\n      const throughput: RequestOptions = { offerThroughput: 25100 };\n      container = await getTestContainer(\n        \"Newly updated items should be fetched incrementally\",\n        undefined,\n        containerDef,\n        throughput\n      );\n      await container.items.create({ id: \"item1\", key: \"0\" });\n      await container.items.create({ id: \"item1\", key: \"1\" });\n    });\n\n    after(async function() {\n      await container.delete();\n    });\n\n    it(\"should fetch new items only\", async function() {\n      const iterator = container.items.changeFeed(\"0\");\n\n      const { result: items, headers } = await iterator.fetchNext();\n      assert(headers.etag, \"change feed response should have etag header\");\n      assert.equal(items.length, 0, \"change feed response should have no items on it initially\");\n\n      const { resource: itemThatWasCreated } = await container.items.create({\n        id: \"item2\",\n        prop: 1,\n        key: \"0\"\n      });\n\n      const { result: itemsAfterCreate } = await iterator.fetchNext();\n      assert.equal(itemsAfterCreate.length, 1, \"should have 1 item from create\");\n      const itemThatWasFound = itemsAfterCreate[0];\n\n      assert.notDeepEqual(\n        itemThatWasFound,\n        itemThatWasCreated,\n        \"actual should not match with expected value.\"\n      );\n      delete itemThatWasFound._lsn;\n      delete itemThatWasFound._metadata;\n      assert.deepEqual(\n        itemThatWasFound,\n        itemThatWasCreated,\n        \"actual value doesn't match with expected value.\"\n      );\n\n      const { result: itemsShouldBeEmptyWithNoNewCreates } = await iterator.fetchNext();\n      assert.equal(itemsShouldBeEmptyWithNoNewCreates.length, 0, \"should be nothing new\");\n\n      await container.items.create({ id: \"item3\", key: \"0\" });\n      await container.items.create({ id: \"item4\", key: \"0\" });\n      await container.items.create({ id: \"item3\", key: \"1\" });\n      await container.items.create({ id: \"item4\", key: \"1\" });\n      const { result: itemsShouldHave2NewItems } = await iterator.fetchNext();\n      assert.equal(itemsShouldHave2NewItems.length, 2, \"there should be 2 results\");\n      const { result: shouldHaveNoItems } = await iterator.fetchNext();\n      assert.equal(shouldHaveNoItems.length, 0, \"there should be 0 results\");\n      const hasMoreResults = iterator.hasMoreResults;\n      assert.equal(\n        hasMoreResults,\n        false,\n        \"hasMoreResults should be false when we read the whole page\"\n      );\n    });\n  });\n});\n"]}