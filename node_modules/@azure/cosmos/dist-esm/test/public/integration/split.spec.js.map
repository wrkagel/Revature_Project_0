{"version":3,"file":"split.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/split.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Container } from \"../../../src\";\nimport { bulkInsertItems, getTestContainer, removeAllDatabases } from \"../common/TestHelpers\";\nimport { Constants, CosmosClient, PluginOn, CosmosClientOptions, PluginConfig } from \"../../../src\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\nimport { SubStatusCodes } from \"../../../src/common\";\nimport assert from \"assert\";\n\nconst splitError = new Error(\"Fake Partition Split\") as any;\nsplitError.code = 410;\nsplitError.substatus = SubStatusCodes.PartitionKeyRangeGone;\n\nconst generateDocuments = function(\n  docSize: number\n): {\n  id: string;\n}[] {\n  const docs = [];\n  for (let i = 0; i < docSize; i++) {\n    docs.push({ id: i.toString() });\n  }\n  return docs;\n};\n\nconst documentDefinitions = generateDocuments(20);\n\ndescribe(\"Partition Splits\", () => {\n  let container: Container;\n\n  before(async function() {\n    await removeAllDatabases();\n    container = await getTestContainer(\n      \"Partition Splits\",\n      undefined,\n      {\n        id: \"partitionSplits\",\n        partitionKey: {\n          paths: [\"/id\"]\n        }\n      },\n      { offerThroughput: 25100 }\n    );\n    await bulkInsertItems(container, documentDefinitions);\n  });\n\n  it(\"handles one split part way through iteration\", async () => {\n    let hasSplit = false;\n    const partitionKeyRanges = new Set();\n    const options: CosmosClientOptions = { endpoint, key: masterKey };\n    const plugins: PluginConfig[] = [\n      {\n        on: PluginOn.request,\n        plugin: async (context, next) => {\n          // This plugin throws a single 410 on the *second* time we see the same partition key range ID\n          const partitionKeyRangeId = context?.headers[Constants.HttpHeaders.PartitionKeyRangeID];\n          if (partitionKeyRanges.has(partitionKeyRangeId) && hasSplit === false) {\n            hasSplit = true;\n            const error = new Error(\"Fake Partition Split\") as any;\n            error.code = 410;\n            error.substatus = SubStatusCodes.PartitionKeyRangeGone;\n            throw error;\n          }\n          if (partitionKeyRangeId) {\n            partitionKeyRanges.add(partitionKeyRangeId);\n          }\n          return next(context);\n        }\n      }\n    ];\n    const client = new CosmosClient({\n      ...options,\n      plugins,\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    } as any);\n    const { resources } = await client\n      .database(container.database.id)\n      .container(container.id)\n      .items.query(\"SELECT * FROM root r\", { maxItemCount: 2, maxDegreeOfParallelism: 1 })\n      .fetchAll();\n\n    // TODO. These should be equal but right now they are not\n    // I suspect injecting a random 410 with out actually splitting the documents\n    // results in duplicates by trying to read from two partitions\n    assert(resources.length >= documentDefinitions.length);\n  });\n\n  it(\"split errors surface as 503\", async () => {\n    const options: CosmosClientOptions = { endpoint, key: masterKey };\n    const plugins: PluginConfig[] = [\n      {\n        on: PluginOn.request,\n        plugin: async (context, next) => {\n          // This plugin throws a single 410 for partition key range ID 0 on every single request\n          const partitionKeyRangeId = context?.headers[Constants.HttpHeaders.PartitionKeyRangeID];\n          if (partitionKeyRangeId === \"0\") {\n            const error = new Error(\"Fake Partition Split\") as any;\n            error.code = 410;\n            error.substatus = SubStatusCodes.PartitionKeyRangeGone;\n            throw error;\n          }\n          return next(context);\n        }\n      }\n    ];\n    const client = new CosmosClient({\n      ...options,\n      plugins,\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    } as any);\n\n    // fetchAll()\n    try {\n      await client\n        .database(container.database.id)\n        .container(container.id)\n        .items.query(\"SELECT * FROM root r\", { maxItemCount: 2, maxDegreeOfParallelism: 1 })\n        .fetchAll();\n      assert.fail(\"Expected query to fail\");\n    } catch (e) {\n      assert.strictEqual(e.code, 503);\n    }\n\n    // fetchNext()\n    try {\n      await client\n        .database(container.database.id)\n        .container(container.id)\n        .items.query(\"SELECT * FROM root r\", { maxItemCount: 2, maxDegreeOfParallelism: 1 })\n        .fetchNext();\n      assert.fail(\"Expected query to fail\");\n    } catch (e) {\n      assert.strictEqual(e.code, 503);\n    }\n\n    // asyncIterator\n    try {\n      const iterator = client\n        .database(container.database.id)\n        .container(container.id)\n        .items.query(\"SELECT * FROM root r\", { maxItemCount: 2, maxDegreeOfParallelism: 1 })\n        .getAsyncIterator();\n      const results = [];\n      for await (const result of iterator) {\n        results.push(result);\n      }\n      assert.fail(\"Expected query to fail\");\n    } catch (e) {\n      assert.strictEqual(e.code, 503);\n    }\n  });\n});\n"]}