{"version":3,"file":"query.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/query.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { FeedOptions } from \"../../../src\";\nimport { getTestContainer, getTestDatabase, removeAllDatabases } from \"../common/TestHelpers\";\n\nconst doc = { id: \"myId\", pk: \"pk\" };\n\ndescribe(\"ResourceLink Trimming of leading and trailing slashes\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  const containerId = \"testcontainer\";\n\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  it(\"validate correct execution of query using named container link with leading and trailing slashes\", async function() {\n    const containerDefinition = {\n      id: containerId,\n      partitionKey: {\n        paths: [\"/pk\"]\n      }\n    };\n    const containerOptions = { offerThroughput: 10100 };\n\n    const container = await getTestContainer(\n      \"validate correct execution of query\",\n      undefined,\n      containerDefinition,\n      containerOptions\n    );\n\n    await container.items.create(doc);\n    const query = \"SELECT * from \" + containerId;\n    const queryIterator = container.items.query(query);\n\n    const { resources } = await queryIterator.fetchAll();\n    assert.equal(resources[0][\"id\"], \"myId\");\n  });\n});\n\ndescribe(\"Test Query Metrics\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 20000);\n  const collectionId = \"testCollection2\";\n\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  it(\"validate that query metrics are correct for a single partition query\", async function() {\n    const database = await getTestDatabase(\"query metrics test db\");\n\n    const collectionDefinition = { id: collectionId };\n    const collectionOptions = { offerThroughput: 4000 };\n\n    const { resource: createdCollectionDef } = await database.containers.create(\n      collectionDefinition,\n      collectionOptions\n    );\n    const createdContainer = database.container(createdCollectionDef.id);\n\n    await createdContainer.items.create(doc);\n    const query = \"SELECT * from \" + collectionId;\n    const queryOptions: FeedOptions = { populateQueryMetrics: true };\n    const queryIterator = createdContainer.items.query(query, queryOptions);\n\n    while (queryIterator.hasMoreResults()) {\n      const {\n        resources: results,\n        queryMetrics,\n        activityId,\n        requestCharge\n      } = await queryIterator.fetchNext();\n      assert(activityId, \"activityId must exist\");\n      assert(requestCharge, \"requestCharge must exist\");\n\n      if (results === undefined) {\n        // no more results\n        break;\n      }\n\n      assert.notEqual(queryMetrics, null);\n    }\n  });\n});\n\ndescribe(\"Partition key in FeedOptions\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  it(\"passing partition key in FeedOptions\", async function() {\n    const containerDefinition = {\n      id: \"testcontainer\",\n      partitionKey: {\n        paths: [\"/id\"]\n      }\n    };\n\n    const container = await getTestContainer(\n      \"validate correct execution of query\",\n      undefined,\n      containerDefinition\n    );\n\n    await container.items.create({ id: \"foo\" });\n    await container.items.create({ id: \"bar\" });\n    const query = \"SELECT * from C\";\n    const queryIterator = container.items.query(query, { partitionKey: \"foo\" });\n\n    const { resources } = await queryIterator.fetchAll();\n    assert.equal(resources.length, 1);\n    assert.equal(resources[0].id, \"foo\");\n  });\n});\n"]}