{"version":3,"file":"timeout.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/timeout.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAa,YAAY,EAAE,MAAM,cAAc,CAAC;AACvD,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AACvE,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,4BAA4B,CAAC;AAEvD,QAAQ,CAAC,SAAS,EAAE;IAClB,UAAU,CAAC,KAAK;QACd,MAAM,kBAAkB,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK;QAC7D,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC;YAC/B,QAAQ;YACR,GAAG,EAAE,SAAS;YACd,gBAAgB,EAAE;gBAChB,kCAAkC,EAAE,KAAK;gBACzC,cAAc,EAAE,GAAG;gBACnB,YAAY,EAAE;oBACZ,oBAAoB,EAAE,CAAC;oBACvB,oBAAoB,EAAE,CAAC;oBACvB,gCAAgC,EAAE,CAAC;iBACpC;aACF;YACD,OAAO,EAAE;gBACP;oBACE,EAAE,EAAE,SAAS;oBACb,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;wBAC9B,sDAAsD;wBACtD,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;4BAClC,UAAU,CAAC,GAAG,EAAE;gCACd,OAAO,EAAE,CAAC;4BACZ,CAAC,EAAE,IAAI,CAAC,CAAC;wBACX,CAAC,CAAC,CAAC;wBACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC;wBACrC,OAAO,QAAQ,CAAC;oBAClB,CAAC;iBACF;aACF;SACF,CAAC,CAAC;QAEH,MAAM,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;QACvC,MAAM,WAAW,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;QAE9C,gCAAgC;QAChC,IAAI;YACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC;gBAC7D,EAAE,EAAE,IAAI;aACT,CAAC,CAAC;YACH,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,iBAAiB,CAAC;gBAChE,EAAE,EAAE,WAAW;aAChB,CAAC,CAAC;YAEH,8BAA8B;YAC9B,MAAM,UAAU,CAAC,SAAS,CAAC,CAAC;SAC7B;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;SACtC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,KAAK,UAAU,UAAU,CAAC,SAAoB;IAC5C,MAAM,EACJ,QAAQ,EAAE,EAAE,EAAE,EAAE,EACjB,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC;QAC/B,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;KAClD,CAAC,CAAC;IACH,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport assert from \"assert\";\nimport { Container, CosmosClient } from \"../../../src\";\nimport { addEntropy, removeAllDatabases } from \"../common/TestHelpers\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\n\ndescribe(\"Timeout\", function() {\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  it(\"successfully exits queries after a timeout duration\", async function() {\n    const clientA = new CosmosClient({\n      endpoint,\n      key: masterKey,\n      connectionPolicy: {\n        enableBackgroundEndpointRefreshing: false,\n        requestTimeout: 500,\n        retryOptions: {\n          maxRetryAttemptCount: 2,\n          maxWaitTimeInSeconds: 5,\n          fixedRetryIntervalInMilliseconds: 0\n        }\n      },\n      plugins: [\n        {\n          on: \"request\",\n          plugin: async (context, next) => {\n            // Simulate a request longer than our timeout duration\n            await new Promise<void>((resolve) => {\n              setTimeout(() => {\n                resolve();\n              }, 1500);\n            });\n            const response = await next(context);\n            return response;\n          }\n        }\n      ]\n    });\n\n    const dbId = addEntropy(\"timeouttest\");\n    const containerId = addEntropy(\"timeouttest\");\n\n    // Create Database and Container\n    try {\n      const { database } = await clientA.databases.createIfNotExists({\n        id: dbId\n      });\n      const { container } = await database.containers.createIfNotExists({\n        id: containerId\n      });\n\n      // Create an item using client\n      await createItem(container);\n    } catch (e) {\n      assert.equal(e.code, \"TimeoutError\");\n    }\n  });\n});\n\nasync function createItem(container: Container) {\n  const {\n    resource: { id }\n  } = await container.items.create({\n    id: (Math.random() + 1).toString(36).substring(7)\n  });\n  return id;\n}\n"]}