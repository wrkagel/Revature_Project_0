{"version":3,"file":"proxy.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/proxy.spec.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;AAClC,gCAAgC;AAChC,mCAAmC;AACnC,8BAA8B;AAC9B,6BAA6B;AAC7B,wCAAwC;AACxC,+CAA+C;AAC/C,oDAAoD;AACpD,0DAA0D;AAC1D,sDAAsD;AAEtD,yFAAyF;AACzF,sBAAsB;AACtB,iFAAiF;AACjF,uDAAuD;AACvD,+DAA+D;AAC/D,oBAAoB;AACpB,UAAU;AAEV,yDAAyD;AACzD,wDAAwD;AACxD,mGAAmG;AACnG,8BAA8B;AAC9B,kGAAkG;AAClG,aAAa;AACb,oCAAoC;AACpC,2CAA2C;AAC3C,2CAA2C;AAC3C,YAAY;AACZ,UAAU;AAEV,8BAA8B;AAC9B,uEAAuE;AAEvE,oFAAoF;AACpF,0CAA0C;AAC1C,6DAA6D;AAC7D,kBAAkB;AAClB,gDAAgD;AAChD,0BAA0B;AAC1B,gCAAgC;AAChC,uBAAuB;AACvB,gFAAgF;AAChF,kBAAkB;AAClB,iCAAiC;AACjC,8CAA8C;AAC9C,4CAA4C;AAC5C,kBAAkB;AAClB,yBAAyB;AACzB,wBAAwB;AACxB,6BAA6B;AAC7B,cAAc;AACd,cAAc;AACd,YAAY;AACZ,UAAU;AAEV,oIAAoI;AACpI,0DAA0D;AAC1D,kDAAkD;AAClD,iEAAiE;AACjE,kBAAkB;AAClB,gDAAgD;AAChD,0BAA0B;AAC1B,gCAAgC;AAChC,uBAAuB;AACvB,gFAAgF;AAChF,kBAAkB;AAClB,iCAAiC;AACjC,8CAA8C;AAC9C,4CAA4C;AAC5C,kBAAkB;AAClB,sBAAsB;AACtB,oGAAoG;AACpG,iBAAiB;AACjB,4BAA4B;AAC5B,yBAAyB;AACzB,wBAAwB;AACxB,6BAA6B;AAC7B,cAAc;AACd,cAAc;AACd,YAAY;AACZ,UAAU;AACV,QAAQ;AACR,IAAI","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n// import * as http from \"http\";\n// import { Context } from \"mocha\";\n// import * as net from \"net\";\n// import { URL } from \"url\";\n// import ProxyAgent from \"proxy-agent\";\n// import { CosmosClient } from \"../../../src\";\n// import { endpoint } from \"../common/_testConfig\";\n// import { masterKey } from \"../common/_fakeTestSecrets\";\n// import { addEntropy } from \"../common/TestHelpers\";\n\n// const isBrowser = new Function(\"try {return this===window;}catch(e){ return false;}\");\n// if (!isBrowser()) {\n//   describe(\"Validate http proxy setting in environment variable\", function() {\n//     const proxy = http.createServer((req, resp) => {\n//       resp.writeHead(200, { \"Content-Type\": \"text/plain\" });\n//       resp.end();\n//     });\n\n//     proxy.on(\"connect\", (req, clientSocket, head) => {\n//       const serverUrl = new URL(`http://${req.url}`);\n//       const serverSocket = net.connect(parseInt(serverUrl.port, 10), serverUrl.hostname, () => {\n//         clientSocket.write(\n//           \"HTTP/1.1 200 Connection Established\\r\\n\" + \"Proxy-agent: Node.js-Proxy\\r\\n\" + \"\\r\\n\"\n//         );\n//         serverSocket.write(head);\n//         serverSocket.pipe(clientSocket);\n//         clientSocket.pipe(serverSocket);\n//       });\n//     });\n\n//     const proxyPort = 8989;\n//     const agent = new ProxyAgent(`http://127.0.0.1:${8989}`) as any;\n\n//     it(\"nativeApi Client Should successfully execute request\", async function() {\n//       return new Promise((resolve) => {\n//         proxy.listen(proxyPort, \"127.0.0.1\", async () => {\n//           try {\n//             const client = new CosmosClient({\n//               endpoint,\n//               key: masterKey,\n//               agent,\n//               connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n//             });\n//             // create database\n//             await client.databases.create({\n//               id: addEntropy(\"ProxyTest\")\n//             });\n//             resolve();\n//           } finally {\n//             proxy.close();\n//           }\n//         });\n//       });\n//     });\n\n//     it(\"nativeApi Client Should execute request in error while the proxy setting is not correct\", async function(this: Context) {\n//       this.timeout(process.env.MOCHA_TIMEOUT || 30000);\n//       return new Promise((resolve, reject) => {\n//         proxy.listen(proxyPort + 1, \"127.0.0.1\", async () => {\n//           try {\n//             const client = new CosmosClient({\n//               endpoint,\n//               key: masterKey,\n//               agent,\n//               connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n//             });\n//             // create database\n//             await client.databases.create({\n//               id: addEntropy(\"ProxyTest\")\n//             });\n//             reject(\n//               new Error(\"Should create database in error while the proxy setting is not correct\")\n//             );\n//           } catch (err) {\n//             resolve();\n//           } finally {\n//             proxy.close();\n//           }\n//         });\n//       });\n//     });\n//   });\n// }\n"]}