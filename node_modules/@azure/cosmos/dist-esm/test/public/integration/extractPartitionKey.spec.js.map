{"version":3,"file":"extractPartitionKey.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/extractPartitionKey.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAEnD,QAAQ,CAAC,qBAAqB,EAAE;IAC9B,QAAQ,CAAC,uCAAuC,EAAE;QAChD,EAAE,CAAC,yBAAyB,EAAE;YAC5B,MAAM,QAAQ,GAAQ,EAAE,CAAC;YACzB,MAAM,MAAM,GAAG,mBAAmB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACxD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE;QAChD,MAAM,sBAAsB,GAAG,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;QACnD,MAAM,8BAA8B,GAAG,EAAE,KAAK,EAAE,CAAC,gBAAgB,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;QAExF,EAAE,CAAC,6DAA6D,EAAE;YAChE,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,MAAM,MAAM,GAAG,mBAAmB,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0GAA0G,EAAE;YAC7G,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,MAAM,MAAM,GAAG,mBAAmB,CAAC,QAAQ,EAAE,8BAA8B,CAAC,CAAC;YAC7E,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mEAAmE,EAAE;YACtE,MAAM,QAAQ,GAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC;YACzC,MAAM,MAAM,GAAG,mBAAmB,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8EAA8E,EAAE;YACjF,MAAM,QAAQ,GAAG,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC;YACrC,MAAM,MAAM,GAAG,mBAAmB,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qEAAqE,EAAE;YACxE,MAAM,QAAQ,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,YAAY,EAAE,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,mBAAmB,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { extractPartitionKey } from \"../../../src\";\n\ndescribe(\"extractPartitionKey\", function() {\n  describe(\"With undefined partitionKeyDefinition\", function() {\n    it(\"should return undefined\", function() {\n      const document: any = {};\n      const result = extractPartitionKey(document, undefined);\n      assert.equal(result, undefined);\n    });\n  });\n\n  describe(\"With a defined partitionKeyDefinition\", function() {\n    const partitionKeyDefinition = { paths: [\"/a/b\"] };\n    const migratedPartitionKeyDefinition = { paths: [\"/_partitionKey\"], isSystemKey: true };\n\n    it(\"should return [{}] when document has no partition key value\", function() {\n      const document = {};\n      const result = extractPartitionKey(document, partitionKeyDefinition);\n      assert.deepEqual(result, [{}]);\n    });\n\n    it(\"should return [] when container is migrated from non-partitioned and document has no partition key value\", function() {\n      const document = {};\n      const result = extractPartitionKey(document, migratedPartitionKeyDefinition);\n      assert.deepEqual(result, [{}]);\n    });\n\n    it(\"should return [null] when document has a null partition key value\", function() {\n      const document: any = { a: { b: null } };\n      const result = extractPartitionKey(document, partitionKeyDefinition);\n      assert.deepEqual(result, [null]);\n    });\n\n    it(\"should return [{}] when document has a partially defined partition key value\", function() {\n      const document = { a: \"some value\" };\n      const result = extractPartitionKey(document, partitionKeyDefinition);\n      assert.deepEqual(result, [{}]);\n    });\n\n    it(\"should return [value] when document has a valid partition key value\", function() {\n      const document = { a: { b: \"some value\" } };\n      const result = extractPartitionKey(document, partitionKeyDefinition);\n      assert.deepEqual(result, [\"some value\"]);\n    });\n  });\n});\n"]}