{"version":3,"file":"authorization.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/authorization.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { Container, CosmosClient, PermissionMode } from \"../../../src\";\nimport { Database } from \"../../../src\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { getTestContainer, removeAllDatabases } from \"../common/TestHelpers\";\n\ndescribe(\"Authorization\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n\n  // TODO: should have types for all these things\n  let database: Database;\n  let container: Container;\n\n  let userReadDefinition: any = { id: \"User With Read Permission\" };\n  let userAllDefinition: any = { id: \"User With All Permission\" };\n  let collReadPermission: any = {\n    id: \"container Read Permission\",\n    permissionMode: PermissionMode.Read\n  };\n  let collAllPermission: any = {\n    id: \"container All Permission\",\n    permissionMode: PermissionMode.All\n  };\n  /** ************ TEST **************/\n\n  beforeEach(async function() {\n    await removeAllDatabases();\n\n    // create a database & container\n    container = await getTestContainer(\"Authorization tests\");\n    database = container.database;\n\n    // create userReadPermission\n    const { resource: userDef } = await container.database.users.create(userReadDefinition);\n    assert.equal(userReadDefinition.id, userDef.id, \"userReadPermission is not created properly\");\n    userReadDefinition = userDef;\n    const userRead = container.database.user(userDef.id);\n\n    // give permission to read container, to userReadPermission\n    collReadPermission.resource = container.url;\n    const { resource: readPermission } = await userRead.permissions.create(collReadPermission);\n    assert.equal(\n      readPermission.id,\n      collReadPermission.id,\n      \"permission to read coll1 is not created properly\"\n    );\n    collReadPermission = readPermission;\n\n    // create userAllPermission\n    const { resource: userAllDef } = await container.database.users.create(userAllDefinition);\n    assert.equal(userAllDefinition.id, userAllDef.id, \"userAllPermission is not created properly\");\n    userAllDefinition = userAllDef;\n    const userAll = container.database.user(userAllDef.id);\n\n    // create collAllPermission\n    collAllPermission.resource = container.url;\n    const { resource: allPermission } = await userAll.permissions.create(collAllPermission);\n    assert.equal(\n      collAllPermission.id,\n      allPermission.id,\n      \"permission to read coll2 is not created properly\"\n    );\n    collAllPermission = allPermission;\n  });\n\n  afterEach(async function() {\n    await removeAllDatabases();\n  });\n\n  it(\"Accessing container by resourceTokens\", async function() {\n    const rTokens: any = {};\n    rTokens[container.id] = collReadPermission._token;\n\n    const clientReadPermission = new CosmosClient({\n      endpoint,\n      resourceTokens: rTokens,\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    });\n\n    const { resource: coll } = await clientReadPermission\n      .database(database.id)\n      .container(container.id)\n      .read();\n    assert.equal(coll.id, container.id, \"invalid container\");\n  });\n\n  it(\"Accessing container by permissionFeed\", async function() {\n    const clientReadPermission = new CosmosClient({\n      endpoint,\n      permissionFeed: [collReadPermission],\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    });\n\n    // self link must be used to access a resource using permissionFeed\n    const { resource: coll } = await clientReadPermission\n      .database(database.id)\n      .container(container.id)\n      .read();\n    assert.equal(coll.id, container.id, \"invalid container\");\n  });\n\n  it(\"Accessing container without permission fails\", async function() {\n    const clientNoPermission = new CosmosClient({ endpoint });\n\n    try {\n      await clientNoPermission\n        .database(database.id)\n        .container(container.id)\n        .read();\n      assert.fail(\"accessing container did not throw\");\n    } catch (err) {\n      assert(err !== undefined); // TODO: should check that we get the right error message\n    }\n    clientNoPermission.dispose();\n  });\n\n  it(\"Accessing document by permissionFeed of parent container\", async function() {\n    const { resource: createdDoc } = await container.items.create({\n      id: \"document1\"\n    });\n    const clientReadPermission = new CosmosClient({\n      endpoint,\n      permissionFeed: [collReadPermission],\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    });\n    assert.equal(\"document1\", createdDoc.id, \"invalid documnet create\");\n\n    const { resource: readDoc } = await clientReadPermission\n      .database(database.id)\n      .container(container.id)\n      .item(createdDoc.id, undefined)\n      .read<any>();\n    assert.equal(readDoc.id, createdDoc.id, \"invalid document read\");\n  });\n\n  it(\"Modifying container by resourceTokens\", async function() {\n    const rTokens: any = {};\n    rTokens[container.id] = collAllPermission._token;\n    const clientAllPermission = new CosmosClient({\n      endpoint,\n      resourceTokens: rTokens,\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    });\n\n    // delete container\n    return clientAllPermission\n      .database(database.id)\n      .container(container.id)\n      .delete();\n  });\n\n  it(\"Modifying container by permissionFeed\", async function() {\n    const clientAllPermission = new CosmosClient({\n      endpoint,\n      permissionFeed: [collAllPermission],\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    });\n\n    // self link must be used to access a resource using permissionFeed\n    // delete container\n    return clientAllPermission\n      .database(database.id)\n      .container(container.id)\n      .delete();\n  });\n});\n"]}