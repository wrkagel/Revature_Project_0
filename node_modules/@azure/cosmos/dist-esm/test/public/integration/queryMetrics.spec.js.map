{"version":3,"file":"queryMetrics.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/queryMetrics.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport {\n  ClientSideMetrics,\n  QueryMetrics,\n  QueryPreparationTimes,\n  RuntimeExecutionTimes,\n  TimeSpan\n} from \"../../../src\";\n\ndescribe(\"QueryMetrics\", function() {\n  // Properties\n  const totalQueryExecutionTime = TimeSpan.fromMilliseconds(33.67);\n  const queryCompilationTime = TimeSpan.fromMilliseconds(0.06);\n  const logicalPlanBuildTime = TimeSpan.fromMilliseconds(0.02);\n  const physicalPlanBuildTime = TimeSpan.fromMilliseconds(0.1);\n  const queryOptimizationTime = TimeSpan.fromMilliseconds(0.01);\n  const vmExecutionTime = TimeSpan.fromMilliseconds(32.56);\n  const indexLookupTime = TimeSpan.fromMilliseconds(0.36);\n  const documentLoadTime = TimeSpan.fromMilliseconds(9.58);\n  const systemFunctionExecutionTime = TimeSpan.fromMilliseconds(0.05);\n  const userDefinedFunctionExecutionTime = TimeSpan.fromMilliseconds(0.07);\n  const documentWriteTime = TimeSpan.fromMilliseconds(18.1);\n  const retrievedDocumentCount = 2000;\n  const retrievedDocumentSize = 1125600;\n  const outputDocumentCount = 2000;\n  const outputDocumentSize = 1125600;\n  const indexUtilizationRatio = 1.0;\n  const requestCharge = 42;\n\n  const delimitedString =\n    \"totalExecutionTimeInMs=33.67;queryCompileTimeInMs=0.06;queryLogicalPlanBuildTimeInMs=0.02;queryPhysicalPlanBuildTimeInMs=0.10;queryOptimizationTimeInMs=0.01;VMExecutionTimeInMs=32.56;indexLookupTimeInMs=0.36;documentLoadTimeInMs=9.58;systemFunctionExecuteTimeInMs=0.05;userFunctionExecuteTimeInMs=0.07;retrievedDocumentCount=2000;retrievedDocumentSize=1125600;outputDocumentCount=2000;outputDocumentSize=1125600;writeOutputTimeInMs=18.10;indexUtilizationRatio=1.00\";\n\n  const queryEngineExecutionTime = TimeSpan.zero\n    .add(vmExecutionTime)\n    .subtract(indexLookupTime)\n    .subtract(documentLoadTime)\n    .subtract(documentWriteTime);\n\n  // Base line query metrics\n  const queryMetrics = new QueryMetrics(\n    retrievedDocumentCount,\n    retrievedDocumentSize,\n    outputDocumentCount,\n    outputDocumentSize,\n    indexUtilizationRatio * retrievedDocumentCount,\n    totalQueryExecutionTime,\n    new QueryPreparationTimes(\n      queryCompilationTime,\n      logicalPlanBuildTime,\n      physicalPlanBuildTime,\n      queryOptimizationTime\n    ),\n    indexLookupTime,\n    documentLoadTime,\n    vmExecutionTime,\n    new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      systemFunctionExecutionTime,\n      userDefinedFunctionExecutionTime\n    ),\n    documentWriteTime,\n    new ClientSideMetrics(requestCharge)\n  );\n\n  const assertQueryMetricsEquality = function(\n    queryMetrics1: QueryMetrics,\n    queryMetrics2: QueryMetrics\n  ): void {\n    assert.deepEqual(queryMetrics1.indexHitRatio, queryMetrics2.indexHitRatio);\n    assert.deepEqual(queryMetrics1.outputDocumentCount, queryMetrics2.outputDocumentCount);\n    assert.deepEqual(queryMetrics1.outputDocumentSize, queryMetrics2.outputDocumentSize);\n    assert.deepEqual(queryMetrics1.retrievedDocumentCount, queryMetrics2.retrievedDocumentCount);\n    assert.deepEqual(queryMetrics1.retrievedDocumentSize, queryMetrics2.retrievedDocumentSize);\n    assert.deepEqual(queryMetrics1.totalQueryExecutionTime, queryMetrics2.totalQueryExecutionTime);\n\n    assert.deepEqual(queryMetrics1.documentLoadTime, queryMetrics2.documentLoadTime);\n    assert.deepEqual(queryMetrics1.documentWriteTime, queryMetrics2.documentWriteTime);\n    assert.deepEqual(queryMetrics1.indexLookupTime, queryMetrics2.indexLookupTime);\n    assert.deepEqual(queryMetrics1.vmExecutionTime, queryMetrics2.vmExecutionTime);\n\n    assert.deepEqual(\n      queryMetrics1.queryPreparationTimes.logicalPlanBuildTime,\n      queryMetrics2.queryPreparationTimes.logicalPlanBuildTime\n    );\n    assert.deepEqual(\n      queryMetrics1.queryPreparationTimes.physicalPlanBuildTime,\n      queryMetrics2.queryPreparationTimes.physicalPlanBuildTime\n    );\n    assert.deepEqual(\n      queryMetrics1.queryPreparationTimes.queryCompilationTime,\n      queryMetrics2.queryPreparationTimes.queryCompilationTime\n    );\n    assert.deepEqual(\n      queryMetrics1.queryPreparationTimes.queryOptimizationTime,\n      queryMetrics2.queryPreparationTimes.queryOptimizationTime\n    );\n\n    assert.deepEqual(\n      queryMetrics1.runtimeExecutionTimes.queryEngineExecutionTime,\n      queryMetrics2.runtimeExecutionTimes.queryEngineExecutionTime\n    );\n    assert.deepEqual(\n      queryMetrics1.runtimeExecutionTimes.systemFunctionExecutionTime,\n      queryMetrics2.runtimeExecutionTimes.systemFunctionExecutionTime\n    );\n    assert.deepEqual(\n      queryMetrics1.runtimeExecutionTimes.userDefinedFunctionExecutionTime,\n      queryMetrics2.runtimeExecutionTimes.userDefinedFunctionExecutionTime\n    );\n\n    assert.deepEqual(\n      queryMetrics1.clientSideMetrics.requestCharge,\n      queryMetrics2.clientSideMetrics.requestCharge\n    );\n  };\n\n  it(\"Can Be Cloned\", function() {\n    const queryMetrics2 = new QueryMetrics(\n      queryMetrics.retrievedDocumentCount,\n      queryMetrics.retrievedDocumentSize,\n      queryMetrics.outputDocumentCount,\n      queryMetrics.outputDocumentSize,\n      queryMetrics.indexHitDocumentCount,\n      queryMetrics.totalQueryExecutionTime,\n      queryMetrics.queryPreparationTimes,\n      queryMetrics.indexLookupTime,\n      queryMetrics.documentLoadTime,\n      queryMetrics.vmExecutionTime,\n      queryMetrics.runtimeExecutionTimes,\n      queryMetrics.documentWriteTime,\n      queryMetrics.clientSideMetrics\n    );\n\n    assertQueryMetricsEquality(queryMetrics, queryMetrics2);\n  });\n\n  it(\"Should Add Two Query Metrics\", function() {\n    const doubleQueryMetrics = queryMetrics.add([queryMetrics]);\n\n    const doubleRetrievedDocumentCount = retrievedDocumentCount * 2;\n    const doubleRetrievedDocumentSize = retrievedDocumentSize * 2;\n    const doubleOutputDocumentCount = outputDocumentCount * 2;\n    const doubleOutputDocumentSize = outputDocumentSize * 2;\n    const doubleIndexHitCount = indexUtilizationRatio * retrievedDocumentCount * 2;\n    const doubleTotalQueryExecutionTime = TimeSpan.fromMilliseconds(\n      totalQueryExecutionTime.totalMilliseconds() * 2\n    );\n    const doubleQueryCompilationTime = TimeSpan.fromMilliseconds(\n      queryCompilationTime.totalMilliseconds() * 2\n    );\n    const doubleLogicalPlanBuildTime = TimeSpan.fromMilliseconds(\n      logicalPlanBuildTime.totalMilliseconds() * 2\n    );\n    const doublePhysicalPlanBuildTime = TimeSpan.fromMilliseconds(\n      physicalPlanBuildTime.totalMilliseconds() * 2\n    );\n    const doubleIndexLookupTime = TimeSpan.fromMilliseconds(\n      indexLookupTime.totalMilliseconds() * 2\n    );\n    const doubleDocumentLoadTime = TimeSpan.fromMilliseconds(\n      documentLoadTime.totalMilliseconds() * 2\n    );\n    const doubleVMExecutionTime = TimeSpan.fromMilliseconds(\n      vmExecutionTime.totalMilliseconds() * 2\n    );\n    const doubleQueryOptimizationTime = TimeSpan.fromMilliseconds(\n      queryOptimizationTime.totalMilliseconds() * 2\n    );\n    const doubleQueryEngineExecutionTime = TimeSpan.fromMilliseconds(\n      queryEngineExecutionTime.totalMilliseconds() * 2\n    );\n    const doubleSystemFunctionExecutionTime = TimeSpan.fromMilliseconds(\n      systemFunctionExecutionTime.totalMilliseconds() * 2\n    );\n    const doubleUserDefinedFunctionExecutionTime = TimeSpan.fromMilliseconds(\n      userDefinedFunctionExecutionTime.totalMilliseconds() * 2\n    );\n    const doubleDocumentWriteTime = TimeSpan.fromMilliseconds(\n      documentWriteTime.totalMilliseconds() * 2\n    );\n    const doubleRequestCharge = requestCharge * 2;\n\n    const expectedQueryMetrics = new QueryMetrics(\n      doubleRetrievedDocumentCount,\n      doubleRetrievedDocumentSize,\n      doubleOutputDocumentCount,\n      doubleOutputDocumentSize,\n      doubleIndexHitCount,\n      doubleTotalQueryExecutionTime,\n      new QueryPreparationTimes(\n        doubleQueryCompilationTime,\n        doubleLogicalPlanBuildTime,\n        doublePhysicalPlanBuildTime,\n        doubleQueryOptimizationTime\n      ),\n      doubleIndexLookupTime,\n      doubleDocumentLoadTime,\n      doubleVMExecutionTime,\n      new RuntimeExecutionTimes(\n        doubleQueryEngineExecutionTime,\n        doubleSystemFunctionExecutionTime,\n        doubleUserDefinedFunctionExecutionTime\n      ),\n      doubleDocumentWriteTime,\n      new ClientSideMetrics(doubleRequestCharge)\n    );\n\n    assertQueryMetricsEquality(doubleQueryMetrics, expectedQueryMetrics);\n\n    const queryMetricsFromCreateArray = QueryMetrics.createFromArray([queryMetrics, queryMetrics]);\n\n    assertQueryMetricsEquality(queryMetricsFromCreateArray, expectedQueryMetrics);\n  });\n\n  it(\"Can Be Create From Delimited String\", function() {\n    const queryMetricsFromDelimitedString = QueryMetrics.createFromDelimitedString(\n      delimitedString,\n      new ClientSideMetrics(requestCharge)\n    );\n\n    assertQueryMetricsEquality(queryMetricsFromDelimitedString, queryMetrics);\n  });\n\n  it(\"Can Be Converted To A Delimited String\", function() {\n    const delimitedStringFromMetrics = queryMetrics.toDelimitedString();\n    const queryMetricsFromDelimitedString = QueryMetrics.createFromDelimitedString(\n      delimitedStringFromMetrics,\n      new ClientSideMetrics(requestCharge)\n    );\n\n    assertQueryMetricsEquality(queryMetrics, queryMetricsFromDelimitedString);\n  });\n});\n"]}