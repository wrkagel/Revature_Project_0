{"version":3,"file":"aggregateQuery.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/aggregateQuery.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { Container, ContainerDefinition } from \"../../../src\";\nimport { DataType, IndexKind } from \"../../../src\";\nimport { QueryIterator } from \"../../../src\";\nimport { SqlQuerySpec } from \"../../../src\";\nimport { FeedOptions } from \"../../../src\";\nimport { TestData } from \"../common/TestData\";\nimport { bulkInsertItems, getTestContainer, removeAllDatabases } from \"../common/TestHelpers\";\n\ndescribe(\"Aggregate Query\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 20000);\n  const partitionKey = \"key\";\n  const uniquePartitionKey = \"uniquePartitionKey\";\n  const testdata = new TestData(partitionKey, uniquePartitionKey);\n  const average = testdata.sum / testdata.numberOfDocumentsWithNumbericId;\n  const documentDefinitions = testdata.docs;\n  const samePartitionSum =\n    (testdata.numberOfDocsWithSamePartitionKey * (testdata.numberOfDocsWithSamePartitionKey + 1)) /\n    2.0;\n  let container: Container;\n\n  const containerDefinition: ContainerDefinition = {\n    id: \"sample container\",\n    indexingPolicy: {\n      includedPaths: [\n        {\n          path: \"/\",\n          indexes: [\n            {\n              kind: IndexKind.Range,\n              dataType: DataType.String\n            },\n            {\n              kind: IndexKind.Range,\n              dataType: DataType.Number\n            }\n          ]\n        }\n      ]\n    },\n    partitionKey: {\n      paths: [\"/\" + partitionKey]\n    }\n  };\n\n  const containerOptions = { offerThroughput: 10100 };\n\n  before(async function() {\n    await removeAllDatabases();\n    container = await getTestContainer(\n      \"Validate Aggregate Document Query\",\n      undefined,\n      containerDefinition,\n      containerOptions\n    );\n    await bulkInsertItems(container, documentDefinitions);\n  });\n\n  const validateFetchAll = async function(\n    queryIterator: QueryIterator<any>,\n    expectedResults: any\n  ): Promise<number> {\n    const { resources: results, requestCharge } = await queryIterator.fetchAll();\n    assert(requestCharge > 0, \"request charge was not greater than zero\");\n    assert.equal(results.length, expectedResults.length, \"invalid number of results\");\n    assert.equal(queryIterator.hasMoreResults(), false, \"hasMoreResults: no more results is left\");\n    return requestCharge;\n  };\n\n  const validateExecuteNextAndHasMoreResults = async function(\n    queryIterator: QueryIterator<any>,\n    options: any,\n    expectedResults: any[],\n    fetchAllRequestCharge: number\n  ): Promise<void> {\n    const pageSize = options[\"maxItemCount\"];\n\n    let totalFetchedResults: any[] = [];\n    let totalExecuteNextRequestCharge = 0;\n\n    while (totalFetchedResults.length <= expectedResults.length) {\n      const { resources: results, requestCharge } = await queryIterator.fetchNext();\n\n      if (results && results.length > 0) {\n        totalFetchedResults = totalFetchedResults.concat(results);\n      }\n      totalExecuteNextRequestCharge += requestCharge;\n\n      if (\n        !queryIterator.hasMoreResults() ||\n        totalFetchedResults.length === expectedResults.length\n      ) {\n        break;\n      }\n\n      if (totalFetchedResults.length < expectedResults.length) {\n        // there are more results\n        if (results) {\n          assert(results.length <= pageSize, \"executeNext: invalid fetch block size\");\n        }\n        assert(queryIterator.hasMoreResults(), \"hasMoreResults expects to return true\");\n      } else {\n        // no more results\n        assert.equal(\n          expectedResults.length,\n          totalFetchedResults.length,\n          \"executeNext: didn't fetch all the results\"\n        );\n        assert(\n          results.length <= pageSize,\n          \"executeNext: actual fetch size is more than the requested page size\"\n        );\n      }\n    }\n\n    // no more results\n    assert.deepStrictEqual(totalFetchedResults, expectedResults);\n    assert.equal(queryIterator.hasMoreResults(), false, \"hasMoreResults: no more results is left\");\n\n    assert(totalExecuteNextRequestCharge > 0);\n    const percentDifference =\n      Math.abs(fetchAllRequestCharge - totalExecuteNextRequestCharge) /\n      totalExecuteNextRequestCharge;\n    assert(\n      percentDifference <= 0.01,\n      \"difference between fetchAll request charge and executeNext request charge should be less than 1%\"\n    );\n  };\n\n  const ValidateAsyncIterator = async function(\n    queryIterator: QueryIterator<any>,\n    expectedResults: any[]\n  ): Promise<void> {\n    const results: any[] = [];\n    let completed = false;\n    // forEach uses callbacks still, so just wrap in a promise\n    for await (const { resources: items } of queryIterator.getAsyncIterator()) {\n      // if the previous invocation returned false, forEach must avoid invoking the callback again!\n      assert.equal(completed, false, \"forEach called callback after the first false returned\");\n      results.push(...items);\n      if (results.length === expectedResults.length) {\n        completed = true;\n      }\n    }\n    assert.equal(completed, true, \"AsyncIterator should fetch expected number of results\");\n    assert.deepStrictEqual(results, expectedResults);\n  };\n\n  const executeQueryAndValidateResults = async function(\n    query: string | SqlQuerySpec,\n    expectedResults: any[]\n  ): Promise<void> {\n    const options: FeedOptions = { maxDegreeOfParallelism: 2, maxItemCount: 1 };\n\n    const queryIterator = container.items.query(query, options);\n    const fetchAllRequestCharge = await validateFetchAll(queryIterator, expectedResults);\n    queryIterator.reset();\n    await validateExecuteNextAndHasMoreResults(\n      queryIterator,\n      options,\n      expectedResults,\n      fetchAllRequestCharge\n    );\n    queryIterator.reset();\n    await ValidateAsyncIterator(queryIterator, expectedResults);\n  };\n\n  it(\"SELECT VALUE AVG\", async function() {\n    await executeQueryAndValidateResults(\"SELECT VALUE AVG(r.key) FROM r WHERE IS_NUMBER(r.key)\", [\n      average\n    ]);\n  });\n\n  it(\"SELECT VALUE AVG with ORDER BY\", async function() {\n    await executeQueryAndValidateResults(\n      \"SELECT VALUE AVG(r.key) FROM r WHERE IS_NUMBER(r.key) ORDER BY r.key\",\n      [average]\n    );\n  });\n\n  it(\"SELECT VALUE COUNT\", async function() {\n    await executeQueryAndValidateResults(\"SELECT VALUE COUNT(r.key) FROM r\", [\n      testdata.numberOfDocuments\n    ]);\n  });\n\n  it(\"SELECT VALUE COUNT with ORDER BY\", async function() {\n    await executeQueryAndValidateResults(\"SELECT VALUE COUNT(r.key) FROM r ORDER BY r.key\", [\n      testdata.numberOfDocuments\n    ]);\n  });\n\n  it(\"SELECT VALUE MAX\", async function() {\n    await executeQueryAndValidateResults(\"SELECT VALUE MAX(r.key) FROM r\", [\"xyz\"]);\n  });\n\n  it(\"SELECT VALUE MAX with ORDER BY\", async function() {\n    await executeQueryAndValidateResults(\"SELECT VALUE MAX(r.key) FROM r ORDER BY r.key\", [\"xyz\"]);\n  });\n\n  it(\"SELECT VALUE MIN\", async function() {\n    await executeQueryAndValidateResults(\"SELECT VALUE MIN(r.key) FROM r\", [null]);\n  });\n\n  it(\"SELECT VALUE MIN with ORDER BY\", async function() {\n    await executeQueryAndValidateResults(\"SELECT VALUE MIN(r.key) FROM r ORDER BY r.key\", [null]);\n  });\n\n  it(\"SELECT VALUE SUM\", async function() {\n    await executeQueryAndValidateResults(\"SELECT VALUE SUM(r.key) FROM r WHERE IS_NUMBER(r.key)\", [\n      testdata.sum\n    ]);\n  });\n\n  it(\"SELECT VALUE SUM with ORDER BY\", async function() {\n    await executeQueryAndValidateResults(\n      \"SELECT VALUE SUM(r.key) FROM r WHERE IS_NUMBER(r.key) ORDER BY r.key\",\n      [testdata.sum]\n    );\n  });\n\n  it(\"SELECT VALUE AVG for single partiton\", async function() {\n    await executeQueryAndValidateResults(\n      \"SELECT VALUE AVG(r.field) FROM r WHERE r.key = 'uniquePartitionKey'\",\n      [samePartitionSum / testdata.numberOfDocsWithSamePartitionKey]\n    );\n  });\n\n  it(\"SELECT VALUE COUNT for single partiton\", async function() {\n    await executeQueryAndValidateResults(\n      \"SELECT VALUE COUNT(r.field) FROM r WHERE r.key = 'uniquePartitionKey'\",\n      [testdata.numberOfDocsWithSamePartitionKey]\n    );\n  });\n\n  it(\"SELECT VALUE MAX for single partiton\", async function() {\n    await executeQueryAndValidateResults(\n      \"SELECT VALUE MAX(r.field) FROM r WHERE r.key = 'uniquePartitionKey'\",\n      [testdata.numberOfDocsWithSamePartitionKey]\n    );\n  });\n\n  it(\"SELECT VALUE MIN for single partiton\", async function() {\n    await executeQueryAndValidateResults(\n      \"SELECT VALUE MIN(r.field) FROM r WHERE r.key = 'uniquePartitionKey'\",\n      [1]\n    );\n  });\n\n  it(\"SELECT VALUE SUM for single partiton\", async function() {\n    await executeQueryAndValidateResults(\n      \"SELECT VALUE SUM(r.field) FROM r WHERE r.key = 'uniquePartitionKey'\",\n      [samePartitionSum]\n    );\n  });\n\n  it(\"Non VALUE aggregate\", async function() {\n    await executeQueryAndValidateResults(\"SELECT AVG(r.key) FROM r WHERE IS_NUMBER(r.key)\", [\n      { $1: average }\n    ]);\n  });\n\n  it(\"Multiple Aggregates\", async function() {\n    await executeQueryAndValidateResults(\"SELECT COUNT(1), MAX(r.key) FROM r\", [\n      { $1: testdata.numberOfDocuments, $2: \"xyz\" }\n    ]);\n  });\n\n  it(\"should not error for MAX queries on with empty results\", async () => {\n    const queryIterator = container.items.query(\"SELECT VALUE MAX(r.missing) from r\", {\n      maxItemCount: 2\n    });\n    const response = await queryIterator.fetchAll();\n    assert(response.resources.length === 0);\n  });\n\n  it(\"should not error for MIN queries on with empty filter\", async () => {\n    const queryIterator = container.items.query(\"SELECT VALUE MIN(r.key) from r WHERE false\", {\n      maxItemCount: 2\n    });\n    const response = await queryIterator.fetchAll();\n    assert(response.resources.length === 0);\n  });\n});\n"]}