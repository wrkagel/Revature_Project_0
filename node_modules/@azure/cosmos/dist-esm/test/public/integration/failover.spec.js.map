{"version":3,"file":"failover.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/failover.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosClient, PluginOn, CosmosClientOptions, PluginConfig } from \"../../../src\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\nimport assert from \"assert\";\n\nconst endpoint = \"https://failovertest.documents.azure.com/\";\n\n// This is a function because the SDK plugin ends up mutating it. In reality this won't happen because it is a unique backend response\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nconst databaseAccountResponse = () => ({\n  headers: {\n    \"content-location\": \"https://failovertest.documents.azure.com/\",\n    \"content-type\": \"application/json\"\n  },\n  result: {\n    _self: \"\",\n    id: \"failovertest\",\n    _rid: \"failovertest.documents.azure.com\",\n    media: \"//media/\",\n    addresses: \"//addresses/\",\n    _dbs: \"//dbs/\",\n    writableLocations: [\n      {\n        name: \"East US\",\n        databaseAccountEndpoint: \"https://failovertest-eastus.documents.azure.com:443/\"\n      },\n      {\n        name: \"Australia East\",\n        databaseAccountEndpoint: \"https://failovertest-australiaeast.documents.azure.com:443/\"\n      }\n    ],\n    readableLocations: [\n      {\n        name: \"East US\",\n        databaseAccountEndpoint: \"https://failovertest-eastus.documents.azure.com:443/\"\n      },\n      {\n        name: \"Australia East\",\n        databaseAccountEndpoint: \"https://failovertest-australiaeast.documents.azure.com:443/\"\n      }\n    ],\n    enableMultipleWriteLocations: true,\n    userReplicationPolicy: {\n      asyncReplication: false,\n      minReplicaSetSize: 3,\n      maxReplicasetSize: 4\n    },\n    userConsistencyPolicy: {\n      defaultConsistencyLevel: \"Session\"\n    },\n    systemReplicationPolicy: {\n      minReplicaSetSize: 3,\n      maxReplicasetSize: 4\n    },\n    readPolicy: {\n      primaryReadCoefficient: 1,\n      secondaryReadCoefficient: 1\n    },\n    queryEngineConfiguration:\n      '{\"maxSqlQueryInputLength\":262144,\"maxJoinsPerSqlQuery\":5,\"maxLogicalAndPerSqlQuery\":500,\"maxLogicalOrPerSqlQuery\":500,\"maxUdfRefPerSqlQuery\":10,\"maxInExpressionItemsCount\":16000,\"queryMaxInMemorySortDocumentCount\":500,\"maxQueryRequestTimeoutFraction\":0.9,\"sqlAllowNonFiniteNumbers\":false,\"sqlAllowAggregateFunctions\":true,\"sqlAllowSubQuery\":true,\"sqlAllowScalarSubQuery\":true,\"allowNewKeywords\":true,\"sqlAllowLike\":false,\"sqlAllowGroupByClause\":true,\"maxSpatialQueryCells\":12,\"spatialMaxGeometryPointCount\":256,\"sqlAllowTop\":true,\"enableSpatialIndexing\":true}'\n  },\n  code: 200\n});\n\nconst collectionResponse = {\n  headers: {},\n  result: {\n    id: \"RegionalFailover6198\",\n    indexingPolicy: {\n      indexingMode: \"consistent\",\n      automatic: true,\n      includedPaths: [\n        {\n          path: \"/*\"\n        }\n      ],\n      excludedPaths: [\n        {\n          path: '/\"_etag\"/?'\n        }\n      ]\n    },\n    partitionKey: {\n      paths: [\"/_partitionKey\"],\n      kind: \"Hash\"\n    },\n    conflictResolutionPolicy: {\n      mode: \"LastWriterWins\",\n      conflictResolutionPath: \"/_ts\",\n      conflictResolutionProcedure: \"\"\n    },\n    geospatialConfig: {\n      type: \"Geography\"\n    },\n    _rid: \"kdY4AIn8g54=\",\n    _ts: 1572274839,\n    _self: \"dbs/kdY4AA==/colls/kdY4AIn8g54=/\",\n    _etag: '\"00007500-0000-0100-0000-5db702970000\"',\n    _docs: \"docs/\",\n    _sprocs: \"sprocs/\",\n    _triggers: \"triggers/\",\n    _udfs: \"udfs/\",\n    _conflicts: \"conflicts/\"\n  },\n  code: 200\n};\n\nconst readResponse = {\n  headers: {},\n  result: {\n    id: \"0\",\n    _rid: \"kdY4AIn8g54BAAAAAAAAAA==\",\n    _self: \"dbs/kdY4AA==/colls/kdY4AIn8g54=/docs/kdY4AIn8g54BAAAAAAAAAA==/\",\n    _etag: '\"2400118c-0000-0100-0000-5db702980000\"',\n    _attachments: \"attachments/\",\n    _ts: 1572274840\n  },\n  code: 200\n};\n\nconst DatabaseAccountNotFoundResponse = {\n  code: 403,\n  substatus: 1008,\n  headers: {}\n};\n\nconst WriteForbiddenResponse = {\n  code: 403,\n  substatus: 3,\n  headers: {}\n};\n\ndescribe(\"Region Failover\", () => {\n  let responses: any[];\n\n  it(\"region write no longer allowed\", async () => {\n    let requestIndex = 0;\n    let lastEndpointCalled = \"\";\n    responses = [\n      databaseAccountResponse(),\n      collectionResponse,\n      readResponse,\n      WriteForbiddenResponse,\n      databaseAccountResponse(),\n      readResponse\n    ];\n    const options: CosmosClientOptions = { endpoint, key: masterKey };\n    const plugins: PluginConfig[] = [\n      {\n        on: PluginOn.request,\n        plugin: async (context) => {\n          const response = responses[requestIndex];\n          lastEndpointCalled = context.endpoint;\n          requestIndex++;\n          if (response.code > 400) {\n            throw response;\n          }\n          return response;\n        }\n      }\n    ];\n    const client = new CosmosClient({\n      ...options,\n      plugins\n    } as any);\n    const containerRef = client.database(\"any\").container(\"any\");\n    await containerRef.item(\"any\", undefined).read();\n    assert.strictEqual(lastEndpointCalled, \"https://failovertest-eastus.documents.azure.com:443/\");\n    await containerRef.item(\"any\", undefined).read();\n    assert.strictEqual(\n      lastEndpointCalled,\n      \"https://failovertest-australiaeast.documents.azure.com:443/\"\n    );\n    client.dispose();\n  });\n\n  it(\"on database not found, region dropped\", async () => {\n    let requestIndex = 0;\n    let lastEndpointCalled = \"\";\n    responses = [\n      databaseAccountResponse(),\n      collectionResponse,\n      readResponse,\n      DatabaseAccountNotFoundResponse,\n      databaseAccountResponse(),\n      readResponse\n    ];\n    const options: CosmosClientOptions = { endpoint, key: masterKey };\n    const plugins: PluginConfig[] = [\n      {\n        on: PluginOn.request,\n        plugin: async (context) => {\n          const response = responses[requestIndex];\n          lastEndpointCalled = context.endpoint;\n          requestIndex++;\n          if (response.code > 400) {\n            throw response;\n          }\n          return response;\n        }\n      }\n    ];\n    const client = new CosmosClient({\n      ...options,\n      plugins\n    } as any);\n    const containerRef = client.database(\"any\").container(\"any\");\n    await containerRef.item(\"any\", undefined).read();\n    assert.strictEqual(lastEndpointCalled, \"https://failovertest-eastus.documents.azure.com:443/\");\n    await containerRef.item(\"any\", undefined).read();\n    assert.strictEqual(\n      lastEndpointCalled,\n      \"https://failovertest-australiaeast.documents.azure.com:443/\"\n    );\n    client.dispose();\n  });\n\n  it(\"all endpoints unavailable, fallback to user supplied endpoint\", async () => {\n    let requestIndex = 0;\n    let lastEndpointCalled = \"\";\n    responses = [\n      databaseAccountResponse(),\n      collectionResponse,\n      readResponse,\n      DatabaseAccountNotFoundResponse,\n      databaseAccountResponse(),\n      DatabaseAccountNotFoundResponse,\n      databaseAccountResponse(),\n      readResponse\n    ];\n    const options: CosmosClientOptions = { endpoint, key: masterKey };\n    const plugins: PluginConfig[] = [\n      {\n        on: PluginOn.request,\n        plugin: async (context) => {\n          const response = responses[requestIndex];\n          lastEndpointCalled = context.endpoint;\n          requestIndex++;\n          if (response.code > 400) {\n            throw response;\n          }\n          return response;\n        }\n      }\n    ];\n    const client = new CosmosClient({\n      ...options,\n      plugins\n    } as any);\n    const containerRef = client.database(\"any\").container(\"any\");\n    await containerRef.item(\"any\", undefined).read();\n    await containerRef.item(\"any\", undefined).read();\n    assert.strictEqual(lastEndpointCalled, \"https://failovertest.documents.azure.com/\");\n    client.dispose();\n  });\n});\n"]}