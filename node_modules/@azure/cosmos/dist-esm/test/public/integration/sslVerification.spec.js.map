{"version":3,"file":"sslVerification.spec.js","sourceRoot":"","sources":["../../../../test/public/integration/sslVerification.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,MAAM,QAAQ,GAAG,wBAAwB,CAAC;AAC1C,MAAM,SAAS,GACb,0FAA0F,CAAC;AAE7F,QAAQ,CAAC,yDAAyD,EAAE;IAClE,EAAE,CAAC,wBAAwB,EAAE,KAAK;QAChC,IAAI;YACF,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC;gBAC9B,QAAQ;gBACR,GAAG,EAAE,SAAS;gBACd,gBAAgB,EAAE,EAAE,kCAAkC,EAAE,KAAK,EAAE;aAChE,CAAC,CAAC;YACH,kBAAkB;YAClB,MAAM,eAAe,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;SACnD;QAAC,OAAO,GAAG,EAAE;YACZ,8DAA8D;YAC9D,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,6BAA6B,EAAE,+BAA+B,CAAC,CAAC;SACxF;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK;QACrC,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC;YAC9B,QAAQ;YACR,GAAG,EAAE,SAAS;YACd,KAAK,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC;gBACrB,kBAAkB,EAAE,KAAK;aAC1B,CAAC;YACF,gBAAgB,EAAE,EAAE,kCAAkC,EAAE,KAAK,EAAE;SAChE,CAAC,CAAC;QAEH,kBAAkB;QAClB,MAAM,eAAe,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { CosmosClient } from \"../../../src\";\nimport { getTestDatabase } from \"../common/TestHelpers\";\nimport https from \"https\";\n\nconst endpoint = \"https://localhost:8081\";\nconst masterKey =\n  \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n\ndescribe(\"Validate SSL verification check for emulator #nosignoff\", function() {\n  it(\"should throw exception\", async function() {\n    try {\n      const client = new CosmosClient({\n        endpoint,\n        key: masterKey,\n        connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n      });\n      // create database\n      await getTestDatabase(\"ssl verification\", client);\n    } catch (err) {\n      // connecting to emulator should throw SSL verification error,\n      assert.equal(err.code, \"DEPTH_ZERO_SELF_SIGNED_CERT\", \"client should throw exception\");\n    }\n  });\n\n  it(\"disable ssl check via agent\", async function() {\n    const client = new CosmosClient({\n      endpoint,\n      key: masterKey,\n      agent: new https.Agent({\n        rejectUnauthorized: false\n      }),\n      connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n    });\n\n    // create database\n    await getTestDatabase(\"ssl verification\", client);\n  });\n});\n"]}