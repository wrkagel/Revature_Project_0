{"version":3,"file":"authorization.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/authorization.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { CosmosClient, PermissionMode } from \"../../../src\";\nimport { PermissionDefinition } from \"../../../src/\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\nimport {\n  createOrUpsertPermission,\n  getTestContainer,\n  getTestDatabase,\n  removeAllDatabases\n} from \"../common/TestHelpers\";\n\ndescribe(\"NodeJS CRUD Tests\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  describe(\"Validate Authorization\", function() {\n    it(\"should handle all the key options\", async function() {\n      const clientOptionsKey = new CosmosClient({\n        endpoint,\n        key: masterKey,\n        connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n      });\n      assert(\n        undefined !== (await clientOptionsKey.databases.readAll().fetchAll()),\n        \"Should be able to fetch list of databases\"\n      );\n\n      const clientOptionsAuthKey = new CosmosClient({\n        endpoint,\n        key: masterKey,\n        connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n      });\n      assert(\n        undefined !== (await clientOptionsAuthKey.databases.readAll().fetchAll()),\n        \"Should be able to fetch list of databases\"\n      );\n\n      const clientOptionsAuthMasterKey = new CosmosClient({\n        endpoint,\n        key: masterKey,\n        connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n      });\n      assert(\n        undefined !== (await clientOptionsAuthMasterKey.databases.readAll().fetchAll()),\n        \"Should be able to fetch list of databases\"\n      );\n    });\n\n    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n    const setupEntities = async function(isUpsertTest: boolean) {\n      // create database\n      const database = await getTestDatabase(\"Validate Authorization database\");\n      // create container1\n\n      const { resource: container1 } = await database.containers.create({\n        id: \"Validate Authorization container\"\n      });\n      // create document1\n      const { resource: document1 } = await database\n        .container(container1.id)\n        .items.create({ id: \"coll1doc1\", foo: \"bar\", key: \"value\" });\n      // create document 2\n      const { resource: document2 } = await database\n        .container(container1.id)\n        .items.create({ id: \"coll1doc2\", foo: \"bar2\", key: \"value2\" });\n\n      // create container 2\n      const { resource: container2 } = await database.containers.create({\n        id: \"sample container2\"\n      });\n\n      // create user1\n      const { resource: user1 } = await database.users.create({ id: \"user1\" });\n      let permission = {\n        id: \"permission On Coll1\",\n        permissionMode: PermissionMode.Read,\n        resource: (container1 as any)._self\n      }; // TODO: any rid stuff\n      // create permission for container1\n      const { resource: permissionOnColl1 } = await createOrUpsertPermission(\n        database.user(user1.id),\n        permission,\n        undefined,\n        isUpsertTest\n      );\n      assert((permissionOnColl1 as any)._token !== undefined, \"permission token is invalid\");\n      permission = {\n        id: \"permission On Doc1\",\n        permissionMode: PermissionMode.All,\n        resource: (document2 as any)._self // TODO: any rid\n      };\n      // create permission for document 2\n      const { resource: permissionOnDoc2 } = await createOrUpsertPermission(\n        database.user(user1.id),\n        permission,\n        undefined,\n        isUpsertTest\n      );\n      assert((permissionOnDoc2 as any)._token !== undefined, \"permission token is invalid\"); // TODO: any rid\n\n      // create user 2\n      const { resource: user2 } = await database.users.create({ id: \"user2\" });\n      permission = {\n        id: \"permission On coll2\",\n        permissionMode: PermissionMode.All,\n        resource: (container2 as any)._self // TODO: any rid\n      };\n      // create permission on container 2\n      const { resource: permissionOnColl2 } = await createOrUpsertPermission(\n        database.user(user2.id),\n        permission,\n        undefined,\n        isUpsertTest\n      );\n      const entities = {\n        database,\n        coll1: container1,\n        coll2: container2,\n        doc1: document1,\n        doc2: document2,\n        user1,\n        user2,\n        permissionOnColl1,\n        permissionOnDoc2,\n        permissionOnColl2\n      };\n\n      return entities;\n    };\n\n    const authorizationCRUDTest = async function(isUpsertTest: boolean): Promise<void> {\n      try {\n        const badclient = new CosmosClient({ endpoint });\n        await badclient.databases.readAll().fetchAll();\n        assert.fail(\"Must fail\");\n      } catch (err) {\n        assert(err !== undefined, \"error should not be undefined\");\n        const unauthorizedErrorCode = 401;\n        assert.equal(err.code, unauthorizedErrorCode, \"error code should be equal to 401\");\n      }\n\n      // setup entities\n      // TODO: should move this out of this test and into before/etc.\n      const entities = await setupEntities(isUpsertTest);\n      const resourceTokens: any = {};\n      resourceTokens[entities.coll1.id] = (entities.permissionOnColl1 as any)._token;\n      resourceTokens[entities.doc1.id] = (entities.permissionOnColl1 as any)._token;\n\n      const col1Client = new CosmosClient({\n        endpoint,\n        resourceTokens,\n        connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n      });\n\n      // 1. Success-- Use Col1 Permission to Read\n      const { resource: successColl1 } = await col1Client\n        .database(entities.database.id)\n        .container(entities.coll1.id)\n        .read();\n      assert(successColl1 !== undefined, \"error reading container\");\n\n      // 2. Failure-- Use Col1 Permission to delete\n      try {\n        await col1Client\n          .database(entities.database.id)\n          .container(entities.coll1.id)\n          .delete();\n        assert.fail(\"must fail if no permission\");\n      } catch (err) {\n        assert(err !== undefined, \"expected to fail, no permission to delete\");\n        assert.equal(err.code, 403, \"Must return a code for not authorized\");\n      }\n\n      // 3. Success-- Use Col1 Permission to Read All Docs\n      const { resources: successDocuments } = await col1Client\n        .database(entities.database.id)\n        .container(entities.coll1.id)\n        .items.readAll()\n        .fetchAll();\n      assert(successDocuments !== undefined, \"error reading documents\");\n      assert.equal(successDocuments.length, 2, \"Expected 2 Documents to be succesfully read\");\n\n      // 4. Success-- Use Col1 Permission to Read Col1Doc1\n      const { resource: successDoc } = await col1Client\n        .database(entities.database.id)\n        .container(entities.coll1.id)\n        .item(entities.doc1.id, undefined)\n        .read();\n      assert(successDoc !== undefined, \"error reading document\");\n      assert.equal(\n        successDoc.id,\n        entities.doc1.id,\n        \"Expected to read children using parent permissions\"\n      );\n      // TODO: Permission Feed uses RID right now\n      /*\n            const col2Client = new CosmosClient({\n                endpoint,\n                auth: { permissionFeed: [entities.permissionOnColl2] },\n            });\n            const doc = { id: \"new doc\", CustomProperty1: \"BBBBBB\", customProperty2: 1000 };\n            const col2Container = await col2Client.databaseDatabase(entities.db.id)\n                .containerContainer(entities.coll2.id);\n            const { resources: successDoc2 } = await createOrUpsertItem(\n                col2Container, doc, undefined, isUpsertTest);\n            assert(successDoc2 !== undefined, \"error creating document\");\n            assert.equal(successDoc2.CustomProperty1, doc.CustomProperty1,\n                \"document should have been created successfully\");\n            */\n    };\n\n    const authorizationCRUDOverMultiplePartitionsTest = async function(): Promise<void> {\n      // create database\n      // create container\n      const partitionKey = \"key\";\n      const containerDefinition = {\n        id: \"coll1\",\n        partitionKey: { paths: [\"/\" + partitionKey] }\n      };\n      const container = await getTestContainer(\n        \"authorization CRUD multiple partitons\",\n        undefined,\n        containerDefinition\n      );\n      // create user\n      const { resource: userDef } = await container.database.users.create({ id: \"user1\" });\n      const user = container.database.user(userDef.id);\n\n      const key = 1;\n      const permissionDefinition: PermissionDefinition = {\n        id: \"permission1\",\n        permissionMode: PermissionMode.All,\n        resource: container.url,\n        resourcePartitionKey: [key]\n      };\n\n      // create permission\n      const { resource: permission } = await user.permissions.create(permissionDefinition);\n      assert((permission as any)._token !== undefined, \"permission token is invalid\");\n      const resourceTokens: any = {};\n      resourceTokens[container.id] = (permission as any)._token;\n\n      const restrictedClient = new CosmosClient({\n        endpoint,\n        resourceTokens,\n        connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n      });\n      await restrictedClient\n        .database(container.database.id)\n        .container(container.id)\n        .items.create({ id: \"document1\", key: 1 });\n      try {\n        await restrictedClient\n          .database(container.database.id)\n          .container(container.id)\n          .items.create({ id: \"document2\", key: 2 });\n        assert.fail(\"Must throw unauthorized on read\");\n      } catch (err) {\n        const unauthorizedErrorCode = 403;\n        assert.equal(err.code, unauthorizedErrorCode);\n      }\n    };\n\n    it(\"Should do authorization successfully name based\", async function() {\n      await authorizationCRUDTest(false);\n    });\n\n    it(\"Should do authorization successfully name based with upsert\", async function() {\n      await authorizationCRUDTest(true);\n    });\n\n    it(\"Should do authorization over multiple partitions successfully name based\", async function() {\n      await authorizationCRUDOverMultiplePartitionsTest();\n    });\n\n    it(\"should allow deletion of a doc with container token\", async function() {\n      const container = await getTestContainer(\"Validate Authorization container\");\n\n      const { resource: item } = await container.items.create({\n        id: \"coll1doc1\",\n        foo: \"bar\",\n        key: \"value\"\n      });\n\n      // Create User\n      const { resource: user } = await container.database.users.create({ id: \"user1\" });\n\n      // Create Permission\n      const { resource: permission } = await createOrUpsertPermission(\n        container.database.user(user.id),\n        {\n          id: \"permission On Coll1\",\n          permissionMode: PermissionMode.All,\n          resource: (await container.read()).resource._self\n        },\n        undefined,\n        false\n      );\n\n      const resourceTokens = {\n        [`dbs/${container.database.id}/colls/${container.id}`]: permission._token\n      };\n\n      const client = new CosmosClient({\n        resourceTokens: resourceTokens,\n        endpoint: endpoint,\n        connectionPolicy: {\n          enableEndpointDiscovery: false\n        }\n      });\n\n      const { statusCode } = await client\n        .database(container.database.id)\n        .container(container.id)\n        .item(item.id)\n        .delete();\n\n      assert.equal(statusCode, 204);\n    });\n  });\n});\n"]}