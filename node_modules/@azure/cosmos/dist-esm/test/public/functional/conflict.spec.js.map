{"version":3,"file":"conflict.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/conflict.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAE7E,QAAQ,CAAC,WAAW,EAAE;IACpB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,KAAK,CAAC,CAAC;IACjD,UAAU,CAAC,KAAK;QACd,MAAM,kBAAkB,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE;QAC1B,EAAE,CAAC,iBAAiB,EAAE,KAAK;YACzB,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACtD,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,SAAS,EAAE,CAAC;YACrF,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,qCAAqC,EAAE,KAAK;YAC7C,wHAAwH;YACxH,2FAA2F;YAC3F,MAAM,SAAS,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACtD,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,SAAS,CAAC,SAAS;iBAC5C,KAAK,CAAC,iBAAiB,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC;iBAClD,SAAS,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { removeAllDatabases, getTestContainer } from \"../common/TestHelpers\";\n\ndescribe(\"Conflicts\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  describe(\"Query conflicts\", function() {\n    it(\"query conflicts\", async function() {\n      const container = await getTestContainer(\"conflicts\");\n      const { resources } = await container.conflicts.query(\"SELECT * from C\").fetchNext();\n      assert.equal(resources.length, 0);\n    });\n    it(\"query conflicts with forceQueryPlan\", async function() {\n      // TODO. Remove! This test is to prevent regression on a bug where a query plan was being fetched for non-item resources\n      // Ideally QueryIterator for item gets its own type instead of shared amongst all resources\n      const container = await getTestContainer(\"conflicts\");\n      const { resources } = await container.conflicts\n        .query(\"SELECT * from C\", { forceQueryPlan: true })\n        .fetchNext();\n      assert.equal(resources.length, 0);\n    });\n  });\n});\n"]}