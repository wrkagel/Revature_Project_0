{"version":3,"file":"client.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/client.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { Agent } from \"http\";\nimport { CosmosClient } from \"../../../src\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\nimport {\n  getTestDatabase,\n  getTestContainer,\n  generateDocuments,\n  bulkInsertItems\n} from \"../common/TestHelpers\";\nimport AbortController from \"node-abort-controller\";\nimport { UsernamePasswordCredential } from \"@azure/identity\";\nimport { defaultConnectionPolicy } from \"../../../src/documents\";\n\ndescribe(\"Client Tests\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 20000);\n\n  describe(\"Validate client request timeout\", function() {\n    it(\"timeout occurs within expected timeframe\", async function() {\n      // making timeout 1 ms to make sure it will throw\n      // (create database request takes 10ms-15ms to finish on emulator)\n      const client = new CosmosClient({\n        endpoint,\n        key: masterKey,\n        connectionPolicy: { requestTimeout: 1, enableBackgroundEndpointRefreshing: false }\n      });\n      // create database\n      try {\n        await getTestDatabase(\"request timeout\", client);\n        assert.fail(\"Must throw when trying to connect to database\");\n      } catch (err) {\n        assert.equal(err.name, \"TimeoutError\", \"client should throw exception\");\n      }\n    });\n  });\n\n  describe(\"Constructor\", function() {\n    it(\"Accepts node Agent\", function() {\n      const client = new CosmosClient({\n        endpoint: \"https://faaaaaake.com\",\n        agent: new Agent(),\n        connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n      });\n      assert.ok(client !== undefined, \"client shouldn't be undefined if it succeeded\");\n    });\n    it(\"Accepts a connection string\", function() {\n      const client = new CosmosClient(`AccountEndpoint=${endpoint};AccountKey=${masterKey};`);\n      assert.ok(client !== undefined, \"client shouldn't be undefined if it succeeded\");\n      client.dispose();\n    });\n    it(\"throws on a bad connection string\", function() {\n      assert.throws(() => new CosmosClient(`bad;Connection=string;`));\n    });\n    it(\"throws on a bad endpoint\", function() {\n      assert.throws(() => new CosmosClient({ endpoint: \"asda=asda;asada;\" }));\n    });\n    it(\"fails to read databases with bad AAD authentication\", async function() {\n      try {\n        const credentials = new UsernamePasswordCredential(\n          \"fake-tenant-id\",\n          \"fake-client-id\",\n          \"fakeUsername\",\n          \"fakePassword\"\n        );\n        const client = new CosmosClient({\n          endpoint,\n          aadCredentials: credentials,\n          connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n        });\n        await client.databases.readAll().fetchAll();\n      } catch (e) {\n        assert.equal(e.name, \"CredentialUnavailableError\");\n      }\n    });\n  });\n  describe(\"Validate user passed AbortController.signal\", function() {\n    it(\"should throw exception if aborted during the request\", async function() {\n      const client = new CosmosClient({ endpoint, key: masterKey });\n      try {\n        const controller = new AbortController();\n        const signal = controller.signal;\n        setTimeout(() => controller.abort(), 1);\n        await client.getDatabaseAccount({ abortSignal: signal });\n        assert.fail(\"Must throw when trying to connect to database\");\n      } catch (err) {\n        console.log(err);\n        assert.equal(err.name, \"AbortError\", \"client should throw exception\");\n      }\n      client.dispose();\n    });\n    it(\"should throw exception if passed an already aborted signal\", async function() {\n      const client = new CosmosClient({ endpoint, key: masterKey });\n      try {\n        const controller = new AbortController();\n        const signal = controller.signal;\n        controller.abort();\n        await client.getDatabaseAccount({ abortSignal: signal });\n        assert.fail(\"Must throw when trying to connect to database\");\n      } catch (err) {\n        assert.equal(err.name, \"AbortError\", \"client should throw exception\");\n      }\n      client.dispose();\n    });\n    it(\"should abort a query\", async function() {\n      const container = await getTestContainer(\"abort query\");\n      await bulkInsertItems(container, generateDocuments(20));\n      try {\n        const controller = new AbortController();\n        const signal = controller.signal;\n        setTimeout(() => controller.abort(), 50);\n        // Setting maxItemCount = 1 to ensure this query take a long time\n        await container.items\n          .query(\"SELECT * from c\", { abortSignal: signal, maxItemCount: 1 })\n          .fetchAll();\n        assert.fail(\"Must throw\");\n      } catch (err) {\n        assert.equal(err.name, \"AbortError\", \"client should throw exception\");\n      }\n    });\n    it(\"should not abort if abort signal is never called\", async function() {\n      // Testing the happy path to prevent this bug https://github.com/Azure/azure-sdk-for-js/issues/9510\n      const client = new CosmosClient({ endpoint, key: masterKey });\n      try {\n        const controller = new AbortController();\n        const signal = controller.signal;\n        await client.getDatabaseAccount({ abortSignal: signal });\n      } catch (err) {\n        assert.fail(err);\n      }\n      client.dispose();\n    });\n  });\n  describe(\"Background refresher\", async function() {\n    // not async to leverage done() callback inside setTimeout\n    it(\"should fetch new endpoints\", function(done) {\n      // set refresh rate to 700ms\n      const client = new CosmosClient({\n        endpoint,\n        key: masterKey,\n        connectionPolicy: {\n          ...defaultConnectionPolicy,\n          endpointRefreshRateInMs: 700,\n          enableBackgroundEndpointRefreshing: true\n        }\n      });\n\n      // then timeout 1.2s so that we first fetch no endpoints, then after it refreshes we see them\n      client\n        .getReadEndpoints()\n        .then((firstEndpoints) => {\n          assert.equal(firstEndpoints.length, 0);\n          setTimeout(() => {\n            client\n              .getReadEndpoints()\n              .then((endpoints) => {\n                assert.notEqual(firstEndpoints, endpoints);\n                done();\n                return;\n              })\n              .catch(console.warn);\n          }, 1200);\n          return;\n        })\n        .catch(console.warn);\n    });\n  });\n});\n"]}