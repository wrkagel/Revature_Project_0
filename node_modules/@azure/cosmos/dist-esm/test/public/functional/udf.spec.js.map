{"version":3,"file":"udf.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/udf.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { UserDefinedFunctionDefinition, Container } from \"../../../src\";\nimport { removeAllDatabases, getTestContainer } from \"../common/TestHelpers\";\n\ndescribe(\"User Defined Function\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  let container: Container;\n\n  beforeEach(async function() {\n    await removeAllDatabases();\n    // get container\n    container = await getTestContainer(\"UDFTests\");\n  });\n  it(\"nativeApi Should do UDF CRUD operations successfully\", async function() {\n    const { resources: udfs } = await container.scripts.userDefinedFunctions.readAll().fetchAll();\n\n    // create a udf\n    const beforeCreateUdfsCount = udfs.length;\n    const udfDefinition: UserDefinedFunctionDefinition = {\n      id: \"sample udf\",\n      body: \"function () { const x = 10; }\"\n    };\n\n    // TODO also handle upsert case\n    const { resource: udf } = await container.scripts.userDefinedFunctions.create(udfDefinition);\n\n    assert.equal(udf.id, udfDefinition.id);\n    assert.equal(udf.body, \"function () { const x = 10; }\");\n\n    // read udfs after creation\n    const {\n      resources: udfsAfterCreate\n    } = await container.scripts.userDefinedFunctions.readAll().fetchAll();\n    assert.equal(\n      udfsAfterCreate.length,\n      beforeCreateUdfsCount + 1,\n      \"create should increase the number of udfs\"\n    );\n\n    // query udfs\n    const querySpec = {\n      query: \"SELECT * FROM root r WHERE r.id=@id\",\n      parameters: [\n        {\n          name: \"@id\",\n          value: udfDefinition.id\n        }\n      ]\n    };\n    const { resources: results } = await container.scripts.userDefinedFunctions\n      .query(querySpec)\n      .fetchAll();\n    assert(results.length > 0, \"number of results for the query should be > 0\");\n\n    // replace udf\n    udfDefinition.body = \"function () { const x = 10; }\";\n    const { resource: replacedUdf } = await container.scripts\n      .userDefinedFunction(udfDefinition.id)\n      .replace(udfDefinition);\n\n    assert.equal(replacedUdf.id, udfDefinition.id);\n    assert.equal(replacedUdf.body, \"function () { const x = 10; }\");\n\n    // read udf\n    const { resource: udfAfterReplace } = await container.scripts\n      .userDefinedFunction(replacedUdf.id)\n      .read();\n\n    assert.equal(replacedUdf.id, udfAfterReplace.id);\n\n    // delete udf\n    await container.scripts.userDefinedFunction(replacedUdf.id).delete();\n\n    // read udfs after deletion\n    try {\n      await container.scripts.userDefinedFunction(replacedUdf.id).read();\n      assert.fail(\"Must fail to read after delete\");\n    } catch (err) {\n      const notFoundErrorCode = 404;\n      assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n    }\n  });\n});\n"]}