{"version":3,"file":"container.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/container.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { Constants, ContainerResponse } from \"../../../src\";\nimport { ContainerDefinition, Database, Container } from \"../../../src\";\nimport { ContainerRequest } from \"../../../src\";\nimport { DataType, IndexedPath, IndexingMode, IndexingPolicy, IndexKind } from \"../../../src\";\nimport {\n  getTestDatabase,\n  removeAllDatabases,\n  getTestContainer,\n  assertThrowsAsync\n} from \"../common/TestHelpers\";\nimport { SpatialType } from \"../../../src\";\nimport { GeospatialType } from \"../../../src\";\n\ndescribe(\"Containers\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  describe(\"Container CRUD\", function() {\n    const containerCRUDTest = async function(partitionKey?: string): Promise<void> {\n      // create database\n      const database = await getTestDatabase(\"Validate Container CRUD\");\n\n      // create a container\n      const containerDefinition: ContainerRequest = {\n        id: \"sample container\",\n        indexingPolicy: { indexingMode: IndexingMode.consistent },\n        throughput: 400\n      };\n\n      if (partitionKey) {\n        containerDefinition.partitionKey = partitionKey;\n      }\n\n      const { resource: containerDef } = await database.containers.create(containerDefinition);\n      const container = database.container(containerDef.id);\n      assert.equal(containerDefinition.id, containerDef.id);\n      assert.equal(\"consistent\", containerDef.indexingPolicy.indexingMode);\n      if (containerDef.partitionKey) {\n        const comparePaths =\n          typeof containerDefinition.partitionKey === \"string\"\n            ? [containerDefinition.partitionKey]\n            : containerDefinition.partitionKey.paths;\n        assert.deepEqual(containerDef.partitionKey.paths, comparePaths);\n      }\n      // read containers after creation\n      const { resources: containers } = await database.containers.readAll().fetchAll();\n\n      assert.equal(containers.length, 1, \"create should increase the number of containers\");\n      // query containers\n      const querySpec = {\n        query: \"SELECT * FROM root r WHERE r.id=@id\",\n        parameters: [\n          {\n            name: \"@id\",\n            value: containerDefinition.id\n          }\n        ]\n      };\n      const { resources: results } = await database.containers.query(querySpec).fetchAll();\n      assert(results.length > 0, \"number of results for the query should be > 0\");\n\n      const { resources: ranges } = await container.readPartitionKeyRanges().fetchAll();\n      assert(ranges.length > 0, \"container should have at least 1 partition\");\n\n      // Replacing indexing policy is allowed.\n      containerDef.indexingPolicy.spatialIndexes = [\n        {\n          path: \"/region/?\",\n          types: [SpatialType.Polygon],\n          boundingBox: {\n            xmin: 0,\n            ymin: 0,\n            xmax: 10,\n            ymax: 10\n          }\n        }\n      ];\n\n      containerDef.geospatialConfig.type = GeospatialType.Geometry;\n      await container.replace(containerDef);\n\n      // Replacing partition key is not allowed.\n      try {\n        containerDef.partitionKey = { paths: [\"/key\"] };\n        await container.replace(containerDef);\n        assert.fail(\"Replacing partitionKey must throw\");\n      } catch (err) {\n        const badRequestErrorCode = 400;\n        assert.equal(\n          err.code,\n          badRequestErrorCode,\n          \"response should return error code \" + badRequestErrorCode\n        );\n      } finally {\n        containerDef.partitionKey = { paths: [partitionKey] }; // Resume partition key\n      }\n      // Replacing id is not allowed.\n      try {\n        containerDef.id = \"try_to_replace_id\";\n        await container.replace(containerDef);\n        assert.fail(\"Replacing container id must throw\");\n      } catch (err) {\n        const notFoundErrorCode = 400;\n        assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n      }\n\n      // read container\n      containerDef.id = containerDefinition.id; // Resume Id.\n      const { resource: readcontainer } = await container.read();\n      assert.equal(containerDefinition.id, readcontainer.id);\n\n      // delete container\n      await container.delete();\n\n      // read container after deletion\n      try {\n        await container.read();\n        assert.fail(\"Must fail to read container after delete\");\n      } catch (err) {\n        const notFoundErrorCode = 404;\n        assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n      }\n    };\n\n    it(\"Default partition key\", async function() {\n      await containerCRUDTest();\n    });\n\n    it(\"Custom partition key\", async function() {\n      await containerCRUDTest(\"/id\");\n    });\n\n    describe(\"Bad partition key definition\", async function() {\n      it(\"Has 'paths' property as string\", async function() {\n        // create database\n        const database = await getTestDatabase(\"container CRUD bad partition key\");\n\n        // create a container\n        const badPartitionKeyDefinition: any = {\n          paths: \"/id\" // This is invalid. Must be an array.\n        };\n\n        const containerDefinition: ContainerRequest = {\n          id: \"sample container\",\n          indexingPolicy: { indexingMode: IndexingMode.consistent },\n          partitionKey: badPartitionKeyDefinition // This is invalid, forced using type coersion\n        };\n\n        try {\n          await database.containers.create(containerDefinition);\n        } catch (err) {\n          assert.equal(err.code, 400);\n        }\n      });\n      it(\"Is missing leading '/'\", async function() {\n        // create database\n        const database = await getTestDatabase(\"container CRUD bad partition key\");\n\n        // create a container\n        const badPartitionKeyDefinition = \"id\";\n\n        const containerDefinition: ContainerRequest = {\n          id: \"sample container\",\n          indexingPolicy: { indexingMode: IndexingMode.consistent },\n          partitionKey: badPartitionKeyDefinition\n        };\n\n        try {\n          await database.containers.create(containerDefinition);\n          console.log(\"finish\");\n        } catch (err) {\n          assert.equal(err.message, \"Partition key must start with '/'\");\n        }\n      });\n    });\n  });\n\n  describe(\"Indexing policy\", function() {\n    it(\"Create container with correct indexing policy\", async function() {\n      // create database\n      const database = await getTestDatabase(\"container test database\");\n\n      // create container\n      const { resource: containerDef } = await database.containers.create({\n        id: \"container test container\"\n      });\n      const container = database.container(containerDef.id);\n\n      assert.equal(\n        containerDef.indexingPolicy.indexingMode,\n        IndexingMode.consistent,\n        \"default indexing mode should be consistent\"\n      );\n      await container.delete();\n\n      const uniqueKeysContainerDefinition: ContainerDefinition = {\n        id: \"uniqueKeysContainer\",\n        uniqueKeyPolicy: { uniqueKeys: [{ paths: [\"/foo\"] }] }\n      };\n\n      const { resource: uniqueKeysContainerDef } = await database.containers.create(\n        uniqueKeysContainerDefinition\n      );\n      const uniqueKeysContainer = database.container(uniqueKeysContainerDef.id);\n\n      assert.equal(uniqueKeysContainerDef.uniqueKeyPolicy.uniqueKeys[0].paths, \"/foo\");\n\n      await uniqueKeysContainer.delete();\n\n      const consistentcontainerDefinition: ContainerDefinition = {\n        id: \"lazy container\",\n        indexingPolicy: { indexingMode: \"consistent\" } // tests the type flexibility\n      };\n      const { resource: consistentContainerDef } = await database.containers.create(\n        consistentcontainerDefinition\n      );\n      const consistentContainer = database.container(consistentContainerDef.id);\n      assert.equal(\n        containerDef.indexingPolicy.indexingMode,\n        IndexingMode.consistent,\n        \"indexing mode should be consistent\"\n      );\n      await consistentContainer.delete();\n\n      const containerDefinition: ContainerDefinition = {\n        id: \"containerWithIndexingPolicy\",\n        indexingPolicy: {\n          automatic: true,\n          indexingMode: IndexingMode.consistent,\n          includedPaths: [\n            {\n              path: \"/*\"\n            }\n          ],\n          excludedPaths: [\n            {\n              path: '/\"systemMetadata\"/*'\n            }\n          ]\n        }\n      };\n\n      const { resource: containerWithIndexingPolicyDef } = await database.containers.create(\n        containerDefinition\n      );\n\n      // Two included paths.\n      assert.equal(\n        1,\n        containerWithIndexingPolicyDef.indexingPolicy.includedPaths.length,\n        \"Unexpected includedPaths length\"\n      );\n      // The first included path is what we created.\n      assert.equal(\"/*\", containerWithIndexingPolicyDef.indexingPolicy.includedPaths[0].path);\n      // And two excluded paths.\n      assert.equal(\n        2,\n        containerWithIndexingPolicyDef.indexingPolicy.excludedPaths.length,\n        \"Unexpected excludedPaths length\"\n      );\n      assert.equal(\n        '/\"systemMetadata\"/*',\n        containerWithIndexingPolicyDef.indexingPolicy.excludedPaths[0].path\n      );\n    });\n\n    const checkDefaultIndexingPolicyPaths = function(indexingPolicy: IndexingPolicy): void {\n      assert.equal(1, indexingPolicy[\"excludedPaths\"].length);\n      assert.equal(1, indexingPolicy[\"includedPaths\"].length);\n\n      let rootIncludedPath: IndexedPath = null;\n      if (indexingPolicy[\"includedPaths\"][0][\"path\"] === \"/*\") {\n        rootIncludedPath = indexingPolicy[\"includedPaths\"][0];\n      }\n\n      assert(rootIncludedPath); // root path should exist.\n    };\n    it(\"Create container with default indexing policy\", async function() {\n      // create database\n      const database = await getTestDatabase(\"container test database\");\n\n      // create container with no indexing policy specified.\n      const containerDefinition01: ContainerDefinition = { id: \"TestCreateDefaultPolicy01\" };\n      const { resource: containerNoIndexPolicyDef } = await database.containers.create(\n        containerDefinition01\n      );\n      checkDefaultIndexingPolicyPaths(containerNoIndexPolicyDef[\"indexingPolicy\"]);\n\n      // create container with default policy.\n      const containerDefinition03 = {\n        id: \"TestCreateDefaultPolicy03\",\n        indexingPolicy: {}\n      };\n      const { resource: containerDefaultPolicy } = await database.containers.create(\n        containerDefinition03\n      );\n      checkDefaultIndexingPolicyPaths((containerDefaultPolicy as any)[\"indexingPolicy\"]);\n\n      // create container with indexing policy missing indexes.\n      const containerDefinition04 = {\n        id: \"TestCreateDefaultPolicy04\",\n        indexingPolicy: {\n          includedPaths: [\n            {\n              path: \"/*\"\n            }\n          ]\n        }\n      };\n      const { resource: containerMissingIndexes } = await database.containers.create(\n        containerDefinition04\n      );\n      checkDefaultIndexingPolicyPaths((containerMissingIndexes as any)[\"indexingPolicy\"]);\n\n      // create container with indexing policy missing precision.\n      const containerDefinition05 = {\n        id: \"TestCreateDefaultPolicy05\",\n        indexingPolicy: {\n          includedPaths: [\n            {\n              path: \"/*\",\n              indexes: [\n                {\n                  kind: IndexKind.Range,\n                  dataType: DataType.String\n                },\n                {\n                  kind: IndexKind.Range,\n                  dataType: DataType.Number\n                }\n              ]\n            }\n          ]\n        }\n      };\n      const { resource: containerMissingPrecision } = await database.containers.create(\n        containerDefinition05\n      );\n      checkDefaultIndexingPolicyPaths((containerMissingPrecision as any)[\"indexingPolicy\"]);\n    });\n  });\n\n  describe(\"Validate response headers\", function() {\n    const createThenReadcontainer = async function(\n      database: Database,\n      definition: ContainerDefinition\n    ): Promise<ContainerResponse> {\n      const { container: createdcontainer } = await database.containers.create(definition);\n      const response = await database\n        .container(createdcontainer.id)\n        .read({ populateQuotaInfo: true });\n      return response;\n    };\n\n    const indexProgressHeadersTest = async function(): Promise<void> {\n      const database = await getTestDatabase(\"Validate response headers\");\n      const { headers: headers1 } = await createThenReadcontainer(database, {\n        id: \"consistent_coll\"\n      });\n      assert.notEqual(headers1[Constants.HttpHeaders.IndexTransformationProgress], undefined);\n      assert.equal(headers1[Constants.HttpHeaders.LazyIndexingProgress], undefined);\n\n      const noneContainerDefinition = {\n        id: \"none_coll\",\n        indexingPolicy: { indexingMode: IndexingMode.none, automatic: false }\n      };\n      const { headers: headers3 } = await createThenReadcontainer(\n        database,\n        noneContainerDefinition\n      );\n      assert.notEqual(headers3[Constants.HttpHeaders.IndexTransformationProgress], undefined);\n      assert.equal(headers3[Constants.HttpHeaders.LazyIndexingProgress], undefined);\n    };\n\n    it(\"nativeApi Validate index progress headers name based\", async function() {\n      await indexProgressHeadersTest();\n    });\n  });\n});\n\ndescribe(\"createIfNotExists\", function() {\n  let database: Database;\n  before(async function() {\n    // create database\n    database = await getTestDatabase(\"containers.createIfNotExists\");\n  });\n\n  it(\"should handle container does not exist\", async function() {\n    const def: ContainerDefinition = { id: \"does not exist\" };\n    const { container } = await database.containers.createIfNotExists(def);\n    const { resource: readDef } = await container.read();\n    assert.equal(def.id, readDef.id);\n  });\n\n  it(\"should handle container exists\", async function() {\n    const def: ContainerDefinition = { id: \"does exist\" };\n    await database.containers.create(def);\n\n    const { container } = await database.containers.createIfNotExists(def);\n    const { resource: readDef } = await container.read();\n    assert.equal(def.id, readDef.id);\n  });\n});\n\ndescribe(\"container.readOffer\", function() {\n  let containerWithOffer: Container;\n  let containerWithoutOffer: Container;\n  let container2WithOffer: Container;\n  let container2WithoutOffer: Container;\n  const containerRequestWithOffer: ContainerRequest = {\n    id: \"sample\",\n    throughput: 400\n  };\n  const containerRequest: ContainerRequest = {\n    id: \"sample-offerless\"\n  };\n  let offerDatabase: Database;\n  before(async function() {\n    offerDatabase = await getTestDatabase(\"has offer\");\n    containerWithOffer = await getTestContainer(\n      \"offerContainer\",\n      undefined,\n      containerRequestWithOffer\n    );\n    containerWithoutOffer = await getTestContainer(\"container\", undefined, containerRequest);\n    const response1 = await offerDatabase.containers.create(containerRequestWithOffer);\n    const response2 = await offerDatabase.containers.create(containerRequest);\n    container2WithOffer = response1.container;\n    container2WithoutOffer = response2.container;\n  });\n  describe(\"database does not have offer\", function() {\n    it(\"has offer\", async function() {\n      const offer: any = await containerWithOffer.readOffer();\n      const { resource: readDef } = await containerWithOffer.read();\n      assert.equal(offer.resource.offerResourceId, readDef._rid);\n    });\n    it(\"does not have offer so uses default\", async function() {\n      const offer: any = await containerWithoutOffer.readOffer();\n      const { resource: readDef } = await containerWithoutOffer.read();\n      assert.equal(offer.resource.offerResourceId, readDef._rid);\n    });\n  });\n  describe(\"database has offer\", function() {\n    it(\"container does not have offer\", async function() {\n      const offer: any = await container2WithoutOffer.readOffer();\n      const { resource: readDef } = await container2WithoutOffer.read();\n      assert.equal(offer.resource.offerResourceId, readDef._rid);\n    });\n    it(\"container has offer\", async function() {\n      const offer: any = await container2WithOffer.readOffer();\n      const { resource: readDef } = await container2WithOffer.read();\n      assert.equal(offer.resource.offerResourceId, readDef._rid);\n    });\n  });\n});\n\ndescribe(\"container.create\", function() {\n  let database: Database;\n  before(async () => {\n    database = await getTestDatabase(\"autoscale test\");\n  });\n  it(\"uses autoscale\", async function() {\n    const maxThroughput = 50000;\n    const containerRequest: ContainerRequest = {\n      id: \"sample\",\n      maxThroughput\n    };\n    const { container } = await database.containers.create(containerRequest);\n    const { resource: offer } = await container.readOffer();\n    const settings = offer.content.offerAutopilotSettings;\n    assert.equal(settings.maxThroughput, maxThroughput);\n  });\n  it(\"throws with maxThroughput and throughput\", function() {\n    const containerRequest: ContainerRequest = {\n      id: \"sample\",\n      throughput: 400,\n      maxThroughput: 400\n    };\n    assertThrowsAsync(() => database.containers.create(containerRequest));\n  });\n});\n"]}