{"version":3,"file":"permission.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/permission.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { PermissionMode } from \"../../../src\";\nimport { PermissionDefinition } from \"../../../src\";\nimport {\n  createOrUpsertPermission,\n  getTestContainer,\n  removeAllDatabases,\n  replaceOrUpsertPermission\n} from \"../common/TestHelpers\";\n\ndescribe(\"NodeJS CRUD Tests\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n  describe(\"Validate Permission CRUD\", function() {\n    const permissionCRUDTest = async function(isUpsertTest: boolean): Promise<void> {\n      // create container & database\n      const container = await getTestContainer(\"Validate Permission Crud\");\n\n      // create user\n      const { resource: userDef } = await container.database.users.create({ id: \"new user\" });\n      const user = container.database.user(userDef.id);\n      // list permissions\n      const { resources: permissions } = await user.permissions.readAll().fetchAll();\n      assert.equal(permissions.constructor, Array, \"Value should be an array\");\n      const beforeCreateCount = permissions.length;\n      const permissionDef: PermissionDefinition = {\n        id: \"new permission\",\n        permissionMode: PermissionMode.Read,\n        resource: container.url\n      };\n\n      // create permission\n      const { resource: createdPermission } = await createOrUpsertPermission(\n        user,\n        permissionDef,\n        undefined,\n        isUpsertTest\n      );\n      let permission = user.permission(createdPermission.id);\n      assert.equal(createdPermission.id, \"new permission\", \"permission name error\");\n\n      // list permissions after creation\n      const { resources: permissionsAfterCreation } = await user.permissions.readAll().fetchAll();\n      assert.equal(permissionsAfterCreation.length, beforeCreateCount + 1);\n\n      // query permissions\n      const querySpec = {\n        query: \"SELECT * FROM root r WHERE r.id=@id\",\n        parameters: [\n          {\n            name: \"@id\",\n            value: permissionDef.id\n          }\n        ]\n      };\n      const { resources: results } = await user.permissions.query(querySpec).fetchAll();\n      assert(results.length > 0, \"number of results for the query should be > 0\");\n\n      permissionDef.permissionMode = PermissionMode.All;\n      const { resource: replacedPermission } = await replaceOrUpsertPermission(\n        user,\n        permissionDef,\n        undefined,\n        isUpsertTest\n      );\n      assert.equal(\n        replacedPermission.permissionMode,\n        PermissionMode.All,\n        \"permission mode should change\"\n      );\n      assert.equal(permissionDef.id, replacedPermission.id, \"permission id should stay the same\");\n\n      // to change the id of an existing resourcewe have to use replace\n      permissionDef.id = \"replaced permission\";\n      const { resource: replacedPermission2 } = await permission.replace(permissionDef);\n      assert.equal(replacedPermission2.id, \"replaced permission\", \"permission name should change\");\n      assert.equal(permissionDef.id, replacedPermission2.id, \"permission id should stay the same\");\n      permission = user.permission(replacedPermission2.id);\n\n      // read permission\n      const { resource: permissionAfterReplace } = await permission.read();\n      assert.equal(permissionAfterReplace.id, permissionDef.id);\n\n      // delete permission\n      await permission.delete();\n\n      // read permission after deletion\n      try {\n        await permission.read();\n        assert.fail(\"Must fail to read permission after deletion\");\n      } catch (err) {\n        const notFoundErrorCode = 404;\n        assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n      }\n    };\n\n    const permissionCRUDOverMultiplePartitionsTest = async function(\n      isUpsertTest: boolean\n    ): Promise<void> {\n      // create database\n      // create container\n      const partitionKey = \"id\";\n      const containerDefinition = {\n        id: \"coll1\",\n        partitionKey: { paths: [\"/\" + partitionKey] }\n      };\n      const container = await getTestContainer(\n        \"permission CRUD over multiple partitions\",\n        undefined,\n        containerDefinition\n      );\n\n      // create user\n      const { resource: userDef } = await container.database.users.create({ id: \"new user\" });\n      const user = container.database.user(userDef.id);\n\n      // list permissions\n      const { resources: permissions } = await user.permissions.readAll().fetchAll();\n      assert(Array.isArray(permissions), \"Value should be an array\");\n      const beforeCreateCount = permissions.length;\n      const permissionDefinition = {\n        id: \"new permission\",\n        permissionMode: PermissionMode.Read,\n        resource: container.url,\n        resourcePartitionKey: [1]\n      };\n\n      // create permission\n      const response = await createOrUpsertPermission(\n        user,\n        permissionDefinition,\n        undefined,\n        isUpsertTest\n      );\n      const permissionDef = response.resource;\n      let permission = user.permission(permissionDef.id);\n      assert.equal(permissionDef.id, permissionDefinition.id, \"permission name error\");\n      assert.equal(\n        JSON.stringify(permissionDef.resourcePartitionKey),\n        JSON.stringify(permissionDefinition.resourcePartitionKey),\n        \"permission resource partition key error\"\n      );\n\n      // list permissions after creation\n      const { resources: permissionsAfterCreation } = await user.permissions.readAll().fetchAll();\n      assert.equal(permissionsAfterCreation.length, beforeCreateCount + 1);\n\n      // query permissions\n      const querySpec = {\n        query: \"SELECT * FROM root r WHERE r.id=@id\",\n        parameters: [\n          {\n            name: \"@id\",\n            value: permissionDef.id\n          }\n        ]\n      };\n      const { resources: results } = await user.permissions.query(querySpec).fetchAll();\n      assert(results.length > 0, \"number of results for the query should be > 0\");\n\n      // Replace permission\n      permissionDef.permissionMode = PermissionMode.All;\n      const { resource: replacedPermission } = await replaceOrUpsertPermission(\n        user,\n        permissionDef,\n        undefined,\n        isUpsertTest\n      );\n      assert.equal(\n        replacedPermission.permissionMode,\n        PermissionMode.All,\n        \"permission mode should change\"\n      );\n      assert.equal(replacedPermission.id, permissionDef.id, \"permission id should stay the same\");\n      assert.equal(\n        JSON.stringify(replacedPermission.resourcePartitionKey),\n        JSON.stringify(permissionDef.resourcePartitionKey),\n        \"permission resource partition key error\"\n      );\n\n      // to change the id of an existing resourcewe have to use replace\n      permissionDef.id = \"replaced permission\";\n      const { resource: replacedPermission2 } = await permission.replace(permissionDef);\n      assert.equal(replacedPermission2.id, permissionDef.id);\n      permission = user.permission(replacedPermission2.id);\n\n      // read permission\n      const { resource: permissionAfterReplace } = await permission.read();\n      assert.equal(permissionAfterReplace.id, replacedPermission2.id);\n\n      // delete permission\n      await permission.delete();\n\n      // read permission after deletion\n      try {\n        await permission.read();\n        assert.fail(\"Must throw on read after delete\");\n      } catch (err) {\n        const notFoundErrorCode = 404;\n        assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n      }\n    };\n\n    it(\"nativeApi Should do Permission CRUD operations successfully name based\", async function() {\n      await permissionCRUDTest(false);\n    });\n\n    it(\"nativeApi Should do Permission CRUD operations successfully name based with upsert\", async function() {\n      await permissionCRUDTest(true);\n    });\n\n    it(\"nativeApi Should do Permission CRUD operations over multiple partitions successfully name based\", async function() {\n      await permissionCRUDOverMultiplePartitionsTest(false);\n    });\n\n    it(\"nativeApi Should do Permission CRUD operations over multiple partitions successfully with upsert\", async function() {\n      await permissionCRUDOverMultiplePartitionsTest(true);\n    });\n  });\n});\n"]}