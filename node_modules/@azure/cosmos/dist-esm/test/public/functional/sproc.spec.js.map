{"version":3,"file":"sproc.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/sproc.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Context } from \"mocha\";\nimport { Suite } from \"mocha\";\nimport { Constants } from \"../../../src\";\nimport { Container, StoredProcedureDefinition } from \"../../../src/\";\nimport {\n  bulkInsertItems,\n  getTestContainer,\n  getTestDatabase,\n  removeAllDatabases\n} from \"../common/TestHelpers\";\n\n// Used for sproc\ndeclare let getContext: any;\n\ndescribe(\"NodeJS CRUD Tests\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n  describe(\"Validate sproc CRUD\", function() {\n    let container: Container;\n    beforeEach(async function(this: Context) {\n      container = await getTestContainer(this.test.fullTitle());\n    });\n\n    it(\"nativeApi Should do sproc CRUD operations successfully with create/replace\", async function() {\n      // read sprocs\n      const { resources: sprocs } = await container.scripts.storedProcedures.readAll().fetchAll();\n      assert.equal(sprocs.constructor, Array, \"Value should be an array\");\n\n      // create a sproc\n      const beforeCreateSprocsCount = sprocs.length;\n      const sprocDefinition: StoredProcedureDefinition = {\n        id: \"sample sproc\",\n        body: \"function () { const x = 10; }\"\n      };\n\n      const { resource: sproc } = await container.scripts.storedProcedures.create(sprocDefinition);\n\n      assert.equal(sproc.id, sprocDefinition.id);\n      assert.equal(sproc.body, \"function () { const x = 10; }\");\n\n      // read sprocs after creation\n      const {\n        resources: sprocsAfterCreation\n      } = await container.scripts.storedProcedures.readAll().fetchAll();\n      assert.equal(\n        sprocsAfterCreation.length,\n        beforeCreateSprocsCount + 1,\n        \"create should increase the number of sprocs\"\n      );\n\n      // query sprocs\n      const querySpec = {\n        query: \"SELECT * FROM root r\"\n      };\n      const { resources: queriedSprocs } = await container.scripts.storedProcedures\n        .query(querySpec)\n        .fetchAll();\n      assert(queriedSprocs.length > 0, \"number of sprocs for the query should be > 0\");\n\n      // replace sproc\n      // prettier-ignore\n      sproc.body = function () { const x = 20; console.log(x); };\n      const { resource: replacedSproc } = await container.scripts\n        .storedProcedure(sproc.id)\n        .replace(sproc);\n\n      assert.equal(replacedSproc.id, sproc.id);\n      assert.equal(replacedSproc.body, \"function () { const x = 20; console.log(x); }\");\n\n      // read sproc\n      const { resource: sprocAfterReplace } = await container.scripts\n        .storedProcedure(replacedSproc.id)\n        .read();\n      assert.equal(replacedSproc.id, sprocAfterReplace.id);\n\n      // delete sproc\n      await container.scripts.storedProcedure(replacedSproc.id).delete();\n\n      // read sprocs after deletion\n      try {\n        await container.scripts.storedProcedure(replacedSproc.id).read();\n        assert.fail(\"Must fail to read sproc after deletion\");\n      } catch (err) {\n        const notFoundErrorCode = 404;\n        assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n      }\n    });\n  });\n\n  describe(\"Validate stored procedure functionality\", function() {\n    let container: Container;\n    beforeEach(async function(this: Context) {\n      container = await getTestContainer(this.test.fullTitle());\n    });\n\n    it(\"nativeApi should do stored procedure operations successfully with create/replace\", async function() {\n      const sproc1: StoredProcedureDefinition = {\n        id: \"storedProcedure1\",\n        body: function() {\n          for (let i = 0; i < 1000; i++) {\n            const item = getContext()\n              .getResponse()\n              .getBody();\n            if (i > 0 && item !== i - 1) throw \"body mismatch\";\n            getContext()\n              .getResponse()\n              .setBody(i);\n          }\n        }\n      };\n\n      const sproc2: StoredProcedureDefinition = {\n        id: \"storedProcedure2\",\n        body: function() {\n          for (let i = 0; i < 10; i++) {\n            getContext()\n              .getResponse()\n              .appendValue(\"Body\", i);\n          }\n        }\n      };\n\n      const sproc3: StoredProcedureDefinition = {\n        id: \"storedProcedure3\",\n        // TODO: I put any in here, but not sure how this will work...\n        body: function(input: any) {\n          getContext()\n            .getResponse()\n            .setBody(\"a\" + input.temp);\n        }\n      };\n\n      const { resource: retrievedSproc } = await container.scripts.storedProcedures.create(sproc1);\n      const { resource: result } = await container.scripts\n        .storedProcedure(retrievedSproc.id)\n        .execute(undefined);\n      assert.equal(result, 999);\n\n      const { resource: retrievedSproc2 } = await container.scripts.storedProcedures.create(sproc2);\n      const { resource: result2 } = await container.scripts\n        .storedProcedure(retrievedSproc2.id)\n        .execute(undefined);\n      assert.equal(result2, 123456789);\n      const { resource: retrievedSproc3 } = await container.scripts.storedProcedures.create(sproc3);\n      const { resource: result3 } = await container.scripts\n        .storedProcedure(retrievedSproc3.id)\n        .execute(undefined, [{ temp: \"so\" }]);\n      assert.equal(result3, \"aso\");\n    });\n  });\n\n  it(\"nativeApi Should execute stored procedure with partition key successfully name based\", async function() {\n    const database = await getTestDatabase(\"sproc test database\");\n    // create container\n    const partitionKey = \"key\";\n\n    const containerDefinition = {\n      id: \"coll1\",\n      partitionKey: { paths: [\"/\" + partitionKey] }\n    };\n\n    const { resource: containerResult } = await database.containers.create(containerDefinition, {\n      offerThroughput: 12000\n    });\n    const container = await database.container(containerResult.id);\n\n    const querySproc = {\n      id: \"querySproc\",\n      body: function() {\n        const context = getContext();\n        const container2 = context.getCollection();\n        const response = context.getResponse();\n\n        // query for players\n        const query = \"SELECT r.id, r.key, r.prop FROM r\";\n        const accept = container2.queryDocuments(container2.getSelfLink(), query, {}, function(\n          err: any,\n          documents: any\n        ) {\n          if (err) throw new Error(\"Error\" + err.message);\n          response.setBody(documents);\n        });\n\n        if (!accept) throw \"Unable to read player details, abort \";\n      }\n    };\n\n    const documents = [\n      { id: \"document1\" },\n      { id: \"document2\", key: null, prop: 1 },\n      { id: \"document3\", key: false, prop: 1 },\n      { id: \"document4\", key: true, prop: 1 },\n      { id: \"document5\", key: 1, prop: 1 },\n      { id: \"document6\", key: \"A\", prop: 1 }\n    ];\n\n    await bulkInsertItems(container, documents);\n    const { resource: sproc } = await container.scripts.storedProcedures.create(querySproc);\n    const { resource: result } = await container.scripts\n      .storedProcedure(sproc.id)\n      .execute(null, []);\n    assert(result !== undefined);\n    assert.equal(result.length, 1);\n    assert.equal(JSON.stringify(result[0]), JSON.stringify(documents[1]));\n\n    const { resource: result2 } = await container.scripts\n      .storedProcedure(sproc.id)\n      .execute(1, null);\n    assert(result2 !== undefined);\n    assert.equal(result2.length, 1);\n    assert.equal(JSON.stringify(result2[0]), JSON.stringify(documents[4]));\n  });\n\n  it(\"nativeApi Should enable/disable script logging while executing stored procedure\", async function() {\n    // create database\n    const database = await getTestDatabase(\"sproc test database\");\n    // create container\n    const { resource: containerResult } = await database.containers.create({\n      id: \"sample container\"\n    });\n\n    const container = await database.container(containerResult.id);\n    const sproc1 = {\n      id: \"storedProcedure\",\n      body: function() {\n        const mytext = \"x\";\n        const myval = 1;\n        try {\n          console.log(\"The value of %s is %s.\", mytext, myval);\n          getContext()\n            .getResponse()\n            .setBody(\"Success!\");\n        } catch (err) {\n          getContext()\n            .getResponse()\n            .setBody(\"inline err: [\" + err.number + \"] \" + err);\n        }\n      }\n    };\n\n    const { resource: retrievedSproc } = await container.scripts.storedProcedures.create(sproc1);\n    const { resource: result1, headers: headers1 } = await container.scripts\n      .storedProcedure(retrievedSproc.id)\n      .execute(undefined);\n    assert.equal(result1, \"Success!\");\n    assert.equal(headers1[Constants.HttpHeaders.ScriptLogResults], undefined);\n\n    let requestOptions = { enableScriptLogging: true };\n    const { resource: result2, headers: headers2 } = await container.scripts\n      .storedProcedure(retrievedSproc.id)\n      .execute(undefined, [], requestOptions);\n    assert.equal(result2, \"Success!\");\n    assert.equal(\n      headers2[Constants.HttpHeaders.ScriptLogResults],\n      encodeURIComponent(\"The value of x is 1.\")\n    );\n\n    requestOptions = { enableScriptLogging: false };\n    const { resource: result3, headers: headers3 } = await container.scripts\n      .storedProcedure(retrievedSproc.id)\n      .execute(undefined, [], requestOptions);\n    assert.equal(result3, \"Success!\");\n    assert.equal(headers3[Constants.HttpHeaders.ScriptLogResults], undefined);\n  });\n});\n"]}