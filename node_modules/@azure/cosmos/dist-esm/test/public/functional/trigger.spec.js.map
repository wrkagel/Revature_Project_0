{"version":3,"file":"trigger.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/trigger.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { TriggerOperation, TriggerType } from \"../../../src\";\nimport { TriggerDefinition, Container } from \"../../../src\";\nimport { getTestContainer, removeAllDatabases } from \"../common/TestHelpers\";\n\nconst notFoundErrorCode = 404;\n\n// Mock for trigger function bodies\ndeclare let getContext: any;\n\ndescribe(\"NodeJS CRUD Tests\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  let container: Container;\n\n  beforeEach(async function() {\n    await removeAllDatabases();\n    container = await getTestContainer(\"trigger container\");\n  });\n\n  describe(\"Validate Trigger CRUD\", function() {\n    it(\"nativeApi Should do trigger CRUD operations successfully name based\", async function() {\n      // read triggers\n      const { resources: triggers } = await container.scripts.triggers.readAll().fetchAll();\n      assert.equal(Array.isArray(triggers), true);\n\n      // create a trigger\n      const beforeCreateTriggersCount = triggers.length;\n      const triggerDefinition: TriggerDefinition = {\n        id: \"sample trigger\",\n        body: \"serverScript() { var x = 10; }\",\n        triggerType: TriggerType.Pre,\n        triggerOperation: TriggerOperation.All\n      };\n\n      const { resource: trigger } = await container.scripts.triggers.create(triggerDefinition);\n\n      assert.equal(trigger.id, triggerDefinition.id);\n      assert.equal(trigger.body, \"serverScript() { var x = 10; }\");\n\n      // read triggers after creation\n      const {\n        resources: triggersAfterCreation\n      } = await container.scripts.triggers.readAll().fetchAll();\n      assert.equal(\n        triggersAfterCreation.length,\n        beforeCreateTriggersCount + 1,\n        \"create should increase the number of triggers\"\n      );\n\n      // query triggers\n      const querySpec = {\n        query: \"SELECT * FROM root r WHERE r.id=@id\",\n        parameters: [\n          {\n            name: \"@id\",\n            value: triggerDefinition.id\n          }\n        ]\n      };\n      const { resources: results } = await container.scripts.triggers.query(querySpec).fetchAll();\n      assert(results.length > 0, \"number of results for the query should be > 0\");\n\n      // replace trigger\n      // prettier-ignore\n      trigger.body = function () { const x = 20; console.log(x); };\n      const { resource: replacedTrigger } = await container.scripts\n        .trigger(trigger.id)\n        .replace(trigger);\n\n      assert.equal(replacedTrigger.id, trigger.id);\n      assert.equal(replacedTrigger.body, \"function () { const x = 20; console.log(x); }\");\n\n      // read trigger\n      const { resource: triggerAfterReplace } = await container.scripts\n        .trigger(replacedTrigger.id)\n        .read();\n      assert.equal(replacedTrigger.id, triggerAfterReplace.id);\n\n      // delete trigger\n      await await container.scripts.trigger(replacedTrigger.id).delete();\n\n      // read triggers after deletion\n      try {\n        await container.scripts.trigger(replacedTrigger.id).read();\n        assert.fail(\"Must fail to read after deletion\");\n      } catch (err) {\n        assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n      }\n    });\n  });\n\n  describe(\"validate trigger functionality\", function() {\n    const triggers: TriggerDefinition[] = [\n      {\n        id: \"t1\",\n        body: function() {\n          const item = getContext()\n            .getRequest()\n            .getBody();\n          item.id = item.id.toUpperCase() + \"t1\";\n          getContext()\n            .getRequest()\n            .setBody(item);\n        },\n        triggerType: TriggerType.Pre,\n        triggerOperation: TriggerOperation.All\n      },\n      {\n        id: \"t2\",\n        body: \"function() { }\", // trigger already stringified\n        triggerType: TriggerType.Pre,\n        triggerOperation: TriggerOperation.All\n      },\n      {\n        id: \"t3\",\n        body: function() {\n          const item = getContext()\n            .getRequest()\n            .getBody();\n          item.id = item.id.toLowerCase() + \"t3\";\n          getContext()\n            .getRequest()\n            .setBody(item);\n        },\n        triggerType: TriggerType.Pre,\n        triggerOperation: TriggerOperation.All\n      },\n      {\n        id: \"response1\",\n        body: function() {\n          const prebody = getContext()\n            .getRequest()\n            .getBody();\n          if (prebody.id !== \"TESTING POST TRIGGERt1\") throw \"name mismatch\";\n          const postbody = getContext()\n            .getResponse()\n            .getBody();\n          if (postbody.id !== \"TESTING POST TRIGGERt1\") throw \"name mismatch\";\n        },\n        triggerType: TriggerType.Post,\n        triggerOperation: TriggerOperation.All\n      },\n      {\n        id: \"triggerOpType\",\n        body: \"function() { }\",\n        triggerType: TriggerType.Post,\n        triggerOperation: TriggerOperation.Delete\n      }\n    ];\n\n    it(\"should do trigger operations successfully with create\", async function() {\n      for (const trigger of triggers) {\n        await container.scripts.triggers.create(trigger);\n      }\n      // create document\n      const { resource: document } = await container.items.create(\n        { id: \"doc1\", key: \"value\" },\n        { preTriggerInclude: \"t1\" }\n      );\n      assert.equal(document.id, \"DOC1t1\", \"name should be capitalized\");\n      const { resource: document2 } = await container.items.create(\n        { id: \"doc2\", key2: \"value2\" },\n        { preTriggerInclude: \"t2\" }\n      );\n      assert.equal(document2.id, \"doc2\", \"name shouldn't change\");\n      const { resource: document3 } = await container.items.create(\n        { id: \"Doc3\", prop: \"empty\" },\n        { preTriggerInclude: \"t3\" }\n      );\n      assert.equal(document3.id, \"doc3t3\");\n      const { resource: document4 } = await container.items.create(\n        { id: \"testing post trigger\" },\n        { postTriggerInclude: \"response1\", preTriggerInclude: \"t1\" }\n      );\n      assert.equal(document4.id, \"TESTING POST TRIGGERt1\");\n      const { resource: document5 } = await container.items.create(\n        { id: \"responseheaders\" },\n        { preTriggerInclude: \"t1\" }\n      );\n      assert.equal(document5.id, \"RESPONSEHEADERSt1\");\n      try {\n        await container.items.create({ id: \"Docoptype\" }, { postTriggerInclude: \"triggerOpType\" });\n        assert.fail(\"Must fail\");\n      } catch (err) {\n        assert.equal(err.code, 400, \"Must throw when using a DELETE trigger on a CREATE operation\");\n      }\n    });\n  });\n});\n"]}