{"version":3,"file":"offer.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/offer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Context } from \"mocha\";\nimport { Suite } from \"mocha\";\nimport { Constants, CosmosClient } from \"../../../src\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\nimport { getTestContainer, removeAllDatabases } from \"../common/TestHelpers\";\n\nconst client = new CosmosClient({\n  endpoint,\n  key: masterKey,\n  connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n});\n\nconst validateOfferResponseBody = function(offer: any): void {\n  assert(offer.id, \"Id cannot be null\");\n  assert(offer._rid, \"Resource Id (Rid) cannot be null\");\n  assert(offer._self, \"Self Link cannot be null\");\n  assert(offer.resource, \"Resource Link cannot be null\");\n  assert(offer._self.indexOf(offer.id) !== -1, \"Offer id not contained in offer self link.\");\n};\n\ndescribe(\"NodeJS CRUD Tests\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n\n  beforeEach(async function(this: Context) {\n    this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n    await removeAllDatabases();\n  });\n\n  describe(\"Validate Offer CRUD\", function() {\n    it(\"nativeApi Should do offer read and query operations successfully name based single partition collection\", async function() {\n      const mbInBytes = 1024 * 1024;\n      const offerThroughput = 400;\n      const container = await getTestContainer(\"Validate Offer CRUD\");\n\n      const { headers } = await container.read({ populateQuotaInfo: true });\n\n      // Validate the collection size quota\n      assert.notEqual(headers[Constants.HttpHeaders.MaxResourceQuota], null);\n      assert.notEqual(headers[Constants.HttpHeaders.MaxResourceQuota], \"\");\n      const collectionSize: number = Number(\n        (headers[Constants.HttpHeaders.MaxResourceQuota] as string)\n          .split(\";\")\n          .reduce((map: any, obj: string) => {\n            const items = obj.split(\"=\");\n            map[items[0]] = items[1];\n            return map;\n          }, {}).collectionSize\n      );\n      assert.equal(collectionSize, 10 * mbInBytes, \"Collection size is unexpected\");\n\n      const { resources: offers } = await client.offers.readAll().fetchAll();\n      assert.equal(offers.length, 1);\n      const expectedOffer = offers[0];\n      assert.equal(\n        expectedOffer.content.offerThroughput,\n        offerThroughput,\n        \"Expected offerThroughput to be \" + offerThroughput\n      );\n      validateOfferResponseBody(expectedOffer);\n\n      // Read the offer\n      const { resource: readOffer } = await client.offer(expectedOffer.id).read();\n      validateOfferResponseBody(readOffer);\n      // Check if the read offer is what we expected.\n      assert.equal(expectedOffer.id, readOffer.id);\n      assert.equal(expectedOffer._rid, readOffer._rid);\n      assert.equal(expectedOffer._self, readOffer._self);\n      assert.equal(expectedOffer.resource, readOffer.resource);\n\n      // Query for offer.\n      const querySpec = {\n        query: \"select * FROM root r WHERE r.id=@id\",\n        parameters: [\n          {\n            name: \"@id\",\n            value: expectedOffer.id\n          }\n        ]\n      };\n      const { resources: offers2 } = await client.offers.query(querySpec).fetchAll();\n      assert.equal(offers2.length, 1);\n      const oneOffer = offers2[0];\n      validateOfferResponseBody(oneOffer);\n      // Now delete the collection.\n      await container.delete();\n      // read offer after deleting collection.\n      try {\n        await client.offer(expectedOffer.id).read();\n        assert.fail(\"Must throw after delete\");\n      } catch (err) {\n        const notFoundErrorCode = 404;\n        assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n      }\n    });\n\n    it(\"nativeApi Should do offer replace operations successfully name based\", async function() {\n      await getTestContainer(\"Validate Offer CRUD\");\n      const { resources: offers } = await client.offers.readAll().fetchAll();\n      assert.equal(offers.length, 1);\n      const expectedOffer = offers[0];\n      validateOfferResponseBody(expectedOffer);\n      // Replace the offer.\n      const offerToReplace = Object.assign({}, expectedOffer);\n      const oldThroughput = offerToReplace.content.offerThroughput;\n      offerToReplace.content.offerThroughput = oldThroughput + 100;\n      const { resource: replacedOffer } = await client\n        .offer(offerToReplace.id)\n        .replace(offerToReplace);\n      validateOfferResponseBody(replacedOffer);\n      // Check if the replaced offer is what we expect.\n      assert.equal(replacedOffer.id, offerToReplace.id);\n      assert.equal(replacedOffer._rid, offerToReplace._rid);\n      assert.equal(replacedOffer._self, offerToReplace._self);\n      assert.equal(replacedOffer.resource, offerToReplace.resource);\n      assert.equal(replacedOffer.content.offerThroughput, offerToReplace.content.offerThroughput);\n      // Replace an offer with a bad id.\n      try {\n        const offerBadId = Object.assign({}, offerToReplace);\n        offerBadId._rid = \"NotAllowed\";\n        await client.offer(offerBadId._self).replace(offerBadId);\n        assert.fail(\"Must throw after replace with bad id\");\n      } catch (err) {\n        // check for 400 or 401 since some backends validate auth first\n        assert(err.code === 400 || err.code === 401);\n      }\n    });\n  });\n});\n"]}