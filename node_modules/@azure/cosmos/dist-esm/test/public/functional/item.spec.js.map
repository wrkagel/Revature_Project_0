{"version":3,"file":"item.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/item.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { Container, CosmosClient, PatchOperation, PatchOperationType } from \"../../../src\";\nimport { ItemDefinition } from \"../../../src\";\nimport {\n  bulkDeleteItems,\n  bulkInsertItems,\n  bulkQueryItemsWithPartitionKey,\n  bulkReadItems,\n  bulkReplaceItems,\n  createOrUpsertItem,\n  getTestDatabase,\n  removeAllDatabases,\n  replaceOrUpsertItem,\n  addEntropy,\n  getTestContainer\n} from \"../common/TestHelpers\";\nimport { BulkOperationType, OperationInput } from \"../../../src\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\n\ninterface TestItem {\n  id?: string;\n  name?: string;\n  foo?: string;\n  key?: string;\n  replace?: string;\n}\n\ndescribe(\"Item CRUD\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n  const documentCRUDTest = async function(isUpsertTest: boolean): Promise<void> {\n    // create database\n    const database = await getTestDatabase(\"sample 中文 database\");\n    // create container\n    const { resource: containerdef } = await database.containers.create({ id: \"sample container\" });\n    const container: Container = database.container(containerdef.id);\n\n    // read items\n    const { resources: items } = await container.items.readAll().fetchAll();\n    assert(Array.isArray(items), \"Value should be an array\");\n\n    // create an item\n    const beforeCreateDocumentsCount = items.length;\n    const itemDefinition: TestItem = {\n      name: \"sample document\",\n      foo: \"bar\",\n      key: \"value\",\n      replace: \"new property\"\n    };\n    try {\n      await createOrUpsertItem(\n        container,\n        itemDefinition,\n        { disableAutomaticIdGeneration: true },\n        isUpsertTest\n      );\n      assert.fail(\"id generation disabled must throw with invalid id\");\n    } catch (err) {\n      assert(\n        err !== undefined,\n        \"should throw an error because automatic id generation is disabled\"\n      );\n    }\n    const { resource: document } = await createOrUpsertItem(\n      container,\n      itemDefinition,\n      undefined,\n      isUpsertTest\n    );\n    assert.equal(document.name, itemDefinition.name);\n    assert(document.id !== undefined);\n    // read documents after creation\n    const { resources: documents2 } = await container.items.readAll().fetchAll();\n    assert.equal(\n      documents2.length,\n      beforeCreateDocumentsCount + 1,\n      \"create should increase the number of documents\"\n    );\n    // query documents\n    const querySpec = {\n      query: \"SELECT * FROM root r WHERE r.id=@id\",\n      parameters: [\n        {\n          name: \"@id\",\n          value: document.id\n        }\n      ]\n    };\n    const { resources: results } = await container.items.query(querySpec).fetchAll();\n    assert(results.length > 0, \"number of results for the query should be > 0\");\n    const { resources: results2 } = await container.items.query(querySpec).fetchAll();\n    assert(results2.length > 0, \"number of results for the query should be > 0\");\n\n    // replace document\n    document.name = \"replaced document\";\n    document.foo = \"not bar\";\n    const { resource: replacedDocument } = await replaceOrUpsertItem(\n      container,\n      document,\n      undefined,\n      isUpsertTest\n    );\n    assert.equal(\n      replacedDocument.name,\n      \"replaced document\",\n      \"document name property should change\"\n    );\n    assert.equal(replacedDocument.foo, \"not bar\", \"property should have changed\");\n    assert.equal(document.id, replacedDocument.id, \"document id should stay the same\");\n    // read document\n    const response2 = await container.item(replacedDocument.id, undefined).read<TestItem>();\n    const document2 = response2.resource;\n    assert.equal(replacedDocument.id, document2.id);\n    assert.equal(typeof response2.requestCharge, \"number\");\n    // delete document\n    await container.item(replacedDocument.id, undefined).delete();\n\n    // read documents after deletion\n    const response = await container.item(replacedDocument.id, undefined).read();\n    assert.equal(response.statusCode, 404, \"response should return error code 404\");\n    assert.equal(response.resource, undefined);\n  };\n\n  it(\"Should do document CRUD operations successfully\", async function() {\n    await documentCRUDTest(false);\n  });\n\n  it(\"Should do document CRUD operations successfully with upsert\", async function() {\n    await documentCRUDTest(true);\n  });\n\n  it(\"Should do document CRUD operations over multiple partitions\", async function() {\n    // create database\n    const database = await getTestDatabase(\"db1\");\n    const partitionKey = \"key\";\n\n    // create container\n    const containerDefinition = {\n      id: \"coll1\",\n      partitionKey: { paths: [\"/\" + partitionKey] }\n    };\n\n    const { resource: containerdef } = await database.containers.create(containerDefinition, {\n      offerThroughput: 12000\n    });\n    const container = database.container(containerdef.id);\n\n    const documents = [\n      { id: \"document1\" },\n      { id: \"document2\", key: null, prop: 1 },\n      { id: \"document3\", key: false, prop: 1 },\n      { id: \"document4\", key: true, prop: 1 },\n      { id: \"document5\", key: 1, prop: 1 },\n      { id: \"document6\", key: \"A\", prop: 1 },\n      { id: \"document7\", key: \"\", prop: 1 }\n    ];\n\n    let returnedDocuments = await bulkInsertItems(container, documents);\n\n    assert.equal(returnedDocuments.length, documents.length);\n    returnedDocuments.sort(function(doc1, doc2) {\n      return doc1.id.localeCompare(doc2.id);\n    });\n    await bulkReadItems(container, returnedDocuments, partitionKey);\n    const { resources: successDocuments } = await container.items.readAll().fetchAll();\n    assert(successDocuments !== undefined, \"error reading documents\");\n    assert.equal(\n      successDocuments.length,\n      returnedDocuments.length,\n      \"Expected \" + returnedDocuments.length + \" documents to be succesfully read\"\n    );\n    successDocuments.sort(function(doc1, doc2) {\n      return doc1.id.localeCompare(doc2.id);\n    });\n    assert.equal(\n      JSON.stringify(successDocuments),\n      JSON.stringify(returnedDocuments),\n      \"Unexpected documents are returned\"\n    );\n\n    returnedDocuments.forEach(function(document) {\n      document.prop ? ++document.prop : null; // eslint-disable-line no-unused-expressions\n    });\n    const newReturnedDocuments = await bulkReplaceItems(container, returnedDocuments, partitionKey);\n    returnedDocuments = newReturnedDocuments;\n    await bulkQueryItemsWithPartitionKey(container, returnedDocuments, partitionKey);\n    const querySpec = {\n      query: \"SELECT * FROM Root\"\n    };\n    const { resources: results } = await container.items\n      .query<ItemDefinition>(querySpec, { enableScanInQuery: true })\n      .fetchAll();\n    assert(results !== undefined, \"error querying documents\");\n    results.sort(function(doc1, doc2) {\n      return doc1.id.localeCompare(doc2.id);\n    });\n    assert.equal(\n      results.length,\n      returnedDocuments.length,\n      \"Expected \" + returnedDocuments.length + \" documents to be succesfully queried\"\n    );\n    assert.equal(\n      JSON.stringify(results),\n      JSON.stringify(returnedDocuments),\n      \"Unexpected query results\"\n    );\n\n    await bulkDeleteItems(container, returnedDocuments, partitionKey);\n  });\n\n  it(\"Should auto generate an id for a collection partitioned on id\", async function() {\n    // https://github.com/Azure/azure-sdk-for-js/issues/9734\n    const container = await getTestContainer(\"db1\", undefined, { partitionKey: \"/id\" });\n    const { resource } = await container.items.create({});\n    assert.ok(resource.id);\n  });\n});\n\ndescribe(\"bulk/batch item operations\", function() {\n  describe(\"with v1 container\", function() {\n    let container: Container;\n    let readItemId: string;\n    let replaceItemId: string;\n    let deleteItemId: string;\n    before(async function() {\n      container = await getTestContainer(\"bulk container\", undefined, {\n        partitionKey: {\n          paths: [\"/key\"],\n          version: undefined\n        },\n        throughput: 25100\n      });\n      readItemId = addEntropy(\"item1\");\n      await container.items.create({\n        id: readItemId,\n        key: \"A\",\n        class: \"2010\"\n      });\n      deleteItemId = addEntropy(\"item2\");\n      await container.items.create({\n        id: deleteItemId,\n        key: \"A\",\n        class: \"2010\"\n      });\n      replaceItemId = addEntropy(\"item3\");\n      await container.items.create({\n        id: replaceItemId,\n        key: 5,\n        class: \"2010\"\n      });\n    });\n    after(async () => {\n      await container.database.delete();\n    });\n    it(\"handles create, upsert, replace, delete\", async function() {\n      const operations = [\n        {\n          operationType: BulkOperationType.Create,\n          resourceBody: { id: addEntropy(\"doc1\"), name: \"sample\", key: \"A\" }\n        },\n        {\n          operationType: BulkOperationType.Upsert,\n          partitionKey: \"A\",\n          resourceBody: { id: addEntropy(\"doc2\"), name: \"other\", key: \"A\" }\n        },\n        {\n          operationType: BulkOperationType.Read,\n          id: readItemId,\n          partitionKey: \"A\"\n        },\n        {\n          operationType: BulkOperationType.Delete,\n          id: deleteItemId,\n          partitionKey: \"A\"\n        },\n        {\n          operationType: BulkOperationType.Replace,\n          partitionKey: 5,\n          id: replaceItemId,\n          resourceBody: { id: replaceItemId, name: \"nice\", key: 5 }\n        }\n      ];\n      const response = await container.items.bulk(operations);\n      // Create\n      assert.equal(response[0].resourceBody.name, \"sample\");\n      assert.equal(response[0].statusCode, 201);\n      // Upsert\n      assert.equal(response[1].resourceBody.name, \"other\");\n      assert.equal(response[1].statusCode, 201);\n      // Read\n      assert.equal(response[2].resourceBody.class, \"2010\");\n      assert.equal(response[2].statusCode, 200);\n      // Delete\n      assert.equal(response[3].statusCode, 204);\n      // Replace\n      assert.equal(response[4].resourceBody.name, \"nice\");\n      assert.equal(response[4].statusCode, 200);\n    });\n  });\n  describe(\"with v2 container\", function() {\n    let v2Container: Container;\n    let readItemId: string;\n    let replaceItemId: string;\n    let patchItemId: string;\n    let deleteItemId: string;\n    before(async function() {\n      const client = new CosmosClient({ key: masterKey, endpoint });\n      const db = await client.databases.createIfNotExists({ id: \"patchDb\" });\n      const database = db.database;\n      const response = await database.containers.createIfNotExists({\n        id: \"patchContainer\",\n        partitionKey: {\n          paths: [\"/key\"],\n          version: 2\n        },\n        throughput: 25100\n      });\n      v2Container = response.container;\n      readItemId = addEntropy(\"item1\");\n      await v2Container.items.create({\n        id: readItemId,\n        key: true,\n        class: \"2010\"\n      });\n      deleteItemId = addEntropy(\"item2\");\n      await v2Container.items.create({\n        id: deleteItemId,\n        key: {},\n        class: \"2011\"\n      });\n      replaceItemId = addEntropy(\"item3\");\n      await v2Container.items.create({\n        id: replaceItemId,\n        key: 5,\n        class: \"2012\"\n      });\n      patchItemId = addEntropy(\"item4\");\n      await v2Container.items.create({\n        id: patchItemId,\n        key: 5,\n        class: \"2019\"\n      });\n    });\n    it(\"handles create, upsert, patch, replace, delete\", async function() {\n      const operations = [\n        {\n          operationType: BulkOperationType.Create,\n          partitionKey: \"A\",\n          resourceBody: { id: addEntropy(\"doc1\"), name: \"sample\", key: \"A\" }\n        },\n        {\n          operationType: BulkOperationType.Upsert,\n          partitionKey: \"U\",\n          resourceBody: { name: \"other\", key: \"U\" }\n        },\n        {\n          operationType: BulkOperationType.Read,\n          id: readItemId,\n          partitionKey: true\n        },\n        {\n          operationType: BulkOperationType.Delete,\n          id: deleteItemId,\n          partitionKey: {}\n        },\n        {\n          operationType: BulkOperationType.Replace,\n          id: replaceItemId,\n          resourceBody: { id: replaceItemId, name: \"nice\", key: 5 }\n        },\n        {\n          operationType: BulkOperationType.Patch,\n          partitionKey: 5,\n          id: patchItemId,\n          resourceBody: {\n            operations: [{ op: PatchOperationType.add, path: \"/great\", value: \"goodValue\" }]\n          }\n        },\n        {\n          operationType: BulkOperationType.Patch,\n          partitionKey: 5,\n          id: patchItemId,\n          resourceBody: {\n            operations: [{ op: PatchOperationType.add, path: \"/good\", value: \"greatValue\" }],\n            condition: \"from c where NOT IS_DEFINED(c.newImproved)\"\n          }\n        }\n      ];\n      const response = await v2Container.items.bulk(operations);\n      // Create\n      assert.strictEqual(response[0].resourceBody.name, \"sample\");\n      assert.strictEqual(response[0].statusCode, 201);\n      // Upsert\n      assert.strictEqual(response[1].resourceBody.name, \"other\");\n      assert.strictEqual(response[1].statusCode, 201);\n      // Read\n      assert.strictEqual(response[2].resourceBody.class, \"2010\");\n      assert.strictEqual(response[2].statusCode, 200);\n      // Delete\n      assert.strictEqual(response[3].statusCode, 204);\n      // Replace\n      assert.strictEqual(response[4].resourceBody.name, \"nice\");\n      assert.strictEqual(response[4].statusCode, 200);\n      // Patch\n      assert.strictEqual(response[5].resourceBody.great, \"goodValue\");\n      assert.strictEqual(response[5].statusCode, 200);\n    });\n    it(\"respects order\", async function() {\n      readItemId = addEntropy(\"item1\");\n      await v2Container.items.create({\n        id: readItemId,\n        key: \"A\",\n        class: \"2010\"\n      });\n      const operations = [\n        {\n          operationType: BulkOperationType.Delete,\n          id: readItemId,\n          partitionKey: \"A\"\n        },\n        {\n          operationType: BulkOperationType.Read,\n          id: readItemId,\n          partitionKey: \"A\"\n        }\n      ];\n      const response = await v2Container.items.bulk(operations);\n      assert.equal(response[0].statusCode, 204);\n      // Delete occurs first, so the read returns a 404\n      assert.equal(response[1].statusCode, 404);\n    });\n    it(\"424 errors for operations after an error\", async function() {\n      const operations = [\n        {\n          operationType: BulkOperationType.Create,\n          resourceBody: {\n            ttl: -10,\n            key: \"A\"\n          }\n        },\n        {\n          operationType: BulkOperationType.Create,\n          resourceBody: {\n            key: \"A\",\n            licenseType: \"B\",\n            id: \"o239uroihndsf\"\n          }\n        }\n      ];\n      const response = await v2Container.items.bulk(operations);\n      assert.equal(response[1].statusCode, 424);\n    });\n    it(\"Continues after errors with continueOnError true\", async function() {\n      const operations = [\n        {\n          operationType: BulkOperationType.Create,\n          resourceBody: {\n            ttl: -10,\n            key: \"A\"\n          }\n        },\n        {\n          operationType: BulkOperationType.Create,\n          resourceBody: {\n            key: \"A\",\n            licenseType: \"B\",\n            id: addEntropy(\"sifjsiof\")\n          }\n        }\n      ];\n      const response = await v2Container.items.bulk(operations, { continueOnError: true });\n      assert.strictEqual(response[1].statusCode, 201);\n    });\n    it(\"autogenerates IDs for Create operations\", async function() {\n      const operations = [\n        {\n          operationType: BulkOperationType.Create,\n          resourceBody: {\n            key: \"A\",\n            licenseType: \"C\"\n          }\n        }\n      ];\n      const response = await v2Container.items.bulk(operations);\n      assert.equal(response[0].statusCode, 201);\n    });\n    it(\"handles operations with null, undefined, and 0 partition keys\", async function() {\n      const item1Id = addEntropy(\"item1\");\n      const item2Id = addEntropy(\"item2\");\n      const item3Id = addEntropy(\"item2\");\n      await v2Container.items.create({\n        id: item1Id,\n        key: null,\n        class: \"2010\"\n      });\n      await v2Container.items.create({\n        id: item2Id,\n        key: 0\n      });\n      await v2Container.items.create({\n        id: item3Id,\n        key: undefined\n      });\n      const operations: OperationInput[] = [\n        {\n          operationType: BulkOperationType.Read,\n          id: item1Id,\n          partitionKey: null\n        },\n        {\n          operationType: BulkOperationType.Read,\n          id: item2Id,\n          partitionKey: 0\n        },\n        {\n          operationType: BulkOperationType.Read,\n          id: item3Id,\n          partitionKey: undefined\n        }\n      ];\n      const response = await v2Container.items.bulk(operations);\n      assert.equal(response[0].statusCode, 200);\n      assert.equal(response[1].statusCode, 200);\n      assert.equal(response[2].statusCode, 200);\n    });\n  });\n  describe(\"v2 single partition container\", async function() {\n    let container: Container;\n    let deleteItemId: string;\n    before(async function() {\n      container = await getTestContainer(\"bulk container\");\n      deleteItemId = addEntropy(\"item2\");\n      await container.items.create({\n        id: deleteItemId,\n        key: \"A\",\n        class: \"2010\"\n      });\n    });\n    it(\"deletes an item with default partition\", async function() {\n      const operation: OperationInput = {\n        operationType: BulkOperationType.Delete,\n        id: deleteItemId\n      };\n\n      const deleteResponse = await container.items.bulk([operation]);\n      assert.equal(deleteResponse[0].statusCode, 204);\n    });\n  });\n  describe(\"v2 multi partition container\", async function() {\n    let container: Container;\n    let createItemId: string;\n    let upsertItemId: string;\n    before(async function() {\n      container = await getTestContainer(\"bulk container\", undefined, {\n        partitionKey: {\n          paths: [\"/nested/key\"],\n          version: 2\n        },\n        throughput: 25100\n      });\n      createItemId = addEntropy(\"createItem\");\n      upsertItemId = addEntropy(\"upsertItem\");\n    });\n    it(\"creates an item with nested object partition key\", async function() {\n      const operations: OperationInput[] = [\n        {\n          operationType: BulkOperationType.Create,\n          resourceBody: {\n            id: createItemId,\n            nested: {\n              key: \"A\"\n            }\n          }\n        },\n        {\n          operationType: BulkOperationType.Upsert,\n          resourceBody: {\n            id: upsertItemId,\n            nested: {\n              key: false\n            }\n          }\n        }\n      ];\n\n      const createResponse = await container.items.bulk(operations);\n      assert.equal(createResponse[0].statusCode, 201);\n    });\n  });\n\n  // TODO: Non-deterministic test. We can't guarantee we see any response with a 429 status code since the retries happen within the response\n  describe(\"item read retries\", async function() {\n    it(\"retries on 429\", async function() {\n      const client = new CosmosClient({ key: masterKey, endpoint });\n      const { resource: db } = await client.databases.create({\n        id: `small db ${Math.random() * 1000}`\n      });\n      const containerResponse = await client\n        .database(db.id)\n        .containers.create({ id: `small container ${Math.random() * 1000}`, throughput: 400 });\n      const container = containerResponse.container;\n      await container.items.create({ id: \"readme\" });\n      const arr = new Array(400);\n      const promises = [];\n      for (let i = 0; i < arr.length; i++) {\n        promises.push(container.item(\"readme\").read());\n      }\n      const resp = await Promise.all(promises);\n      assert.equal(resp[0].statusCode, 200);\n    });\n  });\n\n  describe(\"v2 single partition container\", async function() {\n    let container: Container;\n    let createItemId: string;\n    let otherItemId: string;\n    let upsertItemId: string;\n    let replaceItemId: string;\n    let deleteItemId: string;\n    let patchItemId: string;\n    before(async function() {\n      const client = new CosmosClient({ key: masterKey, endpoint });\n      const db = await client.databases.createIfNotExists({ id: \"patchDb\" });\n      const contResponse = await db.database.containers.createIfNotExists({\n        id: \"patchContainer\",\n        partitionKey: {\n          paths: [\"/key\"],\n          version: 2\n        },\n        throughput: 25100\n      });\n      container = contResponse.container;\n      deleteItemId = addEntropy(\"item1\");\n      createItemId = addEntropy(\"item2\");\n      otherItemId = addEntropy(\"item2\");\n      upsertItemId = addEntropy(\"item4\");\n      replaceItemId = addEntropy(\"item3\");\n      patchItemId = addEntropy(\"item5\");\n      await container.items.create({\n        id: deleteItemId,\n        key: \"A\",\n        class: \"2010\"\n      });\n      await container.items.create({\n        id: replaceItemId,\n        key: \"A\",\n        class: \"2010\"\n      });\n      await container.items.create({\n        id: patchItemId,\n        key: \"A\",\n        class: \"2010\"\n      });\n    });\n    it(\"can batch all operation types\", async function() {\n      const operations: OperationInput[] = [\n        {\n          operationType: BulkOperationType.Create,\n          resourceBody: { id: createItemId, key: \"A\", school: \"high\" }\n        },\n        {\n          operationType: BulkOperationType.Upsert,\n          resourceBody: { id: upsertItemId, key: \"A\", school: \"elementary\" }\n        },\n        {\n          operationType: BulkOperationType.Replace,\n          id: replaceItemId,\n          resourceBody: { id: replaceItemId, key: \"A\", school: \"junior high\" }\n        },\n        {\n          operationType: BulkOperationType.Delete,\n          id: deleteItemId\n        },\n        {\n          operationType: BulkOperationType.Patch,\n          id: patchItemId,\n          resourceBody: {\n            operations: [{ op: PatchOperationType.add, path: \"/good\", value: \"greatValue\" }],\n            condition: \"from c where NOT IS_DEFINED(c.newImproved)\"\n          }\n        }\n      ];\n\n      const response = await container.items.batch(operations, \"A\");\n      assert.strictEqual(response.result[0].statusCode, 201);\n      assert.strictEqual(response.result[1].statusCode, 201);\n      assert.strictEqual(response.result[2].statusCode, 200);\n      assert.strictEqual(response.result[3].statusCode, 204);\n      assert.strictEqual(response.result[4].statusCode, 200);\n    });\n    it(\"rolls back prior operations when one fails\", async function() {\n      const operations: OperationInput[] = [\n        {\n          operationType: BulkOperationType.Upsert,\n          resourceBody: { id: otherItemId, key: \"A\", school: \"elementary\" }\n        },\n        {\n          operationType: BulkOperationType.Delete,\n          id: deleteItemId + addEntropy(\"make this 404\")\n        }\n      ];\n\n      const deleteResponse = await container.items.batch(operations, \"A\");\n      assert.strictEqual(deleteResponse.result[0].statusCode, 424);\n      assert.strictEqual(deleteResponse.result[1].statusCode, 404);\n      const { resource: readItem } = await container.item(otherItemId).read();\n      assert.strictEqual(readItem, undefined);\n    });\n  });\n});\ndescribe(\"patch operations\", function() {\n  describe(\"various mixed operations\", function() {\n    let container: Container;\n    let addItemId: string;\n    let conditionItemId: string;\n    before(async function() {\n      addItemId = addEntropy(\"addItemId\");\n      conditionItemId = addEntropy(\"conditionItemId\");\n      const client = new CosmosClient({ key: masterKey, endpoint });\n      const db = await client.databases.createIfNotExists({ id: \"patchDb\" });\n      const contResponse = await db.database.containers.createIfNotExists({\n        id: \"patchContainer\",\n        partitionKey: {\n          paths: [\"/key\"],\n          version: 2\n        },\n        throughput: 25100\n      });\n      container = contResponse.container;\n      await container.items.upsert({\n        id: addItemId,\n        first: 1,\n        last: \"a\",\n        removable: \"yes\",\n        existingObj: {\n          key: \"val\"\n        },\n        num: 0\n      });\n      await container.items.upsert({\n        id: conditionItemId,\n        first: 1,\n        last: \"a\",\n        removable: \"no\",\n        existingObj: {\n          key: \"val\"\n        },\n        num: 0\n      });\n    });\n    it(\"handles add, remove, replace, set, incr\", async function() {\n      const operations: PatchOperation[] = [\n        {\n          op: \"add\",\n          path: \"/laster\",\n          value: \"c\"\n        },\n        {\n          op: \"replace\",\n          path: \"/last\",\n          value: \"b\"\n        },\n        {\n          op: \"remove\",\n          path: \"/removable\"\n        },\n        {\n          op: \"set\",\n          path: \"/existingObj/newKey\",\n          value: \"newVal\"\n        },\n        {\n          op: \"incr\",\n          path: \"/num\",\n          value: 5\n        }\n      ];\n      const { resource: addItem } = await container.item(addItemId).patch(operations);\n      assert.strictEqual(addItem.num, 5);\n      assert.strictEqual(addItem.existingObj.newKey, \"newVal\");\n      assert.strictEqual(addItem.laster, \"c\");\n      assert.strictEqual(addItem.last, \"b\");\n      assert.strictEqual(addItem.removable, undefined);\n    });\n    it(\"conditionally patches\", async function() {\n      const operations: PatchOperation[] = [\n        {\n          op: \"add\",\n          path: \"/newImproved\",\n          value: \"it works\"\n        }\n      ];\n      const condition = \"from c where NOT IS_DEFINED(c.newImproved)\";\n      const { resource: conditionItem } = await container\n        .item(conditionItemId)\n        .patch({ condition, operations });\n      assert.strictEqual(conditionItem.newImproved, \"it works\");\n    });\n  });\n});\n"]}