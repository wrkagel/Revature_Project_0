{"version":3,"file":"spatial.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/spatial.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAY,QAAQ,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAC7D,OAAO,EAAE,kBAAkB,EAAE,eAAe,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAEhG,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,KAAK,CAAC,CAAC;IACjD,UAAU,CAAC,KAAK;QACd,MAAM,kBAAkB,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,MAAM,gBAAgB,GAAG,KAAK,WAAU,YAAqB;QAC3D,kBAAkB;QAClB,MAAM,QAAQ,GAAa,MAAM,eAAe,CAAC,wBAAwB,CAAC,CAAC;QAE3E,gEAAgE;QAChE,MAAM,cAAc,GAAG;YACrB,aAAa,EAAE;gBACb;oBACE,IAAI,EAAE,eAAe;oBACrB,OAAO,EAAE;wBACP;4BACE,IAAI,EAAE,SAAS,CAAC,OAAO;4BACvB,QAAQ,EAAE,QAAQ,CAAC,KAAK;yBACzB;qBACF;iBACF;gBACD;oBACE,IAAI,EAAE,GAAG;iBACV;aACF;SACF,CAAC;QACF,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;QAClD,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC;YAClE,EAAE,EAAE,mBAAmB,OAAO,EAAE;YAChC,cAAc;SACf,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QAEtD,MAAM,SAAS,GAAG;YAChB,EAAE,EAAE,WAAW;YACf,QAAQ,EAAE;gBACR,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;aAC1B;SACF,CAAC;QACF,MAAM,kBAAkB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;QACxE,MAAM,SAAS,GAAG;YAChB,EAAE,EAAE,WAAW;YACf,QAAQ,EAAE;gBACR,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;aAC5B;SACF,CAAC;QACF,MAAM,kBAAkB,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;QACxE,MAAM,KAAK,GACT,0GAA0G,CAAC;QAC7G,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC7E,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEF,EAAE,CAAC,mDAAmD,EAAE,KAAK;QAC3D,MAAM,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK;QACvE,MAAM,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { Database, DataType, IndexKind } from \"../../../src\";\nimport { createOrUpsertItem, getTestDatabase, removeAllDatabases } from \"../common/TestHelpers\";\n\ndescribe(\"Spatial Indexes\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  const spatialIndexTest = async function(isUpsertTest: boolean): Promise<void> {\n    // create database\n    const database: Database = await getTestDatabase(\"validate spatial index\");\n\n    // create container using an indexing policy with spatial index.\n    const indexingPolicy = {\n      includedPaths: [\n        {\n          path: '/\"Location\"/?',\n          indexes: [\n            {\n              kind: IndexKind.Spatial,\n              dataType: DataType.Point\n            }\n          ]\n        },\n        {\n          path: \"/\"\n        }\n      ]\n    };\n    const entropy = Math.floor(Math.random() * 10000);\n    const { resource: containerDef } = await database.containers.create({\n      id: `sample container${entropy}`,\n      indexingPolicy\n    });\n    const container = database.container(containerDef.id);\n\n    const location1 = {\n      id: \"location1\",\n      Location: {\n        type: \"Point\",\n        coordinates: [20.0, 20.0]\n      }\n    };\n    await createOrUpsertItem(container, location1, undefined, isUpsertTest);\n    const location2 = {\n      id: \"location2\",\n      Location: {\n        type: \"Point\",\n        coordinates: [100.0, 100.0]\n      }\n    };\n    await createOrUpsertItem(container, location2, undefined, isUpsertTest);\n    const query =\n      \"SELECT * FROM root WHERE (ST_DISTANCE(root.Location, {type: 'Point', coordinates: [20.1, 20]}) < 20000) \";\n    const { resources: results } = await container.items.query(query).fetchAll();\n    assert.equal(1, results.length);\n    assert.equal(\"location1\", results[0].id);\n  };\n\n  it(\"nativeApi Should support spatial index name based\", async function() {\n    await spatialIndexTest(false);\n  });\n\n  it(\"nativeApi Should support spatial index name based with upsert\", async function() {\n    await spatialIndexTest(true);\n  });\n});\n"]}