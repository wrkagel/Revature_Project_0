{"version":3,"file":"databaseaccount.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/databaseaccount.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAG5B,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,4BAA4B,CAAC;AAEvD,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC;IAC9B,QAAQ;IACR,GAAG,EAAE,SAAS;IACd,gBAAgB,EAAE,EAAE,kCAAkC,EAAE,KAAK,EAAE;CAChE,CAAC,CAAC;AAEH,QAAQ,CAAC,mBAAmB,EAAE;IAC5B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,KAAK,CAAC,CAAC;IACjD,UAAU,CAAC,KAAK;QACd,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,KAAK,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yCAAyC,EAAE;QAClD,EAAE,CAAC,+DAA+D,EAAE,KAAK;YACvE,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,MAAM,MAAM,CAAC,kBAAkB,EAAE,CAAC;YACjF,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;YACrD,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YACnD,MAAM,CAAC,KAAK,CACV,eAAe,CAAC,wBAAwB,EACxC,OAAO,CAAC,iCAAiC,CAAC,CAC3C,CAAC,CAAC,kCAAkC;YACrC,MAAM,CAAC,KAAK,CACV,eAAe,CAAC,4BAA4B,EAC5C,OAAO,CAAC,6BAA6B,CAAC,CACvC,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,iBAAiB,KAAK,SAAS,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Context } from \"mocha\";\nimport { Suite } from \"mocha\";\nimport { CosmosClient } from \"../../../src\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\n\nconst client = new CosmosClient({\n  endpoint,\n  key: masterKey,\n  connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n});\n\ndescribe(\"NodeJS CRUD Tests\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function(this: Context) {\n    this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  });\n\n  describe(\"validate database account functionality\", function() {\n    it(\"nativeApi Should get database account successfully name based\", async function() {\n      const { resource: databaseAccount, headers } = await client.getDatabaseAccount();\n      assert.equal(databaseAccount.DatabasesLink, \"/dbs/\");\n      assert.equal(databaseAccount.MediaLink, \"/media/\");\n      assert.equal(\n        databaseAccount.MaxMediaStorageUsageInMB,\n        headers[\"x-ms-max-media-storage-usage-mb\"]\n      ); // TODO: should use constants here\n      assert.equal(\n        databaseAccount.CurrentMediaStorageUsageInMB,\n        headers[\"x-ms-media-storage-usage-mb\"]\n      );\n      assert(databaseAccount.ConsistencyPolicy !== undefined);\n    });\n  });\n});\n"]}