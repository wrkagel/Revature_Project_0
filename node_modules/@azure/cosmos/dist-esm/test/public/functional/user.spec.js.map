{"version":3,"file":"user.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/user.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { UserDefinition } from \"../../../src\";\nimport { createOrUpsertUser, getTestDatabase, removeAllDatabases } from \"../common/TestHelpers\";\n\ndescribe(\"NodeJS CRUD Tests\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n  describe(\"Validate User CRUD\", function() {\n    const userCRUDTest = async function(isUpsertTest: boolean): Promise<void> {\n      // create database\n      const database = await getTestDatabase(\"Validate user CRUD\");\n\n      // list users\n      const { resources: users } = await database.users.readAll().fetchAll();\n      assert.equal(users.constructor, Array, \"Value should be an array\");\n      const beforeCreateCount = users.length;\n\n      // create user\n      const { resource: userDef } = await createOrUpsertUser(\n        database,\n        { id: \"new user\" },\n        undefined,\n        isUpsertTest\n      );\n      assert.equal(userDef.id, \"new user\", \"user name error\");\n      let user = database.user(userDef.id);\n\n      // list users after creation\n      const { resources: usersAfterCreation } = await database.users.readAll().fetchAll();\n      assert.equal(usersAfterCreation.length, beforeCreateCount + 1);\n\n      // query users\n      const querySpec = {\n        query: \"SELECT * FROM root r WHERE r.id=@id\",\n        parameters: [\n          {\n            name: \"@id\",\n            value: \"new user\"\n          }\n        ]\n      };\n      const { resources: results } = await database.users.query(querySpec).fetchAll();\n      assert(results.length > 0, \"number of results for the query should be > 0\");\n\n      // replace user\n      userDef.id = \"replaced user\";\n      let replacedUser: UserDefinition;\n      if (isUpsertTest) {\n        const r = await database.users.upsert(userDef);\n        replacedUser = r.resource;\n      } else {\n        const r = await user.replace(userDef);\n        replacedUser = r.resource;\n      }\n      assert.equal(replacedUser.id, \"replaced user\", \"user name should change\");\n      assert.equal(userDef.id, replacedUser.id, \"user id should stay the same\");\n      user = database.user(replacedUser.id);\n\n      // read user\n      const { resource: userAfterReplace } = await user.read();\n      assert.equal(replacedUser.id, userAfterReplace.id);\n\n      // delete user\n      await user.delete();\n\n      // read user after deletion\n      try {\n        await user.read();\n        assert.fail(\"Must fail to read user after deletion\");\n      } catch (err) {\n        const notFoundErrorCode = 404;\n        assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n      }\n    };\n\n    it(\"nativeApi Should do User CRUD operations successfully name based\", async function() {\n      await userCRUDTest(false);\n    });\n\n    it(\"nativeApi Should do User CRUD operations successfully name based with upsert\", async function() {\n      await userCRUDTest(true);\n    });\n  });\n});\n"]}