{"version":3,"file":"plugin.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/plugin.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { CosmosClient, CosmosClientOptions } from \"../../../src\";\nimport { RequestContext } from \"../../../src\";\nimport { Plugin, Next, PluginConfig } from \"../../../src\";\n\nimport * as assert from \"assert\";\n\ndescribe(\"Plugin\", function() {\n  it(\"should handle all requests\", async function() {\n    const successResponse = {\n      headers: {},\n      code: 200,\n      result: {\n        message: \"yay\"\n      }\n    };\n    let requestCount = 0;\n    const FAILCOUNT = 2;\n    const sometimesThrow: Plugin<any> = async (context: RequestContext) => {\n      requestCount++;\n      if (context.path.includes(\"dbs\") && requestCount <= FAILCOUNT) {\n        throw {\n          code: \"ECONNRESET\"\n        };\n      }\n      return successResponse;\n    };\n\n    const options: CosmosClientOptions = {\n      endpoint: \"https://faaaaaaaaaaaaake.com\",\n      key: \"THIS IS A FAKE KEY\"\n    };\n\n    const plugins: PluginConfig[] = [\n      {\n        on: \"request\",\n        plugin: sometimesThrow\n      }\n    ];\n\n    const client = new CosmosClient({ ...options, plugins } as any);\n    const response = await client.database(\"foo\").read();\n    assert.equal(requestCount, FAILCOUNT + 1); // Get Database Account + FAILED GET Database + Get Database\n    assert.notEqual(response, undefined);\n    assert.equal(response.statusCode, successResponse.code);\n    assert.deepEqual(response.resource, successResponse.result);\n    client.dispose();\n  });\n\n  it(\"should handle all operations\", async function() {\n    const successResponse = {\n      headers: {},\n      code: 200,\n      result: {\n        message: \"yay\"\n      }\n    };\n    let requestCount = 0;\n    const alwaysSucceed: Plugin<any> = async () => {\n      requestCount++;\n      return successResponse;\n    };\n    const alwaysThrow: Plugin<any> = async () => {\n      throw new Error(\"I always throw!\");\n    };\n\n    const options: CosmosClientOptions = {\n      endpoint: \"https://faaaaaaaaaaaaake.com\",\n      key: \"THIS IS A FAKE KEY\"\n    };\n\n    const plugins: PluginConfig[] = [\n      {\n        on: \"request\",\n        plugin: alwaysThrow // I'll never be called since operation will always succeed.\n      },\n      {\n        on: \"operation\",\n        plugin: alwaysSucceed\n      }\n    ];\n\n    const client = new CosmosClient({ ...options, plugins } as any);\n    const response = await client.database(\"foo\").read();\n    assert.equal(requestCount, 2); // Get Database Account + Get Database\n    assert.notEqual(response, undefined);\n    assert.equal(response.statusCode, successResponse.code);\n    assert.deepEqual(response.resource, successResponse.result);\n    client.dispose();\n  });\n\n  it(\"should allow next to be called\", async function() {\n    const successResponse = {\n      headers: {},\n      code: 200,\n      result: {\n        message: \"yay\"\n      }\n    };\n    let innerRequestCount = 0;\n    const alwaysSucceed: Plugin<any> = async () => {\n      innerRequestCount++;\n      return successResponse;\n    };\n\n    let requestCount = 0;\n    let responseCount = 0;\n    const counts: Plugin<any> = async (context: RequestContext, next: Next<any>) => {\n      requestCount++;\n      const response = await next(context);\n      responseCount++;\n      return response;\n    };\n\n    const options: CosmosClientOptions = {\n      endpoint: \"https://faaaaaaaaaaaaake.com\",\n      key: \"THIS IS A FAKE KEY\"\n    };\n\n    const plugins: PluginConfig[] = [\n      {\n        on: \"operation\",\n        plugin: counts // I'll never be called since operation will always succeed.\n      },\n      {\n        on: \"operation\",\n        plugin: alwaysSucceed\n      }\n    ];\n\n    const client = new CosmosClient({ ...options, plugins } as any);\n    const response = await client.database(\"foo\").read();\n    assert.equal(requestCount, 2); // Get Database Account + Get Database\n    assert.equal(responseCount, 2); // Get Database Account + Get Database\n    assert.equal(innerRequestCount, 2); // Get Database Account + Get Database\n    assert.notEqual(response, undefined);\n    assert.equal(response.statusCode, successResponse.code);\n    assert.deepEqual(response.resource, successResponse.result);\n    client.dispose();\n  });\n});\n"]}