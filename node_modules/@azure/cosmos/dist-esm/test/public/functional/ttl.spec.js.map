{"version":3,"file":"ttl.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/ttl.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { Container, ContainerDefinition, Database } from \"../../../src\";\nimport { getTestDatabase, removeAllDatabases } from \"../common/TestHelpers\";\nimport { StatusCodes } from \"../../../src\";\n\nasync function sleep(time: number): Promise<unknown> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time);\n  });\n}\n\ndescribe(\"Container TTL\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 600000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n  async function createcontainerWithInvalidDefaultTtl(\n    db: Database,\n    containerDefinition: ContainerDefinition,\n    collId: any,\n    defaultTtl: number\n  ): Promise<void> {\n    containerDefinition.id = collId;\n    containerDefinition.defaultTtl = defaultTtl;\n    try {\n      await db.containers.create(containerDefinition);\n    } catch (err) {\n      const badRequestErrorCode = 400;\n      assert.equal(\n        err.code,\n        badRequestErrorCode,\n        \"response should return error code \" + badRequestErrorCode\n      );\n    }\n  }\n\n  async function createItemWithInvalidTtl(\n    container: Container,\n    itemDefinition: any,\n    itemId: any,\n    ttl: number\n  ): Promise<void> {\n    itemDefinition.id = itemId;\n    itemDefinition.ttl = ttl;\n\n    try {\n      await container.items.create(itemDefinition);\n      assert.fail(\"Must throw if using invalid TTL\");\n    } catch (err) {\n      const badRequestErrorCode = 400;\n      assert.equal(\n        err.code,\n        badRequestErrorCode,\n        \"response should return error code \" + badRequestErrorCode\n      );\n    }\n  }\n\n  it(\"Validate container and Item TTL values.\", async function() {\n    const database = await getTestDatabase(\"ttl test1 database\");\n\n    const containerDefinition = {\n      id: \"sample container1\",\n      defaultTtl: 5\n    };\n    const { resource: containerResult } = await database.containers.create(containerDefinition);\n\n    assert.equal(containerDefinition.defaultTtl, containerResult.defaultTtl);\n    const container = database.container(containerResult.id);\n\n    // null, 0, -10 are unsupported value for defaultTtl.Valid values are -1 or a non-zero positive 32-bit integer value\n    await createcontainerWithInvalidDefaultTtl(\n      database,\n      containerDefinition,\n      \"sample container2\",\n      null\n    );\n    await createcontainerWithInvalidDefaultTtl(\n      database,\n      containerDefinition,\n      \"sample container3\",\n      0\n    );\n    await createcontainerWithInvalidDefaultTtl(\n      database,\n      containerDefinition,\n      \"sample container4\",\n      -10\n    );\n\n    const itemDefinition = {\n      id: \"doc\",\n      name: \"sample Item\",\n      key: \"value\",\n      ttl: 2\n    };\n\n    // null, -10 are unsupported value for ttl.Valid values are -1 or a non-zero positive 32-bit integer value\n    await createItemWithInvalidTtl(container, itemDefinition, \"doc2\", null);\n    await createItemWithInvalidTtl(container, itemDefinition, \"doc3\", -10);\n  });\n\n  async function checkItemGone(container: Container, createdItem: any): Promise<void> {\n    const response = await container.item(createdItem.id, undefined).read();\n    assert.equal(response.statusCode, StatusCodes.NotFound);\n    assert.equal(response.resource, undefined);\n  }\n\n  async function checkItemExists(container: Container, createdItem: any): Promise<void> {\n    const { resource: readItem } = await container.item(createdItem.id, undefined).read();\n    assert.equal(readItem.ttl, createdItem.ttl);\n  }\n\n  async function positiveDefaultTtlStep4(container: Container, createdItem: any): Promise<void> {\n    // the created Item should NOT be gone as it 's ttl value is set to 8 which overrides the containers' s defaultTtl value(5)\n    await checkItemExists(container, createdItem);\n    await sleep(4000);\n    await checkItemGone(container, createdItem);\n  }\n\n  async function positiveDefaultTtlStep3(\n    container: Container,\n    createdItem: any,\n    itemDefinition: any\n  ): Promise<void> {\n    // the created Item should be gone now as it 's ttl value is set to 2 which overrides the containers' s defaultTtl value(5)\n    await checkItemGone(container, createdItem);\n    itemDefinition.id = \"doc4\";\n    itemDefinition.ttl = 8;\n\n    const { resource: doc } = await container.items.create(itemDefinition);\n    await sleep(6000);\n    await positiveDefaultTtlStep4(container, doc);\n  }\n\n  async function positiveDefaultTtlStep2(\n    container: Container,\n    createdItem: any,\n    itemDefinition: any\n  ): Promise<void> {\n    // the created Item should NOT be gone as it 's ttl value is set to -1(never expire) which overrides the containers' s defaultTtl value\n    await checkItemExists(container, createdItem);\n    itemDefinition.id = \"doc3\";\n    itemDefinition.ttl = 2;\n\n    const { resource: doc } = await container.items.create(itemDefinition);\n    await sleep(4000);\n    await positiveDefaultTtlStep3(container, doc, itemDefinition);\n  }\n\n  async function positiveDefaultTtlStep1(\n    container: Container,\n    createdItem: any,\n    itemDefinition: any\n  ): Promise<void> {\n    // the created Item should be gone now as it 's ttl value would be same as defaultTtl value of the container\n    await checkItemGone(container, createdItem);\n    itemDefinition.id = \"doc2\";\n    itemDefinition.ttl = -1;\n\n    const { resource: doc } = await container.items.create(itemDefinition);\n    await sleep(5000);\n    await positiveDefaultTtlStep2(container, doc, itemDefinition);\n  }\n\n  it(\"Validate Item TTL with positive defaultTtl.\", async function() {\n    const database = await getTestDatabase(\"ttl test2 database\");\n\n    const containerDefinition = {\n      id: \"sample container\",\n      defaultTtl: 5\n    };\n\n    const { resource: containerResult } = await database.containers.create(containerDefinition);\n\n    const container = await database.container(containerResult.id);\n\n    const itemDefinition = {\n      id: \"doc1\",\n      name: \"sample Item\",\n      key: \"value\"\n    };\n\n    const { resource: createdItem } = await container.items.create(itemDefinition);\n    await sleep(7000);\n    await positiveDefaultTtlStep1(container, createdItem, itemDefinition);\n  });\n\n  async function minusOneDefaultTtlStep1(\n    container: Container,\n    createdItem1: any,\n    createdItem2: any,\n    createdItem3: any\n  ): Promise<void> {\n    // the created Item should be gone now as it 's ttl value is set to 2 which overrides the containers' s defaultTtl value(-1)\n    await checkItemGone(container, createdItem3);\n\n    // The Items with id doc1 and doc2 will never expire\n    const { resource: readItem1 } = await container.item(createdItem1.id, undefined).read();\n    assert.equal(readItem1.id, createdItem1.id);\n\n    const { resource: readItem2 } = await container.item(createdItem2.id, undefined).read();\n    assert.equal(readItem2.id, createdItem2.id);\n  }\n\n  it(\"Validate Item TTL with -1 defaultTtl.\", async function() {\n    const database = await getTestDatabase(\"ttl test2 database\");\n\n    const containerDefinition = {\n      id: \"sample container\",\n      defaultTtl: -1\n    };\n\n    const { resource: createdContainer } = await database.containers.create(containerDefinition);\n\n    const container = await database.container(createdContainer.id);\n\n    const itemDefinition: any = {\n      id: \"doc1\",\n      name: \"sample Item\",\n      key: \"value\"\n    };\n\n    // the created Item 's ttl value would be -1 inherited from the container' s defaultTtl and this Item will never expire\n    const { resource: createdItem1 } = await container.items.create(itemDefinition);\n\n    // This Item is also set to never expire explicitly\n    itemDefinition.id = \"doc2\";\n    itemDefinition.ttl = -1;\n\n    const { resource: createdItem2 } = await container.items.create(itemDefinition);\n\n    itemDefinition.id = \"doc3\";\n    itemDefinition.ttl = 2;\n\n    const { resource: createdItem3 } = await container.items.create(itemDefinition);\n    await sleep(4000);\n    await minusOneDefaultTtlStep1(container, createdItem1, createdItem2, createdItem3);\n  });\n\n  it(\"Validate Item TTL with no defaultTtl.\", async function() {\n    const database = await getTestDatabase(\"ttl test3 database\");\n\n    const containerDefinition = { id: \"sample container\" };\n\n    const { resource: createdContainer } = await database.containers.create(containerDefinition);\n\n    const container = await database.container(createdContainer.id);\n\n    const itemDefinition = {\n      id: \"doc1\",\n      name: \"sample Item\",\n      key: \"value\",\n      ttl: 5\n    };\n\n    const { resource: createdItem } = await container.items.create(itemDefinition);\n\n    // Created Item still exists even after ttl time has passed since the TTL is disabled at container level(no defaultTtl property defined)\n    await sleep(7000);\n    await checkItemExists(container, createdItem);\n  });\n\n  it(\"Validate Item TTL Misc cases.\", async function() {\n    const database = await getTestDatabase(\"ttl test4 database\");\n\n    const containerDefinition = {\n      id: \"sample container\",\n      defaultTtl: 8\n    };\n\n    const { resource: containerResult } = await database.containers.create(containerDefinition);\n\n    const container = await database.container(containerResult.id);\n\n    const itemDefinition = {\n      id: \"doc1\",\n      name: \"sample Item\",\n      key: \"value\"\n    };\n\n    const { resource: createdItem } = await container.items.create(itemDefinition);\n\n    await sleep(10000);\n    // the created Item should be gone now as the ttl time expired\n    await checkItemGone(container, createdItem);\n    // We can create a Item with the same id after the ttl time has expired\n    const { resource: doc } = await container.items.create(itemDefinition);\n    assert.equal(itemDefinition.id, doc.id);\n    await sleep(3000);\n\n    // Upsert the Item after 3 secs to reset the Item 's ttl\n    itemDefinition.key = \"value2\";\n    const { resource: upsertedItem } = await container.items.upsert(itemDefinition);\n    await sleep(7000);\n    // Upserted Item still exists after (3+7)10 secs from Item creation time( with container 's defaultTtl set to 8) since it' s ttl was reset after 3 secs by upserting it\n    await checkItemExists(container, upsertedItem);\n    await sleep(3000);\n\n    // the upserted Item should be gone now after 10 secs from the last write(upsert) of the Item\n    await checkItemGone(container, upsertedItem);\n    const query = \"SELECT * FROM root r\";\n    const { resources: results } = await container.items.query(query).fetchAll();\n    assert.equal(results.length, 0);\n\n    await container.replace({ id: container.id, partitionKey: containerResult.partitionKey });\n\n    itemDefinition.id = \"doc2\";\n\n    const { resource: createdItem2 } = await container.items.create(itemDefinition);\n    await sleep(5000);\n\n    // Created Item still exists even after ttl time has passed since the TTL is disabled at container level\n    await checkItemExists(container, createdItem2);\n  });\n});\n"]}