{"version":3,"file":"npcontainer.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/npcontainer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport {\n  CosmosClient,\n  Constants,\n  Container,\n  PluginConfig,\n  CosmosClientOptions\n} from \"../../../src\";\nimport { removeAllDatabases, getTestContainer } from \"../common/TestHelpers\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\nimport { ResourceType, HTTPMethod, StatusCodes } from \"../../../src\";\n\nconst plugins: PluginConfig[] = [\n  {\n    on: \"request\",\n    plugin: (context, next) => {\n      // Intercepts the API request to create a non-partitioned container using an old API version\n      if (context.resourceType === ResourceType.container && context.method === HTTPMethod.post) {\n        context.body = JSON.stringify({ id: JSON.parse(context.body).id });\n      }\n      context.headers[Constants.HttpHeaders.Version] = \"2018-06-18\";\n      return next(context);\n    }\n  }\n];\n\nconst options: CosmosClientOptions = {\n  endpoint,\n  key: masterKey\n};\n\nconst legacyClient = new CosmosClient({ ...options, plugins } as any);\n\nconst client = new CosmosClient({\n  endpoint,\n  key: masterKey\n});\n\ndescribe(\"Non Partitioned Container\", function() {\n  let container: Container;\n  before(async () => {\n    await removeAllDatabases();\n    const npContainer = await getTestContainer(\"Validate Container CRUD\", legacyClient);\n    container = client.database(npContainer.database.id).container(npContainer.id);\n  });\n\n  after(async () => {\n    client.dispose();\n    legacyClient.dispose();\n  });\n\n  it(\"should handle item CRUD\", async () => {\n    // read items\n    const { resources: items } = await container.items.readAll().fetchAll();\n    assert(Array.isArray(items), \"Value should be an array\");\n\n    // create an item\n    const name = \"sample document\";\n    const { resource: item1 } = await container.items.create({\n      id: \"a\",\n      name,\n      foo: \"bar\",\n      key: \"value\"\n    });\n\n    assert.equal(item1.name, name);\n\n    // read an item\n    const { resource: item2 } = await container.item(item1.id, undefined).read();\n    assert.equal(item2.id, item1.id);\n\n    // upsert an item\n    const { resource: item3 } = await container.items.upsert({\n      id: \"b\",\n      name: \"sample document\",\n      foo: \"bar\",\n      key: \"value\"\n    });\n    assert.equal(item3.name, name);\n\n    // replace an item\n    const newProp = \"baz\";\n    const { resource: item4 } = await container.item(\"a\", undefined).replace({\n      id: \"a\",\n      newProp\n    });\n    assert.equal(item4.newProp, newProp);\n\n    // read documents after creation\n    const { resources: documents } = await container.items.readAll().fetchAll();\n    assert.equal(documents.length, 2, \"create should increase the number of documents\");\n\n    // query documents\n    const { resources: results } = await container.items.query(\"SELECT * FROM root r\").fetchAll();\n    assert(results.length === 2, \"Container should contain two items\");\n\n    // delete a document\n    await container.item(item1.id, undefined).delete();\n\n    // read documents after deletion\n    const response = await container.item(item1.id, undefined).read();\n    assert.equal(response.statusCode, StatusCodes.NotFound);\n    assert.equal(response.resource, undefined);\n  });\n});\n"]}