{"version":3,"file":"database.spec.js","sourceRoot":"","sources":["../../../../test/public/functional/database.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport assert from \"assert\";\nimport { Suite } from \"mocha\";\nimport { CosmosClient, DatabaseDefinition, Database } from \"../../../src\";\nimport { endpoint } from \"../common/_testConfig\";\nimport { masterKey } from \"../common/_fakeTestSecrets\";\nimport {\n  addEntropy,\n  removeAllDatabases,\n  getTestDatabase,\n  assertThrowsAsync\n} from \"../common/TestHelpers\";\nimport { DatabaseRequest } from \"../../../src\";\n\nconst client = new CosmosClient({\n  endpoint,\n  key: masterKey,\n  connectionPolicy: { enableBackgroundEndpointRefreshing: false }\n});\n\ndescribe(\"NodeJS CRUD Tests\", function(this: Suite) {\n  this.timeout(process.env.MOCHA_TIMEOUT || 10000);\n  beforeEach(async function() {\n    await removeAllDatabases();\n  });\n\n  describe(\"Validate Database CRUD\", async function() {\n    const databaseCRUDTest = async function(): Promise<void> {\n      // read databases\n      const { resources: databases } = await client.databases.readAll().fetchAll();\n      assert.equal(databases.constructor, Array, \"Value should be an array\");\n\n      // create a database\n      const beforeCreateDatabasesCount = databases.length;\n      const databaseDefinition = { id: \"database test database\", throughput: 400 };\n      const { resource: db } = await client.databases.create(databaseDefinition);\n      assert.equal(db.id, databaseDefinition.id);\n\n      // read databases after creation\n      const { resources: databases2 } = await client.databases.readAll().fetchAll();\n      assert.equal(\n        databases2.length,\n        beforeCreateDatabasesCount + 1,\n        \"create should increase the number of databases\"\n      );\n      // query databases\n      const querySpec = {\n        query: \"SELECT * FROM root r WHERE r.id=@id\",\n        parameters: [\n          {\n            name: \"@id\",\n            value: databaseDefinition.id\n          }\n        ]\n      };\n      const { resources: results } = await client.databases.query(querySpec).fetchAll();\n      assert(results.length > 0, \"number of results for the query should be > 0\");\n\n      // delete database\n      await client.database(db.id).delete();\n      try {\n        // read database after deletion\n        await client.database(db.id).read();\n        assert.fail(\"Read database on non-existent database should fail\");\n      } catch (err) {\n        const notFoundErrorCode = 404;\n        assert.equal(err.code, notFoundErrorCode, \"response should return error code 404\");\n      }\n    };\n\n    it(\"nativeApi Should do database CRUD operations successfully name based\", async function() {\n      await databaseCRUDTest();\n    });\n\n    describe(\"databases.createIfNotExists\", function() {\n      it(\"should handle does not exist\", async function() {\n        const def: DatabaseDefinition = { id: addEntropy(\"does not exist\") };\n        const { database } = await client.databases.createIfNotExists(def);\n        const { resource: readDef } = await database.read();\n        assert.equal(def.id, readDef.id);\n      });\n\n      it(\"should handle does exist\", async function() {\n        const def: DatabaseDefinition = { id: addEntropy(\"does  exist\") };\n        // Set up\n        await client.databases.create(def);\n\n        // Now call createIfNotExists on existing db\n        const { database } = await client.databases.createIfNotExists(def);\n        const { resource: readDef } = await database.read();\n        assert.equal(def.id, readDef.id);\n      });\n    });\n  });\n\n  // TODO: These are unit tests, not e2e tests like above, so maybe should seperate these.\n  describe(\"Validate Id validation\", function() {\n    it(\"nativeApi Should fail on ends with a space\", async function() {\n      // Id shoudn't end with a space.\n      try {\n        await client.databases.create({ id: \"id_ends_with_space \" });\n        assert.fail(\"Must throw if id ends with a space\");\n      } catch (err) {\n        assert.equal(\"Id ends with a space.\", err.message);\n      }\n    });\n\n    it(\"nativeAPI Should fail on contains '/'\", async function() {\n      // Id shoudn't contain \"/\".\n      try {\n        await client.databases.create({ id: \"id_with_illegal/_char\" });\n        assert.fail(\"Must throw if id has illegal characters\");\n      } catch (err) {\n        assert.equal(\"Id contains illegal chars.\", err.message);\n      }\n    });\n\n    it(\"nativeAPI Should fail on contains '\\\\'\", async function() {\n      // Id shoudn't contain \"\\\\\".\n      try {\n        await client.databases.create({ id: \"id_with_illegal\\\\_char\" });\n        assert.fail(\"Must throw if id contains illegal characters\");\n      } catch (err) {\n        assert.equal(\"Id contains illegal chars.\", err.message);\n      }\n    });\n\n    it(\"nativeAPI Should fail on contains '?'\", async function() {\n      // Id shoudn't contain \"?\".\n      try {\n        await client.databases.create({ id: \"id_with_illegal?_?char\" });\n        assert.fail(\"Must throw if id contains illegal characters\");\n      } catch (err) {\n        assert.equal(\"Id contains illegal chars.\", err.message);\n      }\n    });\n\n    it(\"nativeAPI should fail on contains '#'\", async function() {\n      // Id shouldn't contain \"#\".\n      try {\n        await client.databases.create({ id: \"id_with_illegal#_char\" });\n        assert.fail(\"Must throw if id contains illegal characters\");\n      } catch (err) {\n        assert.equal(\"Id contains illegal chars.\", err.message);\n      }\n    });\n  });\n});\n\ndescribe(\"database.readOffer\", function() {\n  describe(\"without offer\", async function() {\n    let offerlessDatabase: Database;\n    before(async function() {\n      offerlessDatabase = await getTestDatabase(\"has offer db1\");\n    });\n    it(\"returns undefined resource\", async function() {\n      const offer: any = await offerlessDatabase.readOffer();\n      assert.equal(offer.resource, undefined);\n    });\n  });\n  describe(\"has offer\", function() {\n    let offerDatabase: Database;\n    before(async function() {\n      offerDatabase = await getTestDatabase(\"has offer db2\", undefined, { throughput: 500 });\n    });\n    it(\"returns offer\", async function() {\n      const offer: any = await offerDatabase.readOffer();\n      assert.equal(offer.resource.offerVersion, \"V2\");\n    });\n  });\n});\n\ndescribe(\"database.create\", function() {\n  it(\"uses autoscale\", async function() {\n    const maxThroughput = 50000;\n    const databaseRequest: DatabaseRequest = {\n      maxThroughput\n    };\n    const database = await getTestDatabase(\"autoscale db\", undefined, databaseRequest);\n    const { resource: offer } = await database.readOffer();\n    const settings = offer.content.offerAutopilotSettings;\n    assert.equal(settings.maxThroughput, maxThroughput);\n  });\n  it(\"throws with maxThroughput and throughput\", function() {\n    const databaseRequest: DatabaseRequest = {\n      throughput: 400,\n      maxThroughput: 4000\n    };\n    assertThrowsAsync(() => getTestDatabase(\"autoscale db\", undefined, databaseRequest));\n  });\n});\n"]}